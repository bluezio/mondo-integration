/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package uk.ac.york.mondo.integration.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-29")
public class ModelElementChange implements org.apache.thrift.TBase<ModelElementChange, ModelElementChange._Fields>, java.io.Serializable, Cloneable, Comparable<ModelElementChange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelElementChange");

  private static final org.apache.thrift.protocol.TField ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("element", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHANGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("changePath", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelElementChangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelElementChangeTupleSchemeFactory());
  }

  public ModelElement element; // required
  /**
   * 
   * @see ModelElementChangeType
   */
  public ModelElementChangeType type; // required
  public String changePath; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ELEMENT((short)1, "element"),
    /**
     * 
     * @see ModelElementChangeType
     */
    TYPE((short)2, "type"),
    CHANGE_PATH((short)3, "changePath");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ELEMENT
          return ELEMENT;
        case 2: // TYPE
          return TYPE;
        case 3: // CHANGE_PATH
          return CHANGE_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CHANGE_PATH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("element", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelElement.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ModelElementChangeType.class)));
    tmpMap.put(_Fields.CHANGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("changePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelElementChange.class, metaDataMap);
  }

  public ModelElementChange() {
  }

  public ModelElementChange(
    ModelElement element,
    ModelElementChangeType type)
  {
    this();
    this.element = element;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelElementChange(ModelElementChange other) {
    if (other.isSetElement()) {
      this.element = new ModelElement(other.element);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetChangePath()) {
      this.changePath = other.changePath;
    }
  }

  public ModelElementChange deepCopy() {
    return new ModelElementChange(this);
  }

  @Override
  public void clear() {
    this.element = null;
    this.type = null;
    this.changePath = null;
  }

  public ModelElement getElement() {
    return this.element;
  }

  public ModelElementChange setElement(ModelElement element) {
    this.element = element;
    return this;
  }

  public void unsetElement() {
    this.element = null;
  }

  /** Returns true if field element is set (has been assigned a value) and false otherwise */
  public boolean isSetElement() {
    return this.element != null;
  }

  public void setElementIsSet(boolean value) {
    if (!value) {
      this.element = null;
    }
  }

  /**
   * 
   * @see ModelElementChangeType
   */
  public ModelElementChangeType getType() {
    return this.type;
  }

  /**
   * 
   * @see ModelElementChangeType
   */
  public ModelElementChange setType(ModelElementChangeType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getChangePath() {
    return this.changePath;
  }

  public ModelElementChange setChangePath(String changePath) {
    this.changePath = changePath;
    return this;
  }

  public void unsetChangePath() {
    this.changePath = null;
  }

  /** Returns true if field changePath is set (has been assigned a value) and false otherwise */
  public boolean isSetChangePath() {
    return this.changePath != null;
  }

  public void setChangePathIsSet(boolean value) {
    if (!value) {
      this.changePath = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ELEMENT:
      if (value == null) {
        unsetElement();
      } else {
        setElement((ModelElement)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ModelElementChangeType)value);
      }
      break;

    case CHANGE_PATH:
      if (value == null) {
        unsetChangePath();
      } else {
        setChangePath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ELEMENT:
      return getElement();

    case TYPE:
      return getType();

    case CHANGE_PATH:
      return getChangePath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ELEMENT:
      return isSetElement();
    case TYPE:
      return isSetType();
    case CHANGE_PATH:
      return isSetChangePath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelElementChange)
      return this.equals((ModelElementChange)that);
    return false;
  }

  public boolean equals(ModelElementChange that) {
    if (that == null)
      return false;

    boolean this_present_element = true && this.isSetElement();
    boolean that_present_element = true && that.isSetElement();
    if (this_present_element || that_present_element) {
      if (!(this_present_element && that_present_element))
        return false;
      if (!this.element.equals(that.element))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_changePath = true && this.isSetChangePath();
    boolean that_present_changePath = true && that.isSetChangePath();
    if (this_present_changePath || that_present_changePath) {
      if (!(this_present_changePath && that_present_changePath))
        return false;
      if (!this.changePath.equals(that.changePath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_element = true && (isSetElement());
    list.add(present_element);
    if (present_element)
      list.add(element);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_changePath = true && (isSetChangePath());
    list.add(present_changePath);
    if (present_changePath)
      list.add(changePath);

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelElementChange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetElement()).compareTo(other.isSetElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.element, other.element);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChangePath()).compareTo(other.isSetChangePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changePath, other.changePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelElementChange(");
    boolean first = true;

    sb.append("element:");
    if (this.element == null) {
      sb.append("null");
    } else {
      sb.append(this.element);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetChangePath()) {
      if (!first) sb.append(", ");
      sb.append("changePath:");
      if (this.changePath == null) {
        sb.append("null");
      } else {
        sb.append(this.changePath);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (element == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'element' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (element != null) {
      element.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelElementChangeStandardSchemeFactory implements SchemeFactory {
    public ModelElementChangeStandardScheme getScheme() {
      return new ModelElementChangeStandardScheme();
    }
  }

  private static class ModelElementChangeStandardScheme extends StandardScheme<ModelElementChange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelElementChange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.element = new ModelElement();
              struct.element.read(iprot);
              struct.setElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = uk.ac.york.mondo.integration.api.ModelElementChangeType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANGE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.changePath = iprot.readString();
              struct.setChangePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelElementChange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.element != null) {
        oprot.writeFieldBegin(ELEMENT_FIELD_DESC);
        struct.element.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.changePath != null) {
        if (struct.isSetChangePath()) {
          oprot.writeFieldBegin(CHANGE_PATH_FIELD_DESC);
          oprot.writeString(struct.changePath);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelElementChangeTupleSchemeFactory implements SchemeFactory {
    public ModelElementChangeTupleScheme getScheme() {
      return new ModelElementChangeTupleScheme();
    }
  }

  private static class ModelElementChangeTupleScheme extends TupleScheme<ModelElementChange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelElementChange struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.element.write(oprot);
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetChangePath()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetChangePath()) {
        oprot.writeString(struct.changePath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelElementChange struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.element = new ModelElement();
      struct.element.read(iprot);
      struct.setElementIsSet(true);
      struct.type = uk.ac.york.mondo.integration.api.ModelElementChangeType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.changePath = iprot.readString();
        struct.setChangePathIsSet(true);
      }
    }
  }

}

