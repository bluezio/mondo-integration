//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Hawk_createInstance_args = function(args) {
  this.name = null;
  this.backend = null;
  this.minimumDelayMillis = null;
  this.maximumDelayMillis = null;
  this.enabledPlugins = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.backend !== undefined && args.backend !== null) {
      this.backend = args.backend;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field backend is unset!');
    }
    if (args.minimumDelayMillis !== undefined && args.minimumDelayMillis !== null) {
      this.minimumDelayMillis = args.minimumDelayMillis;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field minimumDelayMillis is unset!');
    }
    if (args.maximumDelayMillis !== undefined && args.maximumDelayMillis !== null) {
      this.maximumDelayMillis = args.maximumDelayMillis;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maximumDelayMillis is unset!');
    }
    if (args.enabledPlugins !== undefined && args.enabledPlugins !== null) {
      this.enabledPlugins = Thrift.copyList(args.enabledPlugins, [null]);
    }
  }
};
Hawk_createInstance_args.prototype = {};
Hawk_createInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.backend = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.minimumDelayMillis = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maximumDelayMillis = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.enabledPlugins = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readString().value;
          this.enabledPlugins.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_createInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_createInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.backend !== null && this.backend !== undefined) {
    output.writeFieldBegin('backend', Thrift.Type.STRING, 2);
    output.writeString(this.backend);
    output.writeFieldEnd();
  }
  if (this.minimumDelayMillis !== null && this.minimumDelayMillis !== undefined) {
    output.writeFieldBegin('minimumDelayMillis', Thrift.Type.I32, 3);
    output.writeI32(this.minimumDelayMillis);
    output.writeFieldEnd();
  }
  if (this.maximumDelayMillis !== null && this.maximumDelayMillis !== undefined) {
    output.writeFieldBegin('maximumDelayMillis', Thrift.Type.I32, 4);
    output.writeI32(this.maximumDelayMillis);
    output.writeFieldEnd();
  }
  if (this.enabledPlugins !== null && this.enabledPlugins !== undefined) {
    output.writeFieldBegin('enabledPlugins', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.enabledPlugins.length);
    for (var iter263 in this.enabledPlugins)
    {
      if (this.enabledPlugins.hasOwnProperty(iter263))
      {
        iter263 = this.enabledPlugins[iter263];
        output.writeString(iter263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_createInstance_result = function(args) {
};
Hawk_createInstance_result.prototype = {};
Hawk_createInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_createInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_createInstance_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listBackends_args = function(args) {
};
Hawk_listBackends_args.prototype = {};
Hawk_listBackends_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listBackends_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listBackends_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listBackends_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Hawk_listBackends_result.prototype = {};
Hawk_listBackends_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.success = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = input.readString().value;
          this.success.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listBackends_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listBackends_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter271 in this.success)
    {
      if (this.success.hasOwnProperty(iter271))
      {
        iter271 = this.success[iter271];
        output.writeString(iter271);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listPlugins_args = function(args) {
};
Hawk_listPlugins_args.prototype = {};
Hawk_listPlugins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listPlugins_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listPlugins_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listPlugins_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Hawk_listPlugins_result.prototype = {};
Hawk_listPlugins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.success = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = input.readString().value;
          this.success.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listPlugins_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listPlugins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter279 in this.success)
    {
      if (this.success.hasOwnProperty(iter279))
      {
        iter279 = this.success[iter279];
        output.writeString(iter279);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listInstances_args = function(args) {
};
Hawk_listInstances_args.prototype = {};
Hawk_listInstances_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listInstances_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listInstances_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listInstances_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [HawkInstance]);
    }
  }
};
Hawk_listInstances_result.prototype = {};
Hawk_listInstances_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.success = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = new HawkInstance();
          elem286.read(input);
          this.success.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listInstances_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listInstances_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter287 in this.success)
    {
      if (this.success.hasOwnProperty(iter287))
      {
        iter287 = this.success[iter287];
        iter287.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeInstance_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_removeInstance_args.prototype = {};
Hawk_removeInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeInstance_result = function(args) {
  this.err1 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
  }
};
Hawk_removeInstance_result.prototype = {};
Hawk_removeInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_startInstance_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_startInstance_args.prototype = {};
Hawk_startInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_startInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_startInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_startInstance_result = function(args) {
  this.err1 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
  }
};
Hawk_startInstance_result.prototype = {};
Hawk_startInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_startInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_startInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_stopInstance_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_stopInstance_args.prototype = {};
Hawk_stopInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_stopInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_stopInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_stopInstance_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_stopInstance_result.prototype = {};
Hawk_stopInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_stopInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_stopInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_syncInstance_args = function(args) {
  this.name = null;
  this.blockUntilDone = false;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.blockUntilDone !== undefined && args.blockUntilDone !== null) {
      this.blockUntilDone = args.blockUntilDone;
    }
  }
};
Hawk_syncInstance_args.prototype = {};
Hawk_syncInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.blockUntilDone = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_syncInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_syncInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.blockUntilDone !== null && this.blockUntilDone !== undefined) {
    output.writeFieldBegin('blockUntilDone', Thrift.Type.BOOL, 2);
    output.writeBool(this.blockUntilDone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_syncInstance_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_syncInstance_result.prototype = {};
Hawk_syncInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_syncInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_syncInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_registerMetamodels_args = function(args) {
  this.name = null;
  this.metamodel = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.metamodel !== undefined && args.metamodel !== null) {
      this.metamodel = Thrift.copyList(args.metamodel, [File]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodel is unset!');
    }
  }
};
Hawk_registerMetamodels_args.prototype = {};
Hawk_registerMetamodels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.metamodel = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = new File();
          elem294.read(input);
          this.metamodel.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_registerMetamodels_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_registerMetamodels_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.metamodel !== null && this.metamodel !== undefined) {
    output.writeFieldBegin('metamodel', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.metamodel.length);
    for (var iter295 in this.metamodel)
    {
      if (this.metamodel.hasOwnProperty(iter295))
      {
        iter295 = this.metamodel[iter295];
        iter295.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_registerMetamodels_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof InvalidMetamodel) {
    this.err2 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_registerMetamodels_result.prototype = {};
Hawk_registerMetamodels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new InvalidMetamodel();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new HawkInstanceNotRunning();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_registerMetamodels_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_registerMetamodels_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_unregisterMetamodels_args = function(args) {
  this.name = null;
  this.metamodel = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.metamodel !== undefined && args.metamodel !== null) {
      this.metamodel = Thrift.copyList(args.metamodel, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodel is unset!');
    }
  }
};
Hawk_unregisterMetamodels_args.prototype = {};
Hawk_unregisterMetamodels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.metamodel = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = input.readString().value;
          this.metamodel.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_unregisterMetamodels_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_unregisterMetamodels_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.metamodel !== null && this.metamodel !== undefined) {
    output.writeFieldBegin('metamodel', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.metamodel.length);
    for (var iter303 in this.metamodel)
    {
      if (this.metamodel.hasOwnProperty(iter303))
      {
        iter303 = this.metamodel[iter303];
        output.writeString(iter303);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_unregisterMetamodels_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_unregisterMetamodels_result.prototype = {};
Hawk_unregisterMetamodels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_unregisterMetamodels_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_unregisterMetamodels_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listMetamodels_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listMetamodels_args.prototype = {};
Hawk_listMetamodels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listMetamodels_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listMetamodels_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listMetamodels_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listMetamodels_result.prototype = {};
Hawk_listMetamodels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.success = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = input.readString().value;
          this.success.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listMetamodels_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listMetamodels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter311 in this.success)
    {
      if (this.success.hasOwnProperty(iter311))
      {
        iter311 = this.success[iter311];
        output.writeString(iter311);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listQueryLanguages_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listQueryLanguages_args.prototype = {};
Hawk_listQueryLanguages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listQueryLanguages_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listQueryLanguages_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listQueryLanguages_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Hawk_listQueryLanguages_result.prototype = {};
Hawk_listQueryLanguages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.success = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = input.readString().value;
          this.success.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listQueryLanguages_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listQueryLanguages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter319 in this.success)
    {
      if (this.success.hasOwnProperty(iter319))
      {
        iter319 = this.success[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_query_args = function(args) {
  this.name = null;
  this.query = null;
  this.language = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field query is unset!');
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field language is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_query_args.prototype = {};
Hawk_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_query_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_query_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 4);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_query_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  this.err5 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof UnknownQueryLanguage) {
    this.err3 = args;
    return;
  }
  if (args instanceof InvalidQuery) {
    this.err4 = args;
    return;
  }
  if (args instanceof FailedQuery) {
    this.err5 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [QueryResult]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined && args.err4 !== null) {
      this.err4 = args.err4;
    }
    if (args.err5 !== undefined && args.err5 !== null) {
      this.err5 = args.err5;
    }
  }
};
Hawk_query_result.prototype = {};
Hawk_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.success = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = new QueryResult();
          elem326.read(input);
          this.success.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new UnknownQueryLanguage();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new InvalidQuery();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.err5 = new FailedQuery();
        this.err5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_query_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter327 in this.success)
    {
      if (this.success.hasOwnProperty(iter327))
      {
        iter327 = this.success[iter327];
        iter327.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  if (this.err5 !== null && this.err5 !== undefined) {
    output.writeFieldBegin('err5', Thrift.Type.STRUCT, 5);
    this.err5.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_resolveProxies_args = function(args) {
  this.name = null;
  this.ids = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_resolveProxies_args.prototype = {};
Hawk_resolveProxies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.ids = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = input.readString().value;
          this.ids.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_resolveProxies_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_resolveProxies_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter335 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter335))
      {
        iter335 = this.ids[iter335];
        output.writeString(iter335);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_resolveProxies_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ModelElement]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_resolveProxies_result.prototype = {};
Hawk_resolveProxies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size336 = 0;
        var _rtmp3340;
        this.success = [];
        var _etype339 = 0;
        _rtmp3340 = input.readListBegin();
        _etype339 = _rtmp3340.etype;
        _size336 = _rtmp3340.size;
        for (var _i341 = 0; _i341 < _size336; ++_i341)
        {
          var elem342 = null;
          elem342 = new ModelElement();
          elem342.read(input);
          this.success.push(elem342);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_resolveProxies_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_resolveProxies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter343 in this.success)
    {
      if (this.success.hasOwnProperty(iter343))
      {
        iter343 = this.success[iter343];
        iter343.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addRepository_args = function(args) {
  this.name = null;
  this.repo = null;
  this.credentials = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repo !== undefined && args.repo !== null) {
      this.repo = new Repository(args.repo);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repo is unset!');
    }
    if (args.credentials !== undefined && args.credentials !== null) {
      this.credentials = new Credentials(args.credentials);
    }
  }
};
Hawk_addRepository_args.prototype = {};
Hawk_addRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo = new Repository();
        this.repo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new Credentials();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addRepository_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addRepository_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repo !== null && this.repo !== undefined) {
    output.writeFieldBegin('repo', Thrift.Type.STRUCT, 2);
    this.repo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials !== null && this.credentials !== undefined) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 3);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addRepository_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof UnknownRepositoryType) {
    this.err3 = args;
    return;
  }
  if (args instanceof VCSAuthenticationFailed) {
    this.err4 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined && args.err4 !== null) {
      this.err4 = args.err4;
    }
  }
};
Hawk_addRepository_result.prototype = {};
Hawk_addRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new UnknownRepositoryType();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new VCSAuthenticationFailed();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addRepository_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addRepository_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_isFrozen_args = function(args) {
  this.name = null;
  this.uri = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
  }
};
Hawk_isFrozen_args.prototype = {};
Hawk_isFrozen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_isFrozen_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_isFrozen_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_isFrozen_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_isFrozen_result.prototype = {};
Hawk_isFrozen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_isFrozen_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_isFrozen_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_setFrozen_args = function(args) {
  this.name = null;
  this.uri = null;
  this.isFrozen = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.isFrozen !== undefined && args.isFrozen !== null) {
      this.isFrozen = args.isFrozen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isFrozen is unset!');
    }
  }
};
Hawk_setFrozen_args.prototype = {};
Hawk_setFrozen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isFrozen = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_setFrozen_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_setFrozen_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.isFrozen !== null && this.isFrozen !== undefined) {
    output.writeFieldBegin('isFrozen', Thrift.Type.BOOL, 3);
    output.writeBool(this.isFrozen);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_setFrozen_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_setFrozen_result.prototype = {};
Hawk_setFrozen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_setFrozen_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_setFrozen_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeRepository_args = function(args) {
  this.name = null;
  this.uri = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
  }
};
Hawk_removeRepository_args.prototype = {};
Hawk_removeRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeRepository_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeRepository_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeRepository_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeRepository_result.prototype = {};
Hawk_removeRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeRepository_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeRepository_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_args = function(args) {
  this.name = null;
  this.uri = null;
  this.cred = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.cred !== undefined && args.cred !== null) {
      this.cred = new Credentials(args.cred);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cred is unset!');
    }
  }
};
Hawk_updateRepositoryCredentials_args.prototype = {};
Hawk_updateRepositoryCredentials_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cred = new Credentials();
        this.cred.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_updateRepositoryCredentials_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.cred !== null && this.cred !== undefined) {
    output.writeFieldBegin('cred', Thrift.Type.STRUCT, 3);
    this.cred.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_updateRepositoryCredentials_result.prototype = {};
Hawk_updateRepositoryCredentials_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_updateRepositoryCredentials_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositories_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listRepositories_args.prototype = {};
Hawk_listRepositories_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositories_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositories_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositories_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Repository]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listRepositories_result.prototype = {};
Hawk_listRepositories_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size344 = 0;
        var _rtmp3348;
        this.success = [];
        var _etype347 = 0;
        _rtmp3348 = input.readListBegin();
        _etype347 = _rtmp3348.etype;
        _size344 = _rtmp3348.size;
        for (var _i349 = 0; _i349 < _size344; ++_i349)
        {
          var elem350 = null;
          elem350 = new Repository();
          elem350.read(input);
          this.success.push(elem350);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositories_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositories_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter351 in this.success)
    {
      if (this.success.hasOwnProperty(iter351))
      {
        iter351 = this.success[iter351];
        iter351.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositoryTypes_args = function(args) {
};
Hawk_listRepositoryTypes_args.prototype = {};
Hawk_listRepositoryTypes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositoryTypes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositoryTypes_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositoryTypes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Hawk_listRepositoryTypes_result.prototype = {};
Hawk_listRepositoryTypes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size352 = 0;
        var _rtmp3356;
        this.success = [];
        var _etype355 = 0;
        _rtmp3356 = input.readListBegin();
        _etype355 = _rtmp3356.etype;
        _size352 = _rtmp3356.size;
        for (var _i357 = 0; _i357 < _size352; ++_i357)
        {
          var elem358 = null;
          elem358 = input.readString().value;
          this.success.push(elem358);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositoryTypes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositoryTypes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter359 in this.success)
    {
      if (this.success.hasOwnProperty(iter359))
      {
        iter359 = this.success[iter359];
        output.writeString(iter359);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listFiles_args = function(args) {
  this.name = null;
  this.repository = null;
  this.filePatterns = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repository !== undefined && args.repository !== null) {
      this.repository = Thrift.copyList(args.repository, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repository is unset!');
    }
    if (args.filePatterns !== undefined && args.filePatterns !== null) {
      this.filePatterns = Thrift.copyList(args.filePatterns, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePatterns is unset!');
    }
  }
};
Hawk_listFiles_args.prototype = {};
Hawk_listFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size360 = 0;
        var _rtmp3364;
        this.repository = [];
        var _etype363 = 0;
        _rtmp3364 = input.readListBegin();
        _etype363 = _rtmp3364.etype;
        _size360 = _rtmp3364.size;
        for (var _i365 = 0; _i365 < _size360; ++_i365)
        {
          var elem366 = null;
          elem366 = input.readString().value;
          this.repository.push(elem366);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size367 = 0;
        var _rtmp3371;
        this.filePatterns = [];
        var _etype370 = 0;
        _rtmp3371 = input.readListBegin();
        _etype370 = _rtmp3371.etype;
        _size367 = _rtmp3371.size;
        for (var _i372 = 0; _i372 < _size367; ++_i372)
        {
          var elem373 = null;
          elem373 = input.readString().value;
          this.filePatterns.push(elem373);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listFiles_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listFiles_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repository !== null && this.repository !== undefined) {
    output.writeFieldBegin('repository', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.repository.length);
    for (var iter374 in this.repository)
    {
      if (this.repository.hasOwnProperty(iter374))
      {
        iter374 = this.repository[iter374];
        output.writeString(iter374);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filePatterns !== null && this.filePatterns !== undefined) {
    output.writeFieldBegin('filePatterns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.filePatterns.length);
    for (var iter375 in this.filePatterns)
    {
      if (this.filePatterns.hasOwnProperty(iter375))
      {
        iter375 = this.filePatterns[iter375];
        output.writeString(iter375);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listFiles_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listFiles_result.prototype = {};
Hawk_listFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size376 = 0;
        var _rtmp3380;
        this.success = [];
        var _etype379 = 0;
        _rtmp3380 = input.readListBegin();
        _etype379 = _rtmp3380.etype;
        _size376 = _rtmp3380.size;
        for (var _i381 = 0; _i381 < _size376; ++_i381)
        {
          var elem382 = null;
          elem382 = input.readString().value;
          this.success.push(elem382);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listFiles_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter383 in this.success)
    {
      if (this.success.hasOwnProperty(iter383))
      {
        iter383 = this.success[iter383];
        output.writeString(iter383);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_configurePolling_args = function(args) {
  this.name = null;
  this.base = null;
  this.max = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.base !== undefined && args.base !== null) {
      this.base = args.base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field base is unset!');
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field max is unset!');
    }
  }
};
Hawk_configurePolling_args.prototype = {};
Hawk_configurePolling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.base = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.max = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_configurePolling_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_configurePolling_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.base !== null && this.base !== undefined) {
    output.writeFieldBegin('base', Thrift.Type.I32, 2);
    output.writeI32(this.base);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I32, 3);
    output.writeI32(this.max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_configurePolling_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidPollingConfiguration) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_configurePolling_result.prototype = {};
Hawk_configurePolling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidPollingConfiguration();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_configurePolling_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_configurePolling_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addDerivedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new DerivedAttributeSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_addDerivedAttribute_args.prototype = {};
Hawk_addDerivedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new DerivedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addDerivedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addDerivedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addDerivedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidDerivedAttributeSpec) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_addDerivedAttribute_result.prototype = {};
Hawk_addDerivedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidDerivedAttributeSpec();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addDerivedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addDerivedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeDerivedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new DerivedAttributeSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_removeDerivedAttribute_args.prototype = {};
Hawk_removeDerivedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new DerivedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeDerivedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeDerivedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeDerivedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeDerivedAttribute_result.prototype = {};
Hawk_removeDerivedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeDerivedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeDerivedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listDerivedAttributes_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listDerivedAttributes_args.prototype = {};
Hawk_listDerivedAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listDerivedAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listDerivedAttributes_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listDerivedAttributes_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DerivedAttributeSpec]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listDerivedAttributes_result.prototype = {};
Hawk_listDerivedAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size384 = 0;
        var _rtmp3388;
        this.success = [];
        var _etype387 = 0;
        _rtmp3388 = input.readListBegin();
        _etype387 = _rtmp3388.etype;
        _size384 = _rtmp3388.size;
        for (var _i389 = 0; _i389 < _size384; ++_i389)
        {
          var elem390 = null;
          elem390 = new DerivedAttributeSpec();
          elem390.read(input);
          this.success.push(elem390);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listDerivedAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listDerivedAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter391 in this.success)
    {
      if (this.success.hasOwnProperty(iter391))
      {
        iter391 = this.success[iter391];
        iter391.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addIndexedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new IndexedAttributeSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_addIndexedAttribute_args.prototype = {};
Hawk_addIndexedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new IndexedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addIndexedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addIndexedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addIndexedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidIndexedAttributeSpec) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_addIndexedAttribute_result.prototype = {};
Hawk_addIndexedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidIndexedAttributeSpec();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addIndexedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addIndexedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeIndexedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new IndexedAttributeSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_removeIndexedAttribute_args.prototype = {};
Hawk_removeIndexedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new IndexedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeIndexedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeIndexedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeIndexedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeIndexedAttribute_result.prototype = {};
Hawk_removeIndexedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeIndexedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeIndexedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listIndexedAttributes_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listIndexedAttributes_args.prototype = {};
Hawk_listIndexedAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listIndexedAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listIndexedAttributes_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listIndexedAttributes_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [IndexedAttributeSpec]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listIndexedAttributes_result.prototype = {};
Hawk_listIndexedAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size392 = 0;
        var _rtmp3396;
        this.success = [];
        var _etype395 = 0;
        _rtmp3396 = input.readListBegin();
        _etype395 = _rtmp3396.etype;
        _size392 = _rtmp3396.size;
        for (var _i397 = 0; _i397 < _size392; ++_i397)
        {
          var elem398 = null;
          elem398 = new IndexedAttributeSpec();
          elem398.read(input);
          this.success.push(elem398);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listIndexedAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listIndexedAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter399 in this.success)
    {
      if (this.success.hasOwnProperty(iter399))
      {
        iter399 = this.success[iter399];
        iter399.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getModel_args = function(args) {
  this.name = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_getModel_args.prototype = {};
Hawk_getModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getModel_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getModel_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getModel_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ModelElement]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_getModel_result.prototype = {};
Hawk_getModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size400 = 0;
        var _rtmp3404;
        this.success = [];
        var _etype403 = 0;
        _rtmp3404 = input.readListBegin();
        _etype403 = _rtmp3404.etype;
        _size400 = _rtmp3404.size;
        for (var _i405 = 0; _i405 < _size400; ++_i405)
        {
          var elem406 = null;
          elem406 = new ModelElement();
          elem406.read(input);
          this.success.push(elem406);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getModel_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getModel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter407 in this.success)
    {
      if (this.success.hasOwnProperty(iter407))
      {
        iter407 = this.success[iter407];
        iter407.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getRootElements_args = function(args) {
  this.name = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_getRootElements_args.prototype = {};
Hawk_getRootElements_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getRootElements_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getRootElements_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getRootElements_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ModelElement]);
    }
  }
};
Hawk_getRootElements_result.prototype = {};
Hawk_getRootElements_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size408 = 0;
        var _rtmp3412;
        this.success = [];
        var _etype411 = 0;
        _rtmp3412 = input.readListBegin();
        _etype411 = _rtmp3412.etype;
        _size408 = _rtmp3412.size;
        for (var _i413 = 0; _i413 < _size408; ++_i413)
        {
          var elem414 = null;
          elem414 = new ModelElement();
          elem414.read(input);
          this.success.push(elem414);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getRootElements_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getRootElements_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter415 in this.success)
    {
      if (this.success.hasOwnProperty(iter415))
      {
        iter415 = this.success[iter415];
        iter415.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchStateChanges_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_watchStateChanges_args.prototype = {};
Hawk_watchStateChanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchStateChanges_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchStateChanges_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchStateChanges_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Subscription(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_watchStateChanges_result.prototype = {};
Hawk_watchStateChanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Subscription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchStateChanges_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchStateChanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchModelChanges_args = function(args) {
  this.name = null;
  this.repositoryUri = null;
  this.filePath = null;
  this.clientID = null;
  this.durableEvents = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repositoryUri !== undefined && args.repositoryUri !== null) {
      this.repositoryUri = args.repositoryUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repositoryUri is unset!');
    }
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = Thrift.copyList(args.filePath, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePath is unset!');
    }
    if (args.clientID !== undefined && args.clientID !== null) {
      this.clientID = args.clientID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clientID is unset!');
    }
    if (args.durableEvents !== undefined && args.durableEvents !== null) {
      this.durableEvents = args.durableEvents;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field durableEvents is unset!');
    }
  }
};
Hawk_watchModelChanges_args.prototype = {};
Hawk_watchModelChanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size416 = 0;
        var _rtmp3420;
        this.filePath = [];
        var _etype419 = 0;
        _rtmp3420 = input.readListBegin();
        _etype419 = _rtmp3420.etype;
        _size416 = _rtmp3420.size;
        for (var _i421 = 0; _i421 < _size416; ++_i421)
        {
          var elem422 = null;
          elem422 = input.readString().value;
          this.filePath.push(elem422);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.clientID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.durableEvents = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchModelChanges_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchModelChanges_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repositoryUri !== null && this.repositoryUri !== undefined) {
    output.writeFieldBegin('repositoryUri', Thrift.Type.STRING, 2);
    output.writeString(this.repositoryUri);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.filePath.length);
    for (var iter423 in this.filePath)
    {
      if (this.filePath.hasOwnProperty(iter423))
      {
        iter423 = this.filePath[iter423];
        output.writeString(iter423);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.clientID !== null && this.clientID !== undefined) {
    output.writeFieldBegin('clientID', Thrift.Type.STRING, 4);
    output.writeString(this.clientID);
    output.writeFieldEnd();
  }
  if (this.durableEvents !== null && this.durableEvents !== undefined) {
    output.writeFieldBegin('durableEvents', Thrift.Type.I32, 5);
    output.writeI32(this.durableEvents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchModelChanges_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Subscription(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_watchModelChanges_result.prototype = {};
Hawk_watchModelChanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Subscription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchModelChanges_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchModelChanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
HawkClient.prototype = {};
HawkClient.prototype.createInstance = function(name, backend, minimumDelayMillis, maximumDelayMillis, enabledPlugins, callback) {
  this.send_createInstance(name, backend, minimumDelayMillis, maximumDelayMillis, enabledPlugins, callback); 
  if (!callback) {
  this.recv_createInstance();
  }
};

HawkClient.prototype.send_createInstance = function(name, backend, minimumDelayMillis, maximumDelayMillis, enabledPlugins, callback) {
  this.output.writeMessageBegin('createInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_createInstance_args();
  args.name = name;
  args.backend = backend;
  args.minimumDelayMillis = minimumDelayMillis;
  args.maximumDelayMillis = maximumDelayMillis;
  args.enabledPlugins = enabledPlugins;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_createInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_createInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
HawkClient.prototype.listBackends = function(callback) {
  this.send_listBackends(callback); 
  if (!callback) {
    return this.recv_listBackends();
  }
};

HawkClient.prototype.send_listBackends = function(callback) {
  this.output.writeMessageBegin('listBackends', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listBackends_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listBackends();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listBackends = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listBackends_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listBackends failed: unknown result';
};
HawkClient.prototype.listPlugins = function(callback) {
  this.send_listPlugins(callback); 
  if (!callback) {
    return this.recv_listPlugins();
  }
};

HawkClient.prototype.send_listPlugins = function(callback) {
  this.output.writeMessageBegin('listPlugins', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listPlugins_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listPlugins();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listPlugins = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listPlugins_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listPlugins failed: unknown result';
};
HawkClient.prototype.listInstances = function(callback) {
  this.send_listInstances(callback); 
  if (!callback) {
    return this.recv_listInstances();
  }
};

HawkClient.prototype.send_listInstances = function(callback) {
  this.output.writeMessageBegin('listInstances', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listInstances_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listInstances();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listInstances = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listInstances_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstances failed: unknown result';
};
HawkClient.prototype.removeInstance = function(name, callback) {
  this.send_removeInstance(name, callback); 
  if (!callback) {
  this.recv_removeInstance();
  }
};

HawkClient.prototype.send_removeInstance = function(name, callback) {
  this.output.writeMessageBegin('removeInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeInstance_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  return;
};
HawkClient.prototype.startInstance = function(name, callback) {
  this.send_startInstance(name, callback); 
  if (!callback) {
  this.recv_startInstance();
  }
};

HawkClient.prototype.send_startInstance = function(name, callback) {
  this.output.writeMessageBegin('startInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_startInstance_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_startInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_startInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_startInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  return;
};
HawkClient.prototype.stopInstance = function(name, callback) {
  this.send_stopInstance(name, callback); 
  if (!callback) {
  this.recv_stopInstance();
  }
};

HawkClient.prototype.send_stopInstance = function(name, callback) {
  this.output.writeMessageBegin('stopInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_stopInstance_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_stopInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_stopInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_stopInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.syncInstance = function(name, blockUntilDone, callback) {
  this.send_syncInstance(name, blockUntilDone, callback); 
  if (!callback) {
  this.recv_syncInstance();
  }
};

HawkClient.prototype.send_syncInstance = function(name, blockUntilDone, callback) {
  this.output.writeMessageBegin('syncInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_syncInstance_args();
  args.name = name;
  args.blockUntilDone = blockUntilDone;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_syncInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_syncInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_syncInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.registerMetamodels = function(name, metamodel, callback) {
  this.send_registerMetamodels(name, metamodel, callback); 
  if (!callback) {
  this.recv_registerMetamodels();
  }
};

HawkClient.prototype.send_registerMetamodels = function(name, metamodel, callback) {
  this.output.writeMessageBegin('registerMetamodels', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_registerMetamodels_args();
  args.name = name;
  args.metamodel = metamodel;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerMetamodels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_registerMetamodels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_registerMetamodels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.unregisterMetamodels = function(name, metamodel, callback) {
  this.send_unregisterMetamodels(name, metamodel, callback); 
  if (!callback) {
  this.recv_unregisterMetamodels();
  }
};

HawkClient.prototype.send_unregisterMetamodels = function(name, metamodel, callback) {
  this.output.writeMessageBegin('unregisterMetamodels', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_unregisterMetamodels_args();
  args.name = name;
  args.metamodel = metamodel;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unregisterMetamodels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_unregisterMetamodels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_unregisterMetamodels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listMetamodels = function(name, callback) {
  this.send_listMetamodels(name, callback); 
  if (!callback) {
    return this.recv_listMetamodels();
  }
};

HawkClient.prototype.send_listMetamodels = function(name, callback) {
  this.output.writeMessageBegin('listMetamodels', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listMetamodels_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listMetamodels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listMetamodels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listMetamodels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listMetamodels failed: unknown result';
};
HawkClient.prototype.listQueryLanguages = function(name, callback) {
  this.send_listQueryLanguages(name, callback); 
  if (!callback) {
    return this.recv_listQueryLanguages();
  }
};

HawkClient.prototype.send_listQueryLanguages = function(name, callback) {
  this.output.writeMessageBegin('listQueryLanguages', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listQueryLanguages_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listQueryLanguages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listQueryLanguages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listQueryLanguages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listQueryLanguages failed: unknown result';
};
HawkClient.prototype.query = function(name, query, language, options, callback) {
  this.send_query(name, query, language, options, callback); 
  if (!callback) {
    return this.recv_query();
  }
};

HawkClient.prototype.send_query = function(name, query, language, options, callback) {
  this.output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_query_args();
  args.name = name;
  args.query = query;
  args.language = language;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_query();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  if (null !== result.err5) {
    throw result.err5;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'query failed: unknown result';
};
HawkClient.prototype.resolveProxies = function(name, ids, options, callback) {
  this.send_resolveProxies(name, ids, options, callback); 
  if (!callback) {
    return this.recv_resolveProxies();
  }
};

HawkClient.prototype.send_resolveProxies = function(name, ids, options, callback) {
  this.output.writeMessageBegin('resolveProxies', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_resolveProxies_args();
  args.name = name;
  args.ids = ids;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_resolveProxies();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_resolveProxies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_resolveProxies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'resolveProxies failed: unknown result';
};
HawkClient.prototype.addRepository = function(name, repo, credentials, callback) {
  this.send_addRepository(name, repo, credentials, callback); 
  if (!callback) {
  this.recv_addRepository();
  }
};

HawkClient.prototype.send_addRepository = function(name, repo, credentials, callback) {
  this.output.writeMessageBegin('addRepository', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addRepository_args();
  args.name = name;
  args.repo = repo;
  args.credentials = credentials;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addRepository();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addRepository = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addRepository_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  return;
};
HawkClient.prototype.isFrozen = function(name, uri, callback) {
  this.send_isFrozen(name, uri, callback); 
  if (!callback) {
    return this.recv_isFrozen();
  }
};

HawkClient.prototype.send_isFrozen = function(name, uri, callback) {
  this.output.writeMessageBegin('isFrozen', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_isFrozen_args();
  args.name = name;
  args.uri = uri;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_isFrozen();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_isFrozen = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_isFrozen_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isFrozen failed: unknown result';
};
HawkClient.prototype.setFrozen = function(name, uri, isFrozen, callback) {
  this.send_setFrozen(name, uri, isFrozen, callback); 
  if (!callback) {
  this.recv_setFrozen();
  }
};

HawkClient.prototype.send_setFrozen = function(name, uri, isFrozen, callback) {
  this.output.writeMessageBegin('setFrozen', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_setFrozen_args();
  args.name = name;
  args.uri = uri;
  args.isFrozen = isFrozen;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setFrozen();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_setFrozen = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_setFrozen_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.removeRepository = function(name, uri, callback) {
  this.send_removeRepository(name, uri, callback); 
  if (!callback) {
  this.recv_removeRepository();
  }
};

HawkClient.prototype.send_removeRepository = function(name, uri, callback) {
  this.output.writeMessageBegin('removeRepository', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeRepository_args();
  args.name = name;
  args.uri = uri;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeRepository();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeRepository = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeRepository_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.updateRepositoryCredentials = function(name, uri, cred, callback) {
  this.send_updateRepositoryCredentials(name, uri, cred, callback); 
  if (!callback) {
  this.recv_updateRepositoryCredentials();
  }
};

HawkClient.prototype.send_updateRepositoryCredentials = function(name, uri, cred, callback) {
  this.output.writeMessageBegin('updateRepositoryCredentials', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_updateRepositoryCredentials_args();
  args.name = name;
  args.uri = uri;
  args.cred = cred;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateRepositoryCredentials();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_updateRepositoryCredentials = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_updateRepositoryCredentials_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listRepositories = function(name, callback) {
  this.send_listRepositories(name, callback); 
  if (!callback) {
    return this.recv_listRepositories();
  }
};

HawkClient.prototype.send_listRepositories = function(name, callback) {
  this.output.writeMessageBegin('listRepositories', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listRepositories_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listRepositories();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listRepositories = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listRepositories_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listRepositories failed: unknown result';
};
HawkClient.prototype.listRepositoryTypes = function(callback) {
  this.send_listRepositoryTypes(callback); 
  if (!callback) {
    return this.recv_listRepositoryTypes();
  }
};

HawkClient.prototype.send_listRepositoryTypes = function(callback) {
  this.output.writeMessageBegin('listRepositoryTypes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listRepositoryTypes_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listRepositoryTypes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listRepositoryTypes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listRepositoryTypes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listRepositoryTypes failed: unknown result';
};
HawkClient.prototype.listFiles = function(name, repository, filePatterns, callback) {
  this.send_listFiles(name, repository, filePatterns, callback); 
  if (!callback) {
    return this.recv_listFiles();
  }
};

HawkClient.prototype.send_listFiles = function(name, repository, filePatterns, callback) {
  this.output.writeMessageBegin('listFiles', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listFiles_args();
  args.name = name;
  args.repository = repository;
  args.filePatterns = filePatterns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listFiles();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listFiles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listFiles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listFiles failed: unknown result';
};
HawkClient.prototype.configurePolling = function(name, base, max, callback) {
  this.send_configurePolling(name, base, max, callback); 
  if (!callback) {
  this.recv_configurePolling();
  }
};

HawkClient.prototype.send_configurePolling = function(name, base, max, callback) {
  this.output.writeMessageBegin('configurePolling', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_configurePolling_args();
  args.name = name;
  args.base = base;
  args.max = max;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_configurePolling();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_configurePolling = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_configurePolling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.addDerivedAttribute = function(name, spec, callback) {
  this.send_addDerivedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_addDerivedAttribute();
  }
};

HawkClient.prototype.send_addDerivedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('addDerivedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addDerivedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addDerivedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addDerivedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addDerivedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.removeDerivedAttribute = function(name, spec, callback) {
  this.send_removeDerivedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_removeDerivedAttribute();
  }
};

HawkClient.prototype.send_removeDerivedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('removeDerivedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeDerivedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeDerivedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeDerivedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeDerivedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listDerivedAttributes = function(name, callback) {
  this.send_listDerivedAttributes(name, callback); 
  if (!callback) {
    return this.recv_listDerivedAttributes();
  }
};

HawkClient.prototype.send_listDerivedAttributes = function(name, callback) {
  this.output.writeMessageBegin('listDerivedAttributes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listDerivedAttributes_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listDerivedAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listDerivedAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listDerivedAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listDerivedAttributes failed: unknown result';
};
HawkClient.prototype.addIndexedAttribute = function(name, spec, callback) {
  this.send_addIndexedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_addIndexedAttribute();
  }
};

HawkClient.prototype.send_addIndexedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('addIndexedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addIndexedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addIndexedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addIndexedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addIndexedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.removeIndexedAttribute = function(name, spec, callback) {
  this.send_removeIndexedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_removeIndexedAttribute();
  }
};

HawkClient.prototype.send_removeIndexedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('removeIndexedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeIndexedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeIndexedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeIndexedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeIndexedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listIndexedAttributes = function(name, callback) {
  this.send_listIndexedAttributes(name, callback); 
  if (!callback) {
    return this.recv_listIndexedAttributes();
  }
};

HawkClient.prototype.send_listIndexedAttributes = function(name, callback) {
  this.output.writeMessageBegin('listIndexedAttributes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listIndexedAttributes_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listIndexedAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listIndexedAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listIndexedAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listIndexedAttributes failed: unknown result';
};
HawkClient.prototype.getModel = function(name, options, callback) {
  this.send_getModel(name, options, callback); 
  if (!callback) {
    return this.recv_getModel();
  }
};

HawkClient.prototype.send_getModel = function(name, options, callback) {
  this.output.writeMessageBegin('getModel', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_getModel_args();
  args.name = name;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getModel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_getModel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_getModel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getModel failed: unknown result';
};
HawkClient.prototype.getRootElements = function(name, options, callback) {
  this.send_getRootElements(name, options, callback); 
  if (!callback) {
    return this.recv_getRootElements();
  }
};

HawkClient.prototype.send_getRootElements = function(name, options, callback) {
  this.output.writeMessageBegin('getRootElements', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_getRootElements_args();
  args.name = name;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRootElements();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_getRootElements = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_getRootElements_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRootElements failed: unknown result';
};
HawkClient.prototype.watchStateChanges = function(name, callback) {
  this.send_watchStateChanges(name, callback); 
  if (!callback) {
    return this.recv_watchStateChanges();
  }
};

HawkClient.prototype.send_watchStateChanges = function(name, callback) {
  this.output.writeMessageBegin('watchStateChanges', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_watchStateChanges_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_watchStateChanges();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_watchStateChanges = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_watchStateChanges_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'watchStateChanges failed: unknown result';
};
HawkClient.prototype.watchModelChanges = function(name, repositoryUri, filePath, clientID, durableEvents, callback) {
  this.send_watchModelChanges(name, repositoryUri, filePath, clientID, durableEvents, callback); 
  if (!callback) {
    return this.recv_watchModelChanges();
  }
};

HawkClient.prototype.send_watchModelChanges = function(name, repositoryUri, filePath, clientID, durableEvents, callback) {
  this.output.writeMessageBegin('watchModelChanges', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_watchModelChanges_args();
  args.name = name;
  args.repositoryUri = repositoryUri;
  args.filePath = filePath;
  args.clientID = clientID;
  args.durableEvents = durableEvents;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_watchModelChanges();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_watchModelChanges = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_watchModelChanges_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'watchModelChanges failed: unknown result';
};
