/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package uk.ac.york.mondo.integration.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-28")
public class OfflineCollaboration {

  public interface Iface {

    public List<CollaborationResource> checkout(Credentials credentials, List<CollaborationResourceReference> resources) throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, org.apache.thrift.TException;

    public void commit(Credentials credentials, List<CollaborationResourceReference> resources) throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, CollaborationResourceLocked, org.apache.thrift.TException;

    public List<CollaborationResource> pull(Credentials credentials, List<CollaborationResourceReference> resources, OperationModel operationModel) throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, MergeRequired, org.apache.thrift.TException;

    public void publishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification) throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, org.apache.thrift.TException;

    public void unpublishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification) throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationLockQueryNotFound, org.apache.thrift.TException;

    public void lock(Credentials credentials, CollaborationQueryInvocationSpecification specification) throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationResourceLocked, org.apache.thrift.TException;

    public void unlock(Credentials credentials, CollaborationQueryInvocationSpecification specification) throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationLockQueryNotFound, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkout(Credentials credentials, List<CollaborationResourceReference> resources, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void commit(Credentials credentials, List<CollaborationResourceReference> resources, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pull(Credentials credentials, List<CollaborationResourceReference> resources, OperationModel operationModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unpublishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lock(Credentials credentials, CollaborationQueryInvocationSpecification specification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unlock(Credentials credentials, CollaborationQueryInvocationSpecification specification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<CollaborationResource> checkout(Credentials credentials, List<CollaborationResourceReference> resources) throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, org.apache.thrift.TException
    {
      send_checkout(credentials, resources);
      return recv_checkout();
    }

    public void send_checkout(Credentials credentials, List<CollaborationResourceReference> resources) throws org.apache.thrift.TException
    {
      checkout_args args = new checkout_args();
      args.setCredentials(credentials);
      args.setResources(resources);
      sendBase("checkout", args);
    }

    public List<CollaborationResource> recv_checkout() throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, org.apache.thrift.TException
    {
      checkout_result result = new checkout_result();
      receiveBase(result, "checkout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkout failed: unknown result");
    }

    public void commit(Credentials credentials, List<CollaborationResourceReference> resources) throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, CollaborationResourceLocked, org.apache.thrift.TException
    {
      send_commit(credentials, resources);
      recv_commit();
    }

    public void send_commit(Credentials credentials, List<CollaborationResourceReference> resources) throws org.apache.thrift.TException
    {
      commit_args args = new commit_args();
      args.setCredentials(credentials);
      args.setResources(resources);
      sendBase("commit", args);
    }

    public void recv_commit() throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, CollaborationResourceLocked, org.apache.thrift.TException
    {
      commit_result result = new commit_result();
      receiveBase(result, "commit");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      if (result.err4 != null) {
        throw result.err4;
      }
      return;
    }

    public List<CollaborationResource> pull(Credentials credentials, List<CollaborationResourceReference> resources, OperationModel operationModel) throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, MergeRequired, org.apache.thrift.TException
    {
      send_pull(credentials, resources, operationModel);
      return recv_pull();
    }

    public void send_pull(Credentials credentials, List<CollaborationResourceReference> resources, OperationModel operationModel) throws org.apache.thrift.TException
    {
      pull_args args = new pull_args();
      args.setCredentials(credentials);
      args.setResources(resources);
      args.setOperationModel(operationModel);
      sendBase("pull", args);
    }

    public List<CollaborationResource> recv_pull() throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, MergeRequired, org.apache.thrift.TException
    {
      pull_result result = new pull_result();
      receiveBase(result, "pull");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      if (result.err4 != null) {
        throw result.err4;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pull failed: unknown result");
    }

    public void publishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification) throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, org.apache.thrift.TException
    {
      send_publishLockDefinition(credentials, specification);
      recv_publishLockDefinition();
    }

    public void send_publishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification) throws org.apache.thrift.TException
    {
      publishLockDefinition_args args = new publishLockDefinition_args();
      args.setCredentials(credentials);
      args.setSpecification(specification);
      sendBase("publishLockDefinition", args);
    }

    public void recv_publishLockDefinition() throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, org.apache.thrift.TException
    {
      publishLockDefinition_result result = new publishLockDefinition_result();
      receiveBase(result, "publishLockDefinition");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      return;
    }

    public void unpublishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification) throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationLockQueryNotFound, org.apache.thrift.TException
    {
      send_unpublishLockDefinition(credentials, specification);
      recv_unpublishLockDefinition();
    }

    public void send_unpublishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification) throws org.apache.thrift.TException
    {
      unpublishLockDefinition_args args = new unpublishLockDefinition_args();
      args.setCredentials(credentials);
      args.setSpecification(specification);
      sendBase("unpublishLockDefinition", args);
    }

    public void recv_unpublishLockDefinition() throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationLockQueryNotFound, org.apache.thrift.TException
    {
      unpublishLockDefinition_result result = new unpublishLockDefinition_result();
      receiveBase(result, "unpublishLockDefinition");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      if (result.err4 != null) {
        throw result.err4;
      }
      return;
    }

    public void lock(Credentials credentials, CollaborationQueryInvocationSpecification specification) throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationResourceLocked, org.apache.thrift.TException
    {
      send_lock(credentials, specification);
      recv_lock();
    }

    public void send_lock(Credentials credentials, CollaborationQueryInvocationSpecification specification) throws org.apache.thrift.TException
    {
      lock_args args = new lock_args();
      args.setCredentials(credentials);
      args.setSpecification(specification);
      sendBase("lock", args);
    }

    public void recv_lock() throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationResourceLocked, org.apache.thrift.TException
    {
      lock_result result = new lock_result();
      receiveBase(result, "lock");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      if (result.err4 != null) {
        throw result.err4;
      }
      return;
    }

    public void unlock(Credentials credentials, CollaborationQueryInvocationSpecification specification) throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationLockQueryNotFound, org.apache.thrift.TException
    {
      send_unlock(credentials, specification);
      recv_unlock();
    }

    public void send_unlock(Credentials credentials, CollaborationQueryInvocationSpecification specification) throws org.apache.thrift.TException
    {
      unlock_args args = new unlock_args();
      args.setCredentials(credentials);
      args.setSpecification(specification);
      sendBase("unlock", args);
    }

    public void recv_unlock() throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationLockQueryNotFound, org.apache.thrift.TException
    {
      unlock_result result = new unlock_result();
      receiveBase(result, "unlock");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      if (result.err4 != null) {
        throw result.err4;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkout(Credentials credentials, List<CollaborationResourceReference> resources, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkout_call method_call = new checkout_call(credentials, resources, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Credentials credentials;
      private List<CollaborationResourceReference> resources;
      public checkout_call(Credentials credentials, List<CollaborationResourceReference> resources, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.credentials = credentials;
        this.resources = resources;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkout_args args = new checkout_args();
        args.setCredentials(credentials);
        args.setResources(resources);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollaborationResource> getResult() throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkout();
      }
    }

    public void commit(Credentials credentials, List<CollaborationResourceReference> resources, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commit_call method_call = new commit_call(credentials, resources, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Credentials credentials;
      private List<CollaborationResourceReference> resources;
      public commit_call(Credentials credentials, List<CollaborationResourceReference> resources, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.credentials = credentials;
        this.resources = resources;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commit_args args = new commit_args();
        args.setCredentials(credentials);
        args.setResources(resources);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, CollaborationResourceLocked, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_commit();
      }
    }

    public void pull(Credentials credentials, List<CollaborationResourceReference> resources, OperationModel operationModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pull_call method_call = new pull_call(credentials, resources, operationModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pull_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Credentials credentials;
      private List<CollaborationResourceReference> resources;
      private OperationModel operationModel;
      public pull_call(Credentials credentials, List<CollaborationResourceReference> resources, OperationModel operationModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.credentials = credentials;
        this.resources = resources;
        this.operationModel = operationModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pull", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pull_args args = new pull_args();
        args.setCredentials(credentials);
        args.setResources(resources);
        args.setOperationModel(operationModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollaborationResource> getResult() throws VCSAuthenticationFailed, VCSAuthorizationFailed, CollaborationResourceNotFound, MergeRequired, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pull();
      }
    }

    public void publishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishLockDefinition_call method_call = new publishLockDefinition_call(credentials, specification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishLockDefinition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Credentials credentials;
      private CollaborationLockQuerySpec specification;
      public publishLockDefinition_call(Credentials credentials, CollaborationLockQuerySpec specification, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.credentials = credentials;
        this.specification = specification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishLockDefinition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        publishLockDefinition_args args = new publishLockDefinition_args();
        args.setCredentials(credentials);
        args.setSpecification(specification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_publishLockDefinition();
      }
    }

    public void unpublishLockDefinition(Credentials credentials, CollaborationLockQuerySpec specification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unpublishLockDefinition_call method_call = new unpublishLockDefinition_call(credentials, specification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unpublishLockDefinition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Credentials credentials;
      private CollaborationLockQuerySpec specification;
      public unpublishLockDefinition_call(Credentials credentials, CollaborationLockQuerySpec specification, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.credentials = credentials;
        this.specification = specification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unpublishLockDefinition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unpublishLockDefinition_args args = new unpublishLockDefinition_args();
        args.setCredentials(credentials);
        args.setSpecification(specification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationLockQueryNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unpublishLockDefinition();
      }
    }

    public void lock(Credentials credentials, CollaborationQueryInvocationSpecification specification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lock_call method_call = new lock_call(credentials, specification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Credentials credentials;
      private CollaborationQueryInvocationSpecification specification;
      public lock_call(Credentials credentials, CollaborationQueryInvocationSpecification specification, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.credentials = credentials;
        this.specification = specification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lock_args args = new lock_args();
        args.setCredentials(credentials);
        args.setSpecification(specification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationResourceLocked, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_lock();
      }
    }

    public void unlock(Credentials credentials, CollaborationQueryInvocationSpecification specification, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unlock_call method_call = new unlock_call(credentials, specification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Credentials credentials;
      private CollaborationQueryInvocationSpecification specification;
      public unlock_call(Credentials credentials, CollaborationQueryInvocationSpecification specification, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.credentials = credentials;
        this.specification = specification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unlock_args args = new unlock_args();
        args.setCredentials(credentials);
        args.setSpecification(specification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VCSAuthenticationFailed, VCSAuthorizationFailed, InvalidCollaborationLockQuerySpec, CollaborationLockQueryNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unlock();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkout", new checkout());
      processMap.put("commit", new commit());
      processMap.put("pull", new pull());
      processMap.put("publishLockDefinition", new publishLockDefinition());
      processMap.put("unpublishLockDefinition", new unpublishLockDefinition());
      processMap.put("lock", new lock());
      processMap.put("unlock", new unlock());
      return processMap;
    }

    public static class checkout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkout_args> {
      public checkout() {
        super("checkout");
      }

      public checkout_args getEmptyArgsInstance() {
        return new checkout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkout_result getResult(I iface, checkout_args args) throws org.apache.thrift.TException {
        checkout_result result = new checkout_result();
        try {
          result.success = iface.checkout(args.credentials, args.resources);
        } catch (VCSAuthenticationFailed err1) {
          result.err1 = err1;
        } catch (VCSAuthorizationFailed err2) {
          result.err2 = err2;
        } catch (CollaborationResourceNotFound err3) {
          result.err3 = err3;
        }
        return result;
      }
    }

    public static class commit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commit_args> {
      public commit() {
        super("commit");
      }

      public commit_args getEmptyArgsInstance() {
        return new commit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commit_result getResult(I iface, commit_args args) throws org.apache.thrift.TException {
        commit_result result = new commit_result();
        try {
          iface.commit(args.credentials, args.resources);
        } catch (VCSAuthenticationFailed err1) {
          result.err1 = err1;
        } catch (VCSAuthorizationFailed err2) {
          result.err2 = err2;
        } catch (CollaborationResourceNotFound err3) {
          result.err3 = err3;
        } catch (CollaborationResourceLocked err4) {
          result.err4 = err4;
        }
        return result;
      }
    }

    public static class pull<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pull_args> {
      public pull() {
        super("pull");
      }

      public pull_args getEmptyArgsInstance() {
        return new pull_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pull_result getResult(I iface, pull_args args) throws org.apache.thrift.TException {
        pull_result result = new pull_result();
        try {
          result.success = iface.pull(args.credentials, args.resources, args.operationModel);
        } catch (VCSAuthenticationFailed err1) {
          result.err1 = err1;
        } catch (VCSAuthorizationFailed err2) {
          result.err2 = err2;
        } catch (CollaborationResourceNotFound err3) {
          result.err3 = err3;
        } catch (MergeRequired err4) {
          result.err4 = err4;
        }
        return result;
      }
    }

    public static class publishLockDefinition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishLockDefinition_args> {
      public publishLockDefinition() {
        super("publishLockDefinition");
      }

      public publishLockDefinition_args getEmptyArgsInstance() {
        return new publishLockDefinition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publishLockDefinition_result getResult(I iface, publishLockDefinition_args args) throws org.apache.thrift.TException {
        publishLockDefinition_result result = new publishLockDefinition_result();
        try {
          iface.publishLockDefinition(args.credentials, args.specification);
        } catch (VCSAuthenticationFailed err1) {
          result.err1 = err1;
        } catch (VCSAuthorizationFailed err2) {
          result.err2 = err2;
        } catch (InvalidCollaborationLockQuerySpec err3) {
          result.err3 = err3;
        }
        return result;
      }
    }

    public static class unpublishLockDefinition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unpublishLockDefinition_args> {
      public unpublishLockDefinition() {
        super("unpublishLockDefinition");
      }

      public unpublishLockDefinition_args getEmptyArgsInstance() {
        return new unpublishLockDefinition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unpublishLockDefinition_result getResult(I iface, unpublishLockDefinition_args args) throws org.apache.thrift.TException {
        unpublishLockDefinition_result result = new unpublishLockDefinition_result();
        try {
          iface.unpublishLockDefinition(args.credentials, args.specification);
        } catch (VCSAuthenticationFailed err1) {
          result.err1 = err1;
        } catch (VCSAuthorizationFailed err2) {
          result.err2 = err2;
        } catch (InvalidCollaborationLockQuerySpec err3) {
          result.err3 = err3;
        } catch (CollaborationLockQueryNotFound err4) {
          result.err4 = err4;
        }
        return result;
      }
    }

    public static class lock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lock_args> {
      public lock() {
        super("lock");
      }

      public lock_args getEmptyArgsInstance() {
        return new lock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lock_result getResult(I iface, lock_args args) throws org.apache.thrift.TException {
        lock_result result = new lock_result();
        try {
          iface.lock(args.credentials, args.specification);
        } catch (VCSAuthenticationFailed err1) {
          result.err1 = err1;
        } catch (VCSAuthorizationFailed err2) {
          result.err2 = err2;
        } catch (InvalidCollaborationLockQuerySpec err3) {
          result.err3 = err3;
        } catch (CollaborationResourceLocked err4) {
          result.err4 = err4;
        }
        return result;
      }
    }

    public static class unlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unlock_args> {
      public unlock() {
        super("unlock");
      }

      public unlock_args getEmptyArgsInstance() {
        return new unlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unlock_result getResult(I iface, unlock_args args) throws org.apache.thrift.TException {
        unlock_result result = new unlock_result();
        try {
          iface.unlock(args.credentials, args.specification);
        } catch (VCSAuthenticationFailed err1) {
          result.err1 = err1;
        } catch (VCSAuthorizationFailed err2) {
          result.err2 = err2;
        } catch (InvalidCollaborationLockQuerySpec err3) {
          result.err3 = err3;
        } catch (CollaborationLockQueryNotFound err4) {
          result.err4 = err4;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("checkout", new checkout());
      processMap.put("commit", new commit());
      processMap.put("pull", new pull());
      processMap.put("publishLockDefinition", new publishLockDefinition());
      processMap.put("unpublishLockDefinition", new unpublishLockDefinition());
      processMap.put("lock", new lock());
      processMap.put("unlock", new unlock());
      return processMap;
    }

    public static class checkout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkout_args, List<CollaborationResource>> {
      public checkout() {
        super("checkout");
      }

      public checkout_args getEmptyArgsInstance() {
        return new checkout_args();
      }

      public AsyncMethodCallback<List<CollaborationResource>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollaborationResource>>() { 
          public void onComplete(List<CollaborationResource> o) {
            checkout_result result = new checkout_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkout_result result = new checkout_result();
            if (e instanceof VCSAuthenticationFailed) {
                        result.err1 = (VCSAuthenticationFailed) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof VCSAuthorizationFailed) {
                        result.err2 = (VCSAuthorizationFailed) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof CollaborationResourceNotFound) {
                        result.err3 = (CollaborationResourceNotFound) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkout_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollaborationResource>> resultHandler) throws TException {
        iface.checkout(args.credentials, args.resources,resultHandler);
      }
    }

    public static class commit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commit_args, Void> {
      public commit() {
        super("commit");
      }

      public commit_args getEmptyArgsInstance() {
        return new commit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            commit_result result = new commit_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            commit_result result = new commit_result();
            if (e instanceof VCSAuthenticationFailed) {
                        result.err1 = (VCSAuthenticationFailed) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof VCSAuthorizationFailed) {
                        result.err2 = (VCSAuthorizationFailed) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof CollaborationResourceNotFound) {
                        result.err3 = (CollaborationResourceNotFound) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
            else             if (e instanceof CollaborationResourceLocked) {
                        result.err4 = (CollaborationResourceLocked) e;
                        result.setErr4IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, commit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.commit(args.credentials, args.resources,resultHandler);
      }
    }

    public static class pull<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pull_args, List<CollaborationResource>> {
      public pull() {
        super("pull");
      }

      public pull_args getEmptyArgsInstance() {
        return new pull_args();
      }

      public AsyncMethodCallback<List<CollaborationResource>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollaborationResource>>() { 
          public void onComplete(List<CollaborationResource> o) {
            pull_result result = new pull_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pull_result result = new pull_result();
            if (e instanceof VCSAuthenticationFailed) {
                        result.err1 = (VCSAuthenticationFailed) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof VCSAuthorizationFailed) {
                        result.err2 = (VCSAuthorizationFailed) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof CollaborationResourceNotFound) {
                        result.err3 = (CollaborationResourceNotFound) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
            else             if (e instanceof MergeRequired) {
                        result.err4 = (MergeRequired) e;
                        result.setErr4IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pull_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollaborationResource>> resultHandler) throws TException {
        iface.pull(args.credentials, args.resources, args.operationModel,resultHandler);
      }
    }

    public static class publishLockDefinition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publishLockDefinition_args, Void> {
      public publishLockDefinition() {
        super("publishLockDefinition");
      }

      public publishLockDefinition_args getEmptyArgsInstance() {
        return new publishLockDefinition_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            publishLockDefinition_result result = new publishLockDefinition_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            publishLockDefinition_result result = new publishLockDefinition_result();
            if (e instanceof VCSAuthenticationFailed) {
                        result.err1 = (VCSAuthenticationFailed) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof VCSAuthorizationFailed) {
                        result.err2 = (VCSAuthorizationFailed) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidCollaborationLockQuerySpec) {
                        result.err3 = (InvalidCollaborationLockQuerySpec) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, publishLockDefinition_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.publishLockDefinition(args.credentials, args.specification,resultHandler);
      }
    }

    public static class unpublishLockDefinition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unpublishLockDefinition_args, Void> {
      public unpublishLockDefinition() {
        super("unpublishLockDefinition");
      }

      public unpublishLockDefinition_args getEmptyArgsInstance() {
        return new unpublishLockDefinition_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            unpublishLockDefinition_result result = new unpublishLockDefinition_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unpublishLockDefinition_result result = new unpublishLockDefinition_result();
            if (e instanceof VCSAuthenticationFailed) {
                        result.err1 = (VCSAuthenticationFailed) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof VCSAuthorizationFailed) {
                        result.err2 = (VCSAuthorizationFailed) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidCollaborationLockQuerySpec) {
                        result.err3 = (InvalidCollaborationLockQuerySpec) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
            else             if (e instanceof CollaborationLockQueryNotFound) {
                        result.err4 = (CollaborationLockQueryNotFound) e;
                        result.setErr4IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unpublishLockDefinition_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.unpublishLockDefinition(args.credentials, args.specification,resultHandler);
      }
    }

    public static class lock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lock_args, Void> {
      public lock() {
        super("lock");
      }

      public lock_args getEmptyArgsInstance() {
        return new lock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            lock_result result = new lock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lock_result result = new lock_result();
            if (e instanceof VCSAuthenticationFailed) {
                        result.err1 = (VCSAuthenticationFailed) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof VCSAuthorizationFailed) {
                        result.err2 = (VCSAuthorizationFailed) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidCollaborationLockQuerySpec) {
                        result.err3 = (InvalidCollaborationLockQuerySpec) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
            else             if (e instanceof CollaborationResourceLocked) {
                        result.err4 = (CollaborationResourceLocked) e;
                        result.setErr4IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.lock(args.credentials, args.specification,resultHandler);
      }
    }

    public static class unlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unlock_args, Void> {
      public unlock() {
        super("unlock");
      }

      public unlock_args getEmptyArgsInstance() {
        return new unlock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            unlock_result result = new unlock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unlock_result result = new unlock_result();
            if (e instanceof VCSAuthenticationFailed) {
                        result.err1 = (VCSAuthenticationFailed) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof VCSAuthorizationFailed) {
                        result.err2 = (VCSAuthorizationFailed) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidCollaborationLockQuerySpec) {
                        result.err3 = (InvalidCollaborationLockQuerySpec) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
            else             if (e instanceof CollaborationLockQueryNotFound) {
                        result.err4 = (CollaborationLockQueryNotFound) e;
                        result.setErr4IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unlock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.unlock(args.credentials, args.specification,resultHandler);
      }
    }

  }

  public static class checkout_args implements org.apache.thrift.TBase<checkout_args, checkout_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkout_args");

    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkout_argsTupleSchemeFactory());
    }

    public Credentials credentials; // required
    public List<CollaborationResourceReference> resources; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREDENTIALS((short)1, "credentials"),
      RESOURCES((short)2, "resources");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // RESOURCES
            return RESOURCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationResourceReference.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkout_args.class, metaDataMap);
    }

    public checkout_args() {
    }

    public checkout_args(
      Credentials credentials,
      List<CollaborationResourceReference> resources)
    {
      this();
      this.credentials = credentials;
      this.resources = resources;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkout_args(checkout_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
      if (other.isSetResources()) {
        List<CollaborationResourceReference> __this__resources = new ArrayList<CollaborationResourceReference>(other.resources.size());
        for (CollaborationResourceReference other_element : other.resources) {
          __this__resources.add(new CollaborationResourceReference(other_element));
        }
        this.resources = __this__resources;
      }
    }

    public checkout_args deepCopy() {
      return new checkout_args(this);
    }

    @Override
    public void clear() {
      this.credentials = null;
      this.resources = null;
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public checkout_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public int getResourcesSize() {
      return (this.resources == null) ? 0 : this.resources.size();
    }

    public java.util.Iterator<CollaborationResourceReference> getResourcesIterator() {
      return (this.resources == null) ? null : this.resources.iterator();
    }

    public void addToResources(CollaborationResourceReference elem) {
      if (this.resources == null) {
        this.resources = new ArrayList<CollaborationResourceReference>();
      }
      this.resources.add(elem);
    }

    public List<CollaborationResourceReference> getResources() {
      return this.resources;
    }

    public checkout_args setResources(List<CollaborationResourceReference> resources) {
      this.resources = resources;
      return this;
    }

    public void unsetResources() {
      this.resources = null;
    }

    /** Returns true if field resources is set (has been assigned a value) and false otherwise */
    public boolean isSetResources() {
      return this.resources != null;
    }

    public void setResourcesIsSet(boolean value) {
      if (!value) {
        this.resources = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      case RESOURCES:
        if (value == null) {
          unsetResources();
        } else {
          setResources((List<CollaborationResourceReference>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREDENTIALS:
        return getCredentials();

      case RESOURCES:
        return getResources();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREDENTIALS:
        return isSetCredentials();
      case RESOURCES:
        return isSetResources();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkout_args)
        return this.equals((checkout_args)that);
      return false;
    }

    public boolean equals(checkout_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_resources = true && this.isSetResources();
      boolean that_present_resources = true && that.isSetResources();
      if (this_present_resources || that_present_resources) {
        if (!(this_present_resources && that_present_resources))
          return false;
        if (!this.resources.equals(that.resources))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_credentials = true && (isSetCredentials());
      list.add(present_credentials);
      if (present_credentials)
        list.add(credentials);

      boolean present_resources = true && (isSetResources());
      list.add(present_resources);
      if (present_resources)
        list.add(resources);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResources()).compareTo(other.isSetResources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, other.resources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkout_args(");
      boolean first = true;

      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (credentials == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'credentials' was not present! Struct: " + toString());
      }
      if (resources == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resources' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (credentials != null) {
        credentials.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkout_argsStandardSchemeFactory implements SchemeFactory {
      public checkout_argsStandardScheme getScheme() {
        return new checkout_argsStandardScheme();
      }
    }

    private static class checkout_argsStandardScheme extends StandardScheme<checkout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREDENTIALS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.credentials = new Credentials();
                struct.credentials.read(iprot);
                struct.setCredentialsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESOURCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list296 = iprot.readListBegin();
                  struct.resources = new ArrayList<CollaborationResourceReference>(_list296.size);
                  CollaborationResourceReference _elem297;
                  for (int _i298 = 0; _i298 < _list296.size; ++_i298)
                  {
                    _elem297 = new CollaborationResourceReference();
                    _elem297.read(iprot);
                    struct.resources.add(_elem297);
                  }
                  iprot.readListEnd();
                }
                struct.setResourcesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.credentials != null) {
          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
          struct.credentials.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.resources != null) {
          oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
            for (CollaborationResourceReference _iter299 : struct.resources)
            {
              _iter299.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkout_argsTupleSchemeFactory implements SchemeFactory {
      public checkout_argsTupleScheme getScheme() {
        return new checkout_argsTupleScheme();
      }
    }

    private static class checkout_argsTupleScheme extends TupleScheme<checkout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.credentials.write(oprot);
        {
          oprot.writeI32(struct.resources.size());
          for (CollaborationResourceReference _iter300 : struct.resources)
          {
            _iter300.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.credentials = new Credentials();
        struct.credentials.read(iprot);
        struct.setCredentialsIsSet(true);
        {
          org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resources = new ArrayList<CollaborationResourceReference>(_list301.size);
          CollaborationResourceReference _elem302;
          for (int _i303 = 0; _i303 < _list301.size; ++_i303)
          {
            _elem302 = new CollaborationResourceReference();
            _elem302.read(iprot);
            struct.resources.add(_elem302);
          }
        }
        struct.setResourcesIsSet(true);
      }
    }

  }

  public static class checkout_result implements org.apache.thrift.TBase<checkout_result, checkout_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkout_resultTupleSchemeFactory());
    }

    public List<CollaborationResource> success; // required
    public VCSAuthenticationFailed err1; // required
    public VCSAuthorizationFailed err2; // required
    public CollaborationResourceNotFound err3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationResource.class))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkout_result.class, metaDataMap);
    }

    public checkout_result() {
    }

    public checkout_result(
      List<CollaborationResource> success,
      VCSAuthenticationFailed err1,
      VCSAuthorizationFailed err2,
      CollaborationResourceNotFound err3)
    {
      this();
      this.success = success;
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkout_result(checkout_result other) {
      if (other.isSetSuccess()) {
        List<CollaborationResource> __this__success = new ArrayList<CollaborationResource>(other.success.size());
        for (CollaborationResource other_element : other.success) {
          __this__success.add(new CollaborationResource(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new VCSAuthenticationFailed(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new VCSAuthorizationFailed(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new CollaborationResourceNotFound(other.err3);
      }
    }

    public checkout_result deepCopy() {
      return new checkout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollaborationResource> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollaborationResource elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollaborationResource>();
      }
      this.success.add(elem);
    }

    public List<CollaborationResource> getSuccess() {
      return this.success;
    }

    public checkout_result setSuccess(List<CollaborationResource> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public VCSAuthenticationFailed getErr1() {
      return this.err1;
    }

    public checkout_result setErr1(VCSAuthenticationFailed err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public VCSAuthorizationFailed getErr2() {
      return this.err2;
    }

    public checkout_result setErr2(VCSAuthorizationFailed err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public CollaborationResourceNotFound getErr3() {
      return this.err3;
    }

    public checkout_result setErr3(CollaborationResourceNotFound err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollaborationResource>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((VCSAuthenticationFailed)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((VCSAuthorizationFailed)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((CollaborationResourceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkout_result)
        return this.equals((checkout_result)that);
      return false;
    }

    public boolean equals(checkout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkout_resultStandardSchemeFactory implements SchemeFactory {
      public checkout_resultStandardScheme getScheme() {
        return new checkout_resultStandardScheme();
      }
    }

    private static class checkout_resultStandardScheme extends StandardScheme<checkout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                  struct.success = new ArrayList<CollaborationResource>(_list304.size);
                  CollaborationResource _elem305;
                  for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                  {
                    _elem305 = new CollaborationResource();
                    _elem305.read(iprot);
                    struct.success.add(_elem305);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new VCSAuthenticationFailed();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new VCSAuthorizationFailed();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new CollaborationResourceNotFound();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollaborationResource _iter307 : struct.success)
            {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkout_resultTupleSchemeFactory implements SchemeFactory {
      public checkout_resultTupleScheme getScheme() {
        return new checkout_resultTupleScheme();
      }
    }

    private static class checkout_resultTupleScheme extends TupleScheme<checkout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        if (struct.isSetErr2()) {
          optionals.set(2);
        }
        if (struct.isSetErr3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollaborationResource _iter308 : struct.success)
            {
              _iter308.write(oprot);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollaborationResource>(_list309.size);
            CollaborationResource _elem310;
            for (int _i311 = 0; _i311 < _list309.size; ++_i311)
            {
              _elem310 = new CollaborationResource();
              _elem310.read(iprot);
              struct.success.add(_elem310);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new VCSAuthenticationFailed();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err2 = new VCSAuthorizationFailed();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err3 = new CollaborationResourceNotFound();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
      }
    }

  }

  public static class commit_args implements org.apache.thrift.TBase<commit_args, commit_args._Fields>, java.io.Serializable, Cloneable, Comparable<commit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commit_args");

    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commit_argsTupleSchemeFactory());
    }

    public Credentials credentials; // required
    public List<CollaborationResourceReference> resources; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREDENTIALS((short)1, "credentials"),
      RESOURCES((short)2, "resources");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // RESOURCES
            return RESOURCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationResourceReference.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commit_args.class, metaDataMap);
    }

    public commit_args() {
    }

    public commit_args(
      Credentials credentials,
      List<CollaborationResourceReference> resources)
    {
      this();
      this.credentials = credentials;
      this.resources = resources;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commit_args(commit_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
      if (other.isSetResources()) {
        List<CollaborationResourceReference> __this__resources = new ArrayList<CollaborationResourceReference>(other.resources.size());
        for (CollaborationResourceReference other_element : other.resources) {
          __this__resources.add(new CollaborationResourceReference(other_element));
        }
        this.resources = __this__resources;
      }
    }

    public commit_args deepCopy() {
      return new commit_args(this);
    }

    @Override
    public void clear() {
      this.credentials = null;
      this.resources = null;
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public commit_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public int getResourcesSize() {
      return (this.resources == null) ? 0 : this.resources.size();
    }

    public java.util.Iterator<CollaborationResourceReference> getResourcesIterator() {
      return (this.resources == null) ? null : this.resources.iterator();
    }

    public void addToResources(CollaborationResourceReference elem) {
      if (this.resources == null) {
        this.resources = new ArrayList<CollaborationResourceReference>();
      }
      this.resources.add(elem);
    }

    public List<CollaborationResourceReference> getResources() {
      return this.resources;
    }

    public commit_args setResources(List<CollaborationResourceReference> resources) {
      this.resources = resources;
      return this;
    }

    public void unsetResources() {
      this.resources = null;
    }

    /** Returns true if field resources is set (has been assigned a value) and false otherwise */
    public boolean isSetResources() {
      return this.resources != null;
    }

    public void setResourcesIsSet(boolean value) {
      if (!value) {
        this.resources = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      case RESOURCES:
        if (value == null) {
          unsetResources();
        } else {
          setResources((List<CollaborationResourceReference>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREDENTIALS:
        return getCredentials();

      case RESOURCES:
        return getResources();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREDENTIALS:
        return isSetCredentials();
      case RESOURCES:
        return isSetResources();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commit_args)
        return this.equals((commit_args)that);
      return false;
    }

    public boolean equals(commit_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_resources = true && this.isSetResources();
      boolean that_present_resources = true && that.isSetResources();
      if (this_present_resources || that_present_resources) {
        if (!(this_present_resources && that_present_resources))
          return false;
        if (!this.resources.equals(that.resources))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_credentials = true && (isSetCredentials());
      list.add(present_credentials);
      if (present_credentials)
        list.add(credentials);

      boolean present_resources = true && (isSetResources());
      list.add(present_resources);
      if (present_resources)
        list.add(resources);

      return list.hashCode();
    }

    @Override
    public int compareTo(commit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResources()).compareTo(other.isSetResources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, other.resources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commit_args(");
      boolean first = true;

      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (credentials == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'credentials' was not present! Struct: " + toString());
      }
      if (resources == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resources' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (credentials != null) {
        credentials.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commit_argsStandardSchemeFactory implements SchemeFactory {
      public commit_argsStandardScheme getScheme() {
        return new commit_argsStandardScheme();
      }
    }

    private static class commit_argsStandardScheme extends StandardScheme<commit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREDENTIALS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.credentials = new Credentials();
                struct.credentials.read(iprot);
                struct.setCredentialsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESOURCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list312 = iprot.readListBegin();
                  struct.resources = new ArrayList<CollaborationResourceReference>(_list312.size);
                  CollaborationResourceReference _elem313;
                  for (int _i314 = 0; _i314 < _list312.size; ++_i314)
                  {
                    _elem313 = new CollaborationResourceReference();
                    _elem313.read(iprot);
                    struct.resources.add(_elem313);
                  }
                  iprot.readListEnd();
                }
                struct.setResourcesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.credentials != null) {
          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
          struct.credentials.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.resources != null) {
          oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
            for (CollaborationResourceReference _iter315 : struct.resources)
            {
              _iter315.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commit_argsTupleSchemeFactory implements SchemeFactory {
      public commit_argsTupleScheme getScheme() {
        return new commit_argsTupleScheme();
      }
    }

    private static class commit_argsTupleScheme extends TupleScheme<commit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.credentials.write(oprot);
        {
          oprot.writeI32(struct.resources.size());
          for (CollaborationResourceReference _iter316 : struct.resources)
          {
            _iter316.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.credentials = new Credentials();
        struct.credentials.read(iprot);
        struct.setCredentialsIsSet(true);
        {
          org.apache.thrift.protocol.TList _list317 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resources = new ArrayList<CollaborationResourceReference>(_list317.size);
          CollaborationResourceReference _elem318;
          for (int _i319 = 0; _i319 < _list317.size; ++_i319)
          {
            _elem318 = new CollaborationResourceReference();
            _elem318.read(iprot);
            struct.resources.add(_elem318);
          }
        }
        struct.setResourcesIsSet(true);
      }
    }

  }

  public static class commit_result implements org.apache.thrift.TBase<commit_result, commit_result._Fields>, java.io.Serializable, Cloneable, Comparable<commit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commit_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ERR4_FIELD_DESC = new org.apache.thrift.protocol.TField("err4", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commit_resultTupleSchemeFactory());
    }

    public VCSAuthenticationFailed err1; // required
    public VCSAuthorizationFailed err2; // required
    public CollaborationResourceNotFound err3; // required
    public CollaborationResourceLocked err4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3"),
      ERR4((short)4, "err4");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          case 4: // ERR4
            return ERR4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR4, new org.apache.thrift.meta_data.FieldMetaData("err4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commit_result.class, metaDataMap);
    }

    public commit_result() {
    }

    public commit_result(
      VCSAuthenticationFailed err1,
      VCSAuthorizationFailed err2,
      CollaborationResourceNotFound err3,
      CollaborationResourceLocked err4)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
      this.err4 = err4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commit_result(commit_result other) {
      if (other.isSetErr1()) {
        this.err1 = new VCSAuthenticationFailed(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new VCSAuthorizationFailed(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new CollaborationResourceNotFound(other.err3);
      }
      if (other.isSetErr4()) {
        this.err4 = new CollaborationResourceLocked(other.err4);
      }
    }

    public commit_result deepCopy() {
      return new commit_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
      this.err4 = null;
    }

    public VCSAuthenticationFailed getErr1() {
      return this.err1;
    }

    public commit_result setErr1(VCSAuthenticationFailed err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public VCSAuthorizationFailed getErr2() {
      return this.err2;
    }

    public commit_result setErr2(VCSAuthorizationFailed err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public CollaborationResourceNotFound getErr3() {
      return this.err3;
    }

    public commit_result setErr3(CollaborationResourceNotFound err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public CollaborationResourceLocked getErr4() {
      return this.err4;
    }

    public commit_result setErr4(CollaborationResourceLocked err4) {
      this.err4 = err4;
      return this;
    }

    public void unsetErr4() {
      this.err4 = null;
    }

    /** Returns true if field err4 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr4() {
      return this.err4 != null;
    }

    public void setErr4IsSet(boolean value) {
      if (!value) {
        this.err4 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((VCSAuthenticationFailed)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((VCSAuthorizationFailed)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((CollaborationResourceNotFound)value);
        }
        break;

      case ERR4:
        if (value == null) {
          unsetErr4();
        } else {
          setErr4((CollaborationResourceLocked)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      case ERR4:
        return getErr4();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      case ERR4:
        return isSetErr4();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commit_result)
        return this.equals((commit_result)that);
      return false;
    }

    public boolean equals(commit_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      boolean this_present_err4 = true && this.isSetErr4();
      boolean that_present_err4 = true && that.isSetErr4();
      if (this_present_err4 || that_present_err4) {
        if (!(this_present_err4 && that_present_err4))
          return false;
        if (!this.err4.equals(that.err4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      boolean present_err4 = true && (isSetErr4());
      list.add(present_err4);
      if (present_err4)
        list.add(err4);

      return list.hashCode();
    }

    @Override
    public int compareTo(commit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr4()).compareTo(other.isSetErr4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err4, other.err4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commit_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err4:");
      if (this.err4 == null) {
        sb.append("null");
      } else {
        sb.append(this.err4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commit_resultStandardSchemeFactory implements SchemeFactory {
      public commit_resultStandardScheme getScheme() {
        return new commit_resultStandardScheme();
      }
    }

    private static class commit_resultStandardScheme extends StandardScheme<commit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new VCSAuthenticationFailed();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new VCSAuthorizationFailed();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new CollaborationResourceNotFound();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERR4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err4 = new CollaborationResourceLocked();
                struct.err4.read(iprot);
                struct.setErr4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err4 != null) {
          oprot.writeFieldBegin(ERR4_FIELD_DESC);
          struct.err4.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commit_resultTupleSchemeFactory implements SchemeFactory {
      public commit_resultTupleScheme getScheme() {
        return new commit_resultTupleScheme();
      }
    }

    private static class commit_resultTupleScheme extends TupleScheme<commit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        if (struct.isSetErr3()) {
          optionals.set(2);
        }
        if (struct.isSetErr4()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
        if (struct.isSetErr4()) {
          struct.err4.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.err1 = new VCSAuthenticationFailed();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new VCSAuthorizationFailed();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err3 = new CollaborationResourceNotFound();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err4 = new CollaborationResourceLocked();
          struct.err4.read(iprot);
          struct.setErr4IsSet(true);
        }
      }
    }

  }

  public static class pull_args implements org.apache.thrift.TBase<pull_args, pull_args._Fields>, java.io.Serializable, Cloneable, Comparable<pull_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pull_args");

    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField OPERATION_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("operationModel", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pull_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pull_argsTupleSchemeFactory());
    }

    public Credentials credentials; // required
    public List<CollaborationResourceReference> resources; // required
    public OperationModel operationModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREDENTIALS((short)1, "credentials"),
      RESOURCES((short)2, "resources"),
      OPERATION_MODEL((short)3, "operationModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // RESOURCES
            return RESOURCES;
          case 3: // OPERATION_MODEL
            return OPERATION_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationResourceReference.class))));
      tmpMap.put(_Fields.OPERATION_MODEL, new org.apache.thrift.meta_data.FieldMetaData("operationModel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OperationModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pull_args.class, metaDataMap);
    }

    public pull_args() {
    }

    public pull_args(
      Credentials credentials,
      List<CollaborationResourceReference> resources,
      OperationModel operationModel)
    {
      this();
      this.credentials = credentials;
      this.resources = resources;
      this.operationModel = operationModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pull_args(pull_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
      if (other.isSetResources()) {
        List<CollaborationResourceReference> __this__resources = new ArrayList<CollaborationResourceReference>(other.resources.size());
        for (CollaborationResourceReference other_element : other.resources) {
          __this__resources.add(new CollaborationResourceReference(other_element));
        }
        this.resources = __this__resources;
      }
      if (other.isSetOperationModel()) {
        this.operationModel = new OperationModel(other.operationModel);
      }
    }

    public pull_args deepCopy() {
      return new pull_args(this);
    }

    @Override
    public void clear() {
      this.credentials = null;
      this.resources = null;
      this.operationModel = null;
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public pull_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public int getResourcesSize() {
      return (this.resources == null) ? 0 : this.resources.size();
    }

    public java.util.Iterator<CollaborationResourceReference> getResourcesIterator() {
      return (this.resources == null) ? null : this.resources.iterator();
    }

    public void addToResources(CollaborationResourceReference elem) {
      if (this.resources == null) {
        this.resources = new ArrayList<CollaborationResourceReference>();
      }
      this.resources.add(elem);
    }

    public List<CollaborationResourceReference> getResources() {
      return this.resources;
    }

    public pull_args setResources(List<CollaborationResourceReference> resources) {
      this.resources = resources;
      return this;
    }

    public void unsetResources() {
      this.resources = null;
    }

    /** Returns true if field resources is set (has been assigned a value) and false otherwise */
    public boolean isSetResources() {
      return this.resources != null;
    }

    public void setResourcesIsSet(boolean value) {
      if (!value) {
        this.resources = null;
      }
    }

    public OperationModel getOperationModel() {
      return this.operationModel;
    }

    public pull_args setOperationModel(OperationModel operationModel) {
      this.operationModel = operationModel;
      return this;
    }

    public void unsetOperationModel() {
      this.operationModel = null;
    }

    /** Returns true if field operationModel is set (has been assigned a value) and false otherwise */
    public boolean isSetOperationModel() {
      return this.operationModel != null;
    }

    public void setOperationModelIsSet(boolean value) {
      if (!value) {
        this.operationModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      case RESOURCES:
        if (value == null) {
          unsetResources();
        } else {
          setResources((List<CollaborationResourceReference>)value);
        }
        break;

      case OPERATION_MODEL:
        if (value == null) {
          unsetOperationModel();
        } else {
          setOperationModel((OperationModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREDENTIALS:
        return getCredentials();

      case RESOURCES:
        return getResources();

      case OPERATION_MODEL:
        return getOperationModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREDENTIALS:
        return isSetCredentials();
      case RESOURCES:
        return isSetResources();
      case OPERATION_MODEL:
        return isSetOperationModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pull_args)
        return this.equals((pull_args)that);
      return false;
    }

    public boolean equals(pull_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_resources = true && this.isSetResources();
      boolean that_present_resources = true && that.isSetResources();
      if (this_present_resources || that_present_resources) {
        if (!(this_present_resources && that_present_resources))
          return false;
        if (!this.resources.equals(that.resources))
          return false;
      }

      boolean this_present_operationModel = true && this.isSetOperationModel();
      boolean that_present_operationModel = true && that.isSetOperationModel();
      if (this_present_operationModel || that_present_operationModel) {
        if (!(this_present_operationModel && that_present_operationModel))
          return false;
        if (!this.operationModel.equals(that.operationModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_credentials = true && (isSetCredentials());
      list.add(present_credentials);
      if (present_credentials)
        list.add(credentials);

      boolean present_resources = true && (isSetResources());
      list.add(present_resources);
      if (present_resources)
        list.add(resources);

      boolean present_operationModel = true && (isSetOperationModel());
      list.add(present_operationModel);
      if (present_operationModel)
        list.add(operationModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(pull_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResources()).compareTo(other.isSetResources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, other.resources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperationModel()).compareTo(other.isSetOperationModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperationModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationModel, other.operationModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pull_args(");
      boolean first = true;

      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operationModel:");
      if (this.operationModel == null) {
        sb.append("null");
      } else {
        sb.append(this.operationModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (credentials == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'credentials' was not present! Struct: " + toString());
      }
      if (resources == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resources' was not present! Struct: " + toString());
      }
      if (operationModel == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operationModel' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (credentials != null) {
        credentials.validate();
      }
      if (operationModel != null) {
        operationModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pull_argsStandardSchemeFactory implements SchemeFactory {
      public pull_argsStandardScheme getScheme() {
        return new pull_argsStandardScheme();
      }
    }

    private static class pull_argsStandardScheme extends StandardScheme<pull_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pull_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREDENTIALS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.credentials = new Credentials();
                struct.credentials.read(iprot);
                struct.setCredentialsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESOURCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                  struct.resources = new ArrayList<CollaborationResourceReference>(_list320.size);
                  CollaborationResourceReference _elem321;
                  for (int _i322 = 0; _i322 < _list320.size; ++_i322)
                  {
                    _elem321 = new CollaborationResourceReference();
                    _elem321.read(iprot);
                    struct.resources.add(_elem321);
                  }
                  iprot.readListEnd();
                }
                struct.setResourcesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPERATION_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operationModel = new OperationModel();
                struct.operationModel.read(iprot);
                struct.setOperationModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pull_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.credentials != null) {
          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
          struct.credentials.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.resources != null) {
          oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
            for (CollaborationResourceReference _iter323 : struct.resources)
            {
              _iter323.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.operationModel != null) {
          oprot.writeFieldBegin(OPERATION_MODEL_FIELD_DESC);
          struct.operationModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pull_argsTupleSchemeFactory implements SchemeFactory {
      public pull_argsTupleScheme getScheme() {
        return new pull_argsTupleScheme();
      }
    }

    private static class pull_argsTupleScheme extends TupleScheme<pull_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pull_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.credentials.write(oprot);
        {
          oprot.writeI32(struct.resources.size());
          for (CollaborationResourceReference _iter324 : struct.resources)
          {
            _iter324.write(oprot);
          }
        }
        struct.operationModel.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pull_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.credentials = new Credentials();
        struct.credentials.read(iprot);
        struct.setCredentialsIsSet(true);
        {
          org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resources = new ArrayList<CollaborationResourceReference>(_list325.size);
          CollaborationResourceReference _elem326;
          for (int _i327 = 0; _i327 < _list325.size; ++_i327)
          {
            _elem326 = new CollaborationResourceReference();
            _elem326.read(iprot);
            struct.resources.add(_elem326);
          }
        }
        struct.setResourcesIsSet(true);
        struct.operationModel = new OperationModel();
        struct.operationModel.read(iprot);
        struct.setOperationModelIsSet(true);
      }
    }

  }

  public static class pull_result implements org.apache.thrift.TBase<pull_result, pull_result._Fields>, java.io.Serializable, Cloneable, Comparable<pull_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pull_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ERR4_FIELD_DESC = new org.apache.thrift.protocol.TField("err4", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pull_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pull_resultTupleSchemeFactory());
    }

    public List<CollaborationResource> success; // required
    public VCSAuthenticationFailed err1; // required
    public VCSAuthorizationFailed err2; // required
    public CollaborationResourceNotFound err3; // required
    public MergeRequired err4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3"),
      ERR4((short)4, "err4");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          case 4: // ERR4
            return ERR4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationResource.class))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR4, new org.apache.thrift.meta_data.FieldMetaData("err4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pull_result.class, metaDataMap);
    }

    public pull_result() {
    }

    public pull_result(
      List<CollaborationResource> success,
      VCSAuthenticationFailed err1,
      VCSAuthorizationFailed err2,
      CollaborationResourceNotFound err3,
      MergeRequired err4)
    {
      this();
      this.success = success;
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
      this.err4 = err4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pull_result(pull_result other) {
      if (other.isSetSuccess()) {
        List<CollaborationResource> __this__success = new ArrayList<CollaborationResource>(other.success.size());
        for (CollaborationResource other_element : other.success) {
          __this__success.add(new CollaborationResource(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new VCSAuthenticationFailed(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new VCSAuthorizationFailed(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new CollaborationResourceNotFound(other.err3);
      }
      if (other.isSetErr4()) {
        this.err4 = new MergeRequired(other.err4);
      }
    }

    public pull_result deepCopy() {
      return new pull_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
      this.err4 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollaborationResource> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollaborationResource elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollaborationResource>();
      }
      this.success.add(elem);
    }

    public List<CollaborationResource> getSuccess() {
      return this.success;
    }

    public pull_result setSuccess(List<CollaborationResource> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public VCSAuthenticationFailed getErr1() {
      return this.err1;
    }

    public pull_result setErr1(VCSAuthenticationFailed err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public VCSAuthorizationFailed getErr2() {
      return this.err2;
    }

    public pull_result setErr2(VCSAuthorizationFailed err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public CollaborationResourceNotFound getErr3() {
      return this.err3;
    }

    public pull_result setErr3(CollaborationResourceNotFound err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public MergeRequired getErr4() {
      return this.err4;
    }

    public pull_result setErr4(MergeRequired err4) {
      this.err4 = err4;
      return this;
    }

    public void unsetErr4() {
      this.err4 = null;
    }

    /** Returns true if field err4 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr4() {
      return this.err4 != null;
    }

    public void setErr4IsSet(boolean value) {
      if (!value) {
        this.err4 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollaborationResource>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((VCSAuthenticationFailed)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((VCSAuthorizationFailed)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((CollaborationResourceNotFound)value);
        }
        break;

      case ERR4:
        if (value == null) {
          unsetErr4();
        } else {
          setErr4((MergeRequired)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      case ERR4:
        return getErr4();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      case ERR4:
        return isSetErr4();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pull_result)
        return this.equals((pull_result)that);
      return false;
    }

    public boolean equals(pull_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      boolean this_present_err4 = true && this.isSetErr4();
      boolean that_present_err4 = true && that.isSetErr4();
      if (this_present_err4 || that_present_err4) {
        if (!(this_present_err4 && that_present_err4))
          return false;
        if (!this.err4.equals(that.err4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      boolean present_err4 = true && (isSetErr4());
      list.add(present_err4);
      if (present_err4)
        list.add(err4);

      return list.hashCode();
    }

    @Override
    public int compareTo(pull_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr4()).compareTo(other.isSetErr4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err4, other.err4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pull_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err4:");
      if (this.err4 == null) {
        sb.append("null");
      } else {
        sb.append(this.err4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pull_resultStandardSchemeFactory implements SchemeFactory {
      public pull_resultStandardScheme getScheme() {
        return new pull_resultStandardScheme();
      }
    }

    private static class pull_resultStandardScheme extends StandardScheme<pull_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pull_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                  struct.success = new ArrayList<CollaborationResource>(_list328.size);
                  CollaborationResource _elem329;
                  for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                  {
                    _elem329 = new CollaborationResource();
                    _elem329.read(iprot);
                    struct.success.add(_elem329);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new VCSAuthenticationFailed();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new VCSAuthorizationFailed();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new CollaborationResourceNotFound();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERR4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err4 = new MergeRequired();
                struct.err4.read(iprot);
                struct.setErr4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pull_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollaborationResource _iter331 : struct.success)
            {
              _iter331.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err4 != null) {
          oprot.writeFieldBegin(ERR4_FIELD_DESC);
          struct.err4.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pull_resultTupleSchemeFactory implements SchemeFactory {
      public pull_resultTupleScheme getScheme() {
        return new pull_resultTupleScheme();
      }
    }

    private static class pull_resultTupleScheme extends TupleScheme<pull_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pull_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        if (struct.isSetErr2()) {
          optionals.set(2);
        }
        if (struct.isSetErr3()) {
          optionals.set(3);
        }
        if (struct.isSetErr4()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollaborationResource _iter332 : struct.success)
            {
              _iter332.write(oprot);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
        if (struct.isSetErr4()) {
          struct.err4.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pull_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list333 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollaborationResource>(_list333.size);
            CollaborationResource _elem334;
            for (int _i335 = 0; _i335 < _list333.size; ++_i335)
            {
              _elem334 = new CollaborationResource();
              _elem334.read(iprot);
              struct.success.add(_elem334);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new VCSAuthenticationFailed();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err2 = new VCSAuthorizationFailed();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err3 = new CollaborationResourceNotFound();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
        if (incoming.get(4)) {
          struct.err4 = new MergeRequired();
          struct.err4.read(iprot);
          struct.setErr4IsSet(true);
        }
      }
    }

  }

  public static class publishLockDefinition_args implements org.apache.thrift.TBase<publishLockDefinition_args, publishLockDefinition_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishLockDefinition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishLockDefinition_args");

    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("specification", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishLockDefinition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishLockDefinition_argsTupleSchemeFactory());
    }

    public Credentials credentials; // required
    public CollaborationLockQuerySpec specification; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREDENTIALS((short)1, "credentials"),
      SPECIFICATION((short)2, "specification");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // SPECIFICATION
            return SPECIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      tmpMap.put(_Fields.SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("specification", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationLockQuerySpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishLockDefinition_args.class, metaDataMap);
    }

    public publishLockDefinition_args() {
    }

    public publishLockDefinition_args(
      Credentials credentials,
      CollaborationLockQuerySpec specification)
    {
      this();
      this.credentials = credentials;
      this.specification = specification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishLockDefinition_args(publishLockDefinition_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
      if (other.isSetSpecification()) {
        this.specification = new CollaborationLockQuerySpec(other.specification);
      }
    }

    public publishLockDefinition_args deepCopy() {
      return new publishLockDefinition_args(this);
    }

    @Override
    public void clear() {
      this.credentials = null;
      this.specification = null;
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public publishLockDefinition_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public CollaborationLockQuerySpec getSpecification() {
      return this.specification;
    }

    public publishLockDefinition_args setSpecification(CollaborationLockQuerySpec specification) {
      this.specification = specification;
      return this;
    }

    public void unsetSpecification() {
      this.specification = null;
    }

    /** Returns true if field specification is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecification() {
      return this.specification != null;
    }

    public void setSpecificationIsSet(boolean value) {
      if (!value) {
        this.specification = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      case SPECIFICATION:
        if (value == null) {
          unsetSpecification();
        } else {
          setSpecification((CollaborationLockQuerySpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREDENTIALS:
        return getCredentials();

      case SPECIFICATION:
        return getSpecification();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREDENTIALS:
        return isSetCredentials();
      case SPECIFICATION:
        return isSetSpecification();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishLockDefinition_args)
        return this.equals((publishLockDefinition_args)that);
      return false;
    }

    public boolean equals(publishLockDefinition_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_specification = true && this.isSetSpecification();
      boolean that_present_specification = true && that.isSetSpecification();
      if (this_present_specification || that_present_specification) {
        if (!(this_present_specification && that_present_specification))
          return false;
        if (!this.specification.equals(that.specification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_credentials = true && (isSetCredentials());
      list.add(present_credentials);
      if (present_credentials)
        list.add(credentials);

      boolean present_specification = true && (isSetSpecification());
      list.add(present_specification);
      if (present_specification)
        list.add(specification);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishLockDefinition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpecification()).compareTo(other.isSetSpecification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specification, other.specification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishLockDefinition_args(");
      boolean first = true;

      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specification:");
      if (this.specification == null) {
        sb.append("null");
      } else {
        sb.append(this.specification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (credentials == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'credentials' was not present! Struct: " + toString());
      }
      if (specification == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specification' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (credentials != null) {
        credentials.validate();
      }
      if (specification != null) {
        specification.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishLockDefinition_argsStandardSchemeFactory implements SchemeFactory {
      public publishLockDefinition_argsStandardScheme getScheme() {
        return new publishLockDefinition_argsStandardScheme();
      }
    }

    private static class publishLockDefinition_argsStandardScheme extends StandardScheme<publishLockDefinition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishLockDefinition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREDENTIALS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.credentials = new Credentials();
                struct.credentials.read(iprot);
                struct.setCredentialsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.specification = new CollaborationLockQuerySpec();
                struct.specification.read(iprot);
                struct.setSpecificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishLockDefinition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.credentials != null) {
          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
          struct.credentials.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specification != null) {
          oprot.writeFieldBegin(SPECIFICATION_FIELD_DESC);
          struct.specification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishLockDefinition_argsTupleSchemeFactory implements SchemeFactory {
      public publishLockDefinition_argsTupleScheme getScheme() {
        return new publishLockDefinition_argsTupleScheme();
      }
    }

    private static class publishLockDefinition_argsTupleScheme extends TupleScheme<publishLockDefinition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishLockDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.credentials.write(oprot);
        struct.specification.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishLockDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.credentials = new Credentials();
        struct.credentials.read(iprot);
        struct.setCredentialsIsSet(true);
        struct.specification = new CollaborationLockQuerySpec();
        struct.specification.read(iprot);
        struct.setSpecificationIsSet(true);
      }
    }

  }

  public static class publishLockDefinition_result implements org.apache.thrift.TBase<publishLockDefinition_result, publishLockDefinition_result._Fields>, java.io.Serializable, Cloneable, Comparable<publishLockDefinition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishLockDefinition_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishLockDefinition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishLockDefinition_resultTupleSchemeFactory());
    }

    public VCSAuthenticationFailed err1; // required
    public VCSAuthorizationFailed err2; // required
    public InvalidCollaborationLockQuerySpec err3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishLockDefinition_result.class, metaDataMap);
    }

    public publishLockDefinition_result() {
    }

    public publishLockDefinition_result(
      VCSAuthenticationFailed err1,
      VCSAuthorizationFailed err2,
      InvalidCollaborationLockQuerySpec err3)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishLockDefinition_result(publishLockDefinition_result other) {
      if (other.isSetErr1()) {
        this.err1 = new VCSAuthenticationFailed(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new VCSAuthorizationFailed(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new InvalidCollaborationLockQuerySpec(other.err3);
      }
    }

    public publishLockDefinition_result deepCopy() {
      return new publishLockDefinition_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
    }

    public VCSAuthenticationFailed getErr1() {
      return this.err1;
    }

    public publishLockDefinition_result setErr1(VCSAuthenticationFailed err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public VCSAuthorizationFailed getErr2() {
      return this.err2;
    }

    public publishLockDefinition_result setErr2(VCSAuthorizationFailed err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public InvalidCollaborationLockQuerySpec getErr3() {
      return this.err3;
    }

    public publishLockDefinition_result setErr3(InvalidCollaborationLockQuerySpec err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((VCSAuthenticationFailed)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((VCSAuthorizationFailed)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((InvalidCollaborationLockQuerySpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishLockDefinition_result)
        return this.equals((publishLockDefinition_result)that);
      return false;
    }

    public boolean equals(publishLockDefinition_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishLockDefinition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishLockDefinition_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishLockDefinition_resultStandardSchemeFactory implements SchemeFactory {
      public publishLockDefinition_resultStandardScheme getScheme() {
        return new publishLockDefinition_resultStandardScheme();
      }
    }

    private static class publishLockDefinition_resultStandardScheme extends StandardScheme<publishLockDefinition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishLockDefinition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new VCSAuthenticationFailed();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new VCSAuthorizationFailed();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new InvalidCollaborationLockQuerySpec();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishLockDefinition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishLockDefinition_resultTupleSchemeFactory implements SchemeFactory {
      public publishLockDefinition_resultTupleScheme getScheme() {
        return new publishLockDefinition_resultTupleScheme();
      }
    }

    private static class publishLockDefinition_resultTupleScheme extends TupleScheme<publishLockDefinition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishLockDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        if (struct.isSetErr3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishLockDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.err1 = new VCSAuthenticationFailed();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new VCSAuthorizationFailed();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err3 = new InvalidCollaborationLockQuerySpec();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
      }
    }

  }

  public static class unpublishLockDefinition_args implements org.apache.thrift.TBase<unpublishLockDefinition_args, unpublishLockDefinition_args._Fields>, java.io.Serializable, Cloneable, Comparable<unpublishLockDefinition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpublishLockDefinition_args");

    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("specification", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpublishLockDefinition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpublishLockDefinition_argsTupleSchemeFactory());
    }

    public Credentials credentials; // required
    public CollaborationLockQuerySpec specification; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREDENTIALS((short)1, "credentials"),
      SPECIFICATION((short)2, "specification");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // SPECIFICATION
            return SPECIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      tmpMap.put(_Fields.SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("specification", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationLockQuerySpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpublishLockDefinition_args.class, metaDataMap);
    }

    public unpublishLockDefinition_args() {
    }

    public unpublishLockDefinition_args(
      Credentials credentials,
      CollaborationLockQuerySpec specification)
    {
      this();
      this.credentials = credentials;
      this.specification = specification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpublishLockDefinition_args(unpublishLockDefinition_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
      if (other.isSetSpecification()) {
        this.specification = new CollaborationLockQuerySpec(other.specification);
      }
    }

    public unpublishLockDefinition_args deepCopy() {
      return new unpublishLockDefinition_args(this);
    }

    @Override
    public void clear() {
      this.credentials = null;
      this.specification = null;
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public unpublishLockDefinition_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public CollaborationLockQuerySpec getSpecification() {
      return this.specification;
    }

    public unpublishLockDefinition_args setSpecification(CollaborationLockQuerySpec specification) {
      this.specification = specification;
      return this;
    }

    public void unsetSpecification() {
      this.specification = null;
    }

    /** Returns true if field specification is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecification() {
      return this.specification != null;
    }

    public void setSpecificationIsSet(boolean value) {
      if (!value) {
        this.specification = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      case SPECIFICATION:
        if (value == null) {
          unsetSpecification();
        } else {
          setSpecification((CollaborationLockQuerySpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREDENTIALS:
        return getCredentials();

      case SPECIFICATION:
        return getSpecification();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREDENTIALS:
        return isSetCredentials();
      case SPECIFICATION:
        return isSetSpecification();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpublishLockDefinition_args)
        return this.equals((unpublishLockDefinition_args)that);
      return false;
    }

    public boolean equals(unpublishLockDefinition_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_specification = true && this.isSetSpecification();
      boolean that_present_specification = true && that.isSetSpecification();
      if (this_present_specification || that_present_specification) {
        if (!(this_present_specification && that_present_specification))
          return false;
        if (!this.specification.equals(that.specification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_credentials = true && (isSetCredentials());
      list.add(present_credentials);
      if (present_credentials)
        list.add(credentials);

      boolean present_specification = true && (isSetSpecification());
      list.add(present_specification);
      if (present_specification)
        list.add(specification);

      return list.hashCode();
    }

    @Override
    public int compareTo(unpublishLockDefinition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpecification()).compareTo(other.isSetSpecification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specification, other.specification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpublishLockDefinition_args(");
      boolean first = true;

      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specification:");
      if (this.specification == null) {
        sb.append("null");
      } else {
        sb.append(this.specification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (credentials == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'credentials' was not present! Struct: " + toString());
      }
      if (specification == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specification' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (credentials != null) {
        credentials.validate();
      }
      if (specification != null) {
        specification.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpublishLockDefinition_argsStandardSchemeFactory implements SchemeFactory {
      public unpublishLockDefinition_argsStandardScheme getScheme() {
        return new unpublishLockDefinition_argsStandardScheme();
      }
    }

    private static class unpublishLockDefinition_argsStandardScheme extends StandardScheme<unpublishLockDefinition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpublishLockDefinition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREDENTIALS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.credentials = new Credentials();
                struct.credentials.read(iprot);
                struct.setCredentialsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.specification = new CollaborationLockQuerySpec();
                struct.specification.read(iprot);
                struct.setSpecificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpublishLockDefinition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.credentials != null) {
          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
          struct.credentials.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specification != null) {
          oprot.writeFieldBegin(SPECIFICATION_FIELD_DESC);
          struct.specification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpublishLockDefinition_argsTupleSchemeFactory implements SchemeFactory {
      public unpublishLockDefinition_argsTupleScheme getScheme() {
        return new unpublishLockDefinition_argsTupleScheme();
      }
    }

    private static class unpublishLockDefinition_argsTupleScheme extends TupleScheme<unpublishLockDefinition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpublishLockDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.credentials.write(oprot);
        struct.specification.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpublishLockDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.credentials = new Credentials();
        struct.credentials.read(iprot);
        struct.setCredentialsIsSet(true);
        struct.specification = new CollaborationLockQuerySpec();
        struct.specification.read(iprot);
        struct.setSpecificationIsSet(true);
      }
    }

  }

  public static class unpublishLockDefinition_result implements org.apache.thrift.TBase<unpublishLockDefinition_result, unpublishLockDefinition_result._Fields>, java.io.Serializable, Cloneable, Comparable<unpublishLockDefinition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpublishLockDefinition_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ERR4_FIELD_DESC = new org.apache.thrift.protocol.TField("err4", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unpublishLockDefinition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unpublishLockDefinition_resultTupleSchemeFactory());
    }

    public VCSAuthenticationFailed err1; // required
    public VCSAuthorizationFailed err2; // required
    public InvalidCollaborationLockQuerySpec err3; // required
    public CollaborationLockQueryNotFound err4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3"),
      ERR4((short)4, "err4");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          case 4: // ERR4
            return ERR4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR4, new org.apache.thrift.meta_data.FieldMetaData("err4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpublishLockDefinition_result.class, metaDataMap);
    }

    public unpublishLockDefinition_result() {
    }

    public unpublishLockDefinition_result(
      VCSAuthenticationFailed err1,
      VCSAuthorizationFailed err2,
      InvalidCollaborationLockQuerySpec err3,
      CollaborationLockQueryNotFound err4)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
      this.err4 = err4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unpublishLockDefinition_result(unpublishLockDefinition_result other) {
      if (other.isSetErr1()) {
        this.err1 = new VCSAuthenticationFailed(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new VCSAuthorizationFailed(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new InvalidCollaborationLockQuerySpec(other.err3);
      }
      if (other.isSetErr4()) {
        this.err4 = new CollaborationLockQueryNotFound(other.err4);
      }
    }

    public unpublishLockDefinition_result deepCopy() {
      return new unpublishLockDefinition_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
      this.err4 = null;
    }

    public VCSAuthenticationFailed getErr1() {
      return this.err1;
    }

    public unpublishLockDefinition_result setErr1(VCSAuthenticationFailed err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public VCSAuthorizationFailed getErr2() {
      return this.err2;
    }

    public unpublishLockDefinition_result setErr2(VCSAuthorizationFailed err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public InvalidCollaborationLockQuerySpec getErr3() {
      return this.err3;
    }

    public unpublishLockDefinition_result setErr3(InvalidCollaborationLockQuerySpec err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public CollaborationLockQueryNotFound getErr4() {
      return this.err4;
    }

    public unpublishLockDefinition_result setErr4(CollaborationLockQueryNotFound err4) {
      this.err4 = err4;
      return this;
    }

    public void unsetErr4() {
      this.err4 = null;
    }

    /** Returns true if field err4 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr4() {
      return this.err4 != null;
    }

    public void setErr4IsSet(boolean value) {
      if (!value) {
        this.err4 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((VCSAuthenticationFailed)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((VCSAuthorizationFailed)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((InvalidCollaborationLockQuerySpec)value);
        }
        break;

      case ERR4:
        if (value == null) {
          unsetErr4();
        } else {
          setErr4((CollaborationLockQueryNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      case ERR4:
        return getErr4();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      case ERR4:
        return isSetErr4();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unpublishLockDefinition_result)
        return this.equals((unpublishLockDefinition_result)that);
      return false;
    }

    public boolean equals(unpublishLockDefinition_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      boolean this_present_err4 = true && this.isSetErr4();
      boolean that_present_err4 = true && that.isSetErr4();
      if (this_present_err4 || that_present_err4) {
        if (!(this_present_err4 && that_present_err4))
          return false;
        if (!this.err4.equals(that.err4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      boolean present_err4 = true && (isSetErr4());
      list.add(present_err4);
      if (present_err4)
        list.add(err4);

      return list.hashCode();
    }

    @Override
    public int compareTo(unpublishLockDefinition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr4()).compareTo(other.isSetErr4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err4, other.err4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unpublishLockDefinition_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err4:");
      if (this.err4 == null) {
        sb.append("null");
      } else {
        sb.append(this.err4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unpublishLockDefinition_resultStandardSchemeFactory implements SchemeFactory {
      public unpublishLockDefinition_resultStandardScheme getScheme() {
        return new unpublishLockDefinition_resultStandardScheme();
      }
    }

    private static class unpublishLockDefinition_resultStandardScheme extends StandardScheme<unpublishLockDefinition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unpublishLockDefinition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new VCSAuthenticationFailed();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new VCSAuthorizationFailed();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new InvalidCollaborationLockQuerySpec();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERR4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err4 = new CollaborationLockQueryNotFound();
                struct.err4.read(iprot);
                struct.setErr4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unpublishLockDefinition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err4 != null) {
          oprot.writeFieldBegin(ERR4_FIELD_DESC);
          struct.err4.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unpublishLockDefinition_resultTupleSchemeFactory implements SchemeFactory {
      public unpublishLockDefinition_resultTupleScheme getScheme() {
        return new unpublishLockDefinition_resultTupleScheme();
      }
    }

    private static class unpublishLockDefinition_resultTupleScheme extends TupleScheme<unpublishLockDefinition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unpublishLockDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        if (struct.isSetErr3()) {
          optionals.set(2);
        }
        if (struct.isSetErr4()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
        if (struct.isSetErr4()) {
          struct.err4.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unpublishLockDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.err1 = new VCSAuthenticationFailed();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new VCSAuthorizationFailed();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err3 = new InvalidCollaborationLockQuerySpec();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err4 = new CollaborationLockQueryNotFound();
          struct.err4.read(iprot);
          struct.setErr4IsSet(true);
        }
      }
    }

  }

  public static class lock_args implements org.apache.thrift.TBase<lock_args, lock_args._Fields>, java.io.Serializable, Cloneable, Comparable<lock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lock_args");

    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("specification", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lock_argsTupleSchemeFactory());
    }

    public Credentials credentials; // required
    public CollaborationQueryInvocationSpecification specification; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREDENTIALS((short)1, "credentials"),
      SPECIFICATION((short)2, "specification");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // SPECIFICATION
            return SPECIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      tmpMap.put(_Fields.SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("specification", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationQueryInvocationSpecification.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lock_args.class, metaDataMap);
    }

    public lock_args() {
    }

    public lock_args(
      Credentials credentials,
      CollaborationQueryInvocationSpecification specification)
    {
      this();
      this.credentials = credentials;
      this.specification = specification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lock_args(lock_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
      if (other.isSetSpecification()) {
        this.specification = new CollaborationQueryInvocationSpecification(other.specification);
      }
    }

    public lock_args deepCopy() {
      return new lock_args(this);
    }

    @Override
    public void clear() {
      this.credentials = null;
      this.specification = null;
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public lock_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public CollaborationQueryInvocationSpecification getSpecification() {
      return this.specification;
    }

    public lock_args setSpecification(CollaborationQueryInvocationSpecification specification) {
      this.specification = specification;
      return this;
    }

    public void unsetSpecification() {
      this.specification = null;
    }

    /** Returns true if field specification is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecification() {
      return this.specification != null;
    }

    public void setSpecificationIsSet(boolean value) {
      if (!value) {
        this.specification = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      case SPECIFICATION:
        if (value == null) {
          unsetSpecification();
        } else {
          setSpecification((CollaborationQueryInvocationSpecification)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREDENTIALS:
        return getCredentials();

      case SPECIFICATION:
        return getSpecification();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREDENTIALS:
        return isSetCredentials();
      case SPECIFICATION:
        return isSetSpecification();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lock_args)
        return this.equals((lock_args)that);
      return false;
    }

    public boolean equals(lock_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_specification = true && this.isSetSpecification();
      boolean that_present_specification = true && that.isSetSpecification();
      if (this_present_specification || that_present_specification) {
        if (!(this_present_specification && that_present_specification))
          return false;
        if (!this.specification.equals(that.specification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_credentials = true && (isSetCredentials());
      list.add(present_credentials);
      if (present_credentials)
        list.add(credentials);

      boolean present_specification = true && (isSetSpecification());
      list.add(present_specification);
      if (present_specification)
        list.add(specification);

      return list.hashCode();
    }

    @Override
    public int compareTo(lock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpecification()).compareTo(other.isSetSpecification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specification, other.specification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lock_args(");
      boolean first = true;

      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specification:");
      if (this.specification == null) {
        sb.append("null");
      } else {
        sb.append(this.specification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (credentials == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'credentials' was not present! Struct: " + toString());
      }
      if (specification == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specification' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (credentials != null) {
        credentials.validate();
      }
      if (specification != null) {
        specification.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lock_argsStandardSchemeFactory implements SchemeFactory {
      public lock_argsStandardScheme getScheme() {
        return new lock_argsStandardScheme();
      }
    }

    private static class lock_argsStandardScheme extends StandardScheme<lock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREDENTIALS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.credentials = new Credentials();
                struct.credentials.read(iprot);
                struct.setCredentialsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.specification = new CollaborationQueryInvocationSpecification();
                struct.specification.read(iprot);
                struct.setSpecificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.credentials != null) {
          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
          struct.credentials.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specification != null) {
          oprot.writeFieldBegin(SPECIFICATION_FIELD_DESC);
          struct.specification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lock_argsTupleSchemeFactory implements SchemeFactory {
      public lock_argsTupleScheme getScheme() {
        return new lock_argsTupleScheme();
      }
    }

    private static class lock_argsTupleScheme extends TupleScheme<lock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.credentials.write(oprot);
        struct.specification.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.credentials = new Credentials();
        struct.credentials.read(iprot);
        struct.setCredentialsIsSet(true);
        struct.specification = new CollaborationQueryInvocationSpecification();
        struct.specification.read(iprot);
        struct.setSpecificationIsSet(true);
      }
    }

  }

  public static class lock_result implements org.apache.thrift.TBase<lock_result, lock_result._Fields>, java.io.Serializable, Cloneable, Comparable<lock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lock_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ERR4_FIELD_DESC = new org.apache.thrift.protocol.TField("err4", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lock_resultTupleSchemeFactory());
    }

    public VCSAuthenticationFailed err1; // required
    public VCSAuthorizationFailed err2; // required
    public InvalidCollaborationLockQuerySpec err3; // required
    public CollaborationResourceLocked err4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3"),
      ERR4((short)4, "err4");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          case 4: // ERR4
            return ERR4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR4, new org.apache.thrift.meta_data.FieldMetaData("err4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lock_result.class, metaDataMap);
    }

    public lock_result() {
    }

    public lock_result(
      VCSAuthenticationFailed err1,
      VCSAuthorizationFailed err2,
      InvalidCollaborationLockQuerySpec err3,
      CollaborationResourceLocked err4)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
      this.err4 = err4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lock_result(lock_result other) {
      if (other.isSetErr1()) {
        this.err1 = new VCSAuthenticationFailed(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new VCSAuthorizationFailed(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new InvalidCollaborationLockQuerySpec(other.err3);
      }
      if (other.isSetErr4()) {
        this.err4 = new CollaborationResourceLocked(other.err4);
      }
    }

    public lock_result deepCopy() {
      return new lock_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
      this.err4 = null;
    }

    public VCSAuthenticationFailed getErr1() {
      return this.err1;
    }

    public lock_result setErr1(VCSAuthenticationFailed err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public VCSAuthorizationFailed getErr2() {
      return this.err2;
    }

    public lock_result setErr2(VCSAuthorizationFailed err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public InvalidCollaborationLockQuerySpec getErr3() {
      return this.err3;
    }

    public lock_result setErr3(InvalidCollaborationLockQuerySpec err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public CollaborationResourceLocked getErr4() {
      return this.err4;
    }

    public lock_result setErr4(CollaborationResourceLocked err4) {
      this.err4 = err4;
      return this;
    }

    public void unsetErr4() {
      this.err4 = null;
    }

    /** Returns true if field err4 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr4() {
      return this.err4 != null;
    }

    public void setErr4IsSet(boolean value) {
      if (!value) {
        this.err4 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((VCSAuthenticationFailed)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((VCSAuthorizationFailed)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((InvalidCollaborationLockQuerySpec)value);
        }
        break;

      case ERR4:
        if (value == null) {
          unsetErr4();
        } else {
          setErr4((CollaborationResourceLocked)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      case ERR4:
        return getErr4();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      case ERR4:
        return isSetErr4();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lock_result)
        return this.equals((lock_result)that);
      return false;
    }

    public boolean equals(lock_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      boolean this_present_err4 = true && this.isSetErr4();
      boolean that_present_err4 = true && that.isSetErr4();
      if (this_present_err4 || that_present_err4) {
        if (!(this_present_err4 && that_present_err4))
          return false;
        if (!this.err4.equals(that.err4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      boolean present_err4 = true && (isSetErr4());
      list.add(present_err4);
      if (present_err4)
        list.add(err4);

      return list.hashCode();
    }

    @Override
    public int compareTo(lock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr4()).compareTo(other.isSetErr4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err4, other.err4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lock_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err4:");
      if (this.err4 == null) {
        sb.append("null");
      } else {
        sb.append(this.err4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lock_resultStandardSchemeFactory implements SchemeFactory {
      public lock_resultStandardScheme getScheme() {
        return new lock_resultStandardScheme();
      }
    }

    private static class lock_resultStandardScheme extends StandardScheme<lock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new VCSAuthenticationFailed();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new VCSAuthorizationFailed();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new InvalidCollaborationLockQuerySpec();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERR4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err4 = new CollaborationResourceLocked();
                struct.err4.read(iprot);
                struct.setErr4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err4 != null) {
          oprot.writeFieldBegin(ERR4_FIELD_DESC);
          struct.err4.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lock_resultTupleSchemeFactory implements SchemeFactory {
      public lock_resultTupleScheme getScheme() {
        return new lock_resultTupleScheme();
      }
    }

    private static class lock_resultTupleScheme extends TupleScheme<lock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        if (struct.isSetErr3()) {
          optionals.set(2);
        }
        if (struct.isSetErr4()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
        if (struct.isSetErr4()) {
          struct.err4.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.err1 = new VCSAuthenticationFailed();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new VCSAuthorizationFailed();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err3 = new InvalidCollaborationLockQuerySpec();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err4 = new CollaborationResourceLocked();
          struct.err4.read(iprot);
          struct.setErr4IsSet(true);
        }
      }
    }

  }

  public static class unlock_args implements org.apache.thrift.TBase<unlock_args, unlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<unlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unlock_args");

    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("specification", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unlock_argsTupleSchemeFactory());
    }

    public Credentials credentials; // required
    public CollaborationQueryInvocationSpecification specification; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREDENTIALS((short)1, "credentials"),
      SPECIFICATION((short)2, "specification");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // SPECIFICATION
            return SPECIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      tmpMap.put(_Fields.SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("specification", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationQueryInvocationSpecification.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unlock_args.class, metaDataMap);
    }

    public unlock_args() {
    }

    public unlock_args(
      Credentials credentials,
      CollaborationQueryInvocationSpecification specification)
    {
      this();
      this.credentials = credentials;
      this.specification = specification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unlock_args(unlock_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
      if (other.isSetSpecification()) {
        this.specification = new CollaborationQueryInvocationSpecification(other.specification);
      }
    }

    public unlock_args deepCopy() {
      return new unlock_args(this);
    }

    @Override
    public void clear() {
      this.credentials = null;
      this.specification = null;
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public unlock_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public CollaborationQueryInvocationSpecification getSpecification() {
      return this.specification;
    }

    public unlock_args setSpecification(CollaborationQueryInvocationSpecification specification) {
      this.specification = specification;
      return this;
    }

    public void unsetSpecification() {
      this.specification = null;
    }

    /** Returns true if field specification is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecification() {
      return this.specification != null;
    }

    public void setSpecificationIsSet(boolean value) {
      if (!value) {
        this.specification = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      case SPECIFICATION:
        if (value == null) {
          unsetSpecification();
        } else {
          setSpecification((CollaborationQueryInvocationSpecification)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREDENTIALS:
        return getCredentials();

      case SPECIFICATION:
        return getSpecification();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREDENTIALS:
        return isSetCredentials();
      case SPECIFICATION:
        return isSetSpecification();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unlock_args)
        return this.equals((unlock_args)that);
      return false;
    }

    public boolean equals(unlock_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_specification = true && this.isSetSpecification();
      boolean that_present_specification = true && that.isSetSpecification();
      if (this_present_specification || that_present_specification) {
        if (!(this_present_specification && that_present_specification))
          return false;
        if (!this.specification.equals(that.specification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_credentials = true && (isSetCredentials());
      list.add(present_credentials);
      if (present_credentials)
        list.add(credentials);

      boolean present_specification = true && (isSetSpecification());
      list.add(present_specification);
      if (present_specification)
        list.add(specification);

      return list.hashCode();
    }

    @Override
    public int compareTo(unlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpecification()).compareTo(other.isSetSpecification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specification, other.specification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unlock_args(");
      boolean first = true;

      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specification:");
      if (this.specification == null) {
        sb.append("null");
      } else {
        sb.append(this.specification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (credentials == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'credentials' was not present! Struct: " + toString());
      }
      if (specification == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specification' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (credentials != null) {
        credentials.validate();
      }
      if (specification != null) {
        specification.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unlock_argsStandardSchemeFactory implements SchemeFactory {
      public unlock_argsStandardScheme getScheme() {
        return new unlock_argsStandardScheme();
      }
    }

    private static class unlock_argsStandardScheme extends StandardScheme<unlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREDENTIALS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.credentials = new Credentials();
                struct.credentials.read(iprot);
                struct.setCredentialsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.specification = new CollaborationQueryInvocationSpecification();
                struct.specification.read(iprot);
                struct.setSpecificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.credentials != null) {
          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
          struct.credentials.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specification != null) {
          oprot.writeFieldBegin(SPECIFICATION_FIELD_DESC);
          struct.specification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unlock_argsTupleSchemeFactory implements SchemeFactory {
      public unlock_argsTupleScheme getScheme() {
        return new unlock_argsTupleScheme();
      }
    }

    private static class unlock_argsTupleScheme extends TupleScheme<unlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.credentials.write(oprot);
        struct.specification.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.credentials = new Credentials();
        struct.credentials.read(iprot);
        struct.setCredentialsIsSet(true);
        struct.specification = new CollaborationQueryInvocationSpecification();
        struct.specification.read(iprot);
        struct.setSpecificationIsSet(true);
      }
    }

  }

  public static class unlock_result implements org.apache.thrift.TBase<unlock_result, unlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<unlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unlock_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ERR4_FIELD_DESC = new org.apache.thrift.protocol.TField("err4", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unlock_resultTupleSchemeFactory());
    }

    public VCSAuthenticationFailed err1; // required
    public VCSAuthorizationFailed err2; // required
    public InvalidCollaborationLockQuerySpec err3; // required
    public CollaborationLockQueryNotFound err4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3"),
      ERR4((short)4, "err4");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          case 4: // ERR4
            return ERR4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR4, new org.apache.thrift.meta_data.FieldMetaData("err4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unlock_result.class, metaDataMap);
    }

    public unlock_result() {
    }

    public unlock_result(
      VCSAuthenticationFailed err1,
      VCSAuthorizationFailed err2,
      InvalidCollaborationLockQuerySpec err3,
      CollaborationLockQueryNotFound err4)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
      this.err4 = err4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unlock_result(unlock_result other) {
      if (other.isSetErr1()) {
        this.err1 = new VCSAuthenticationFailed(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new VCSAuthorizationFailed(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new InvalidCollaborationLockQuerySpec(other.err3);
      }
      if (other.isSetErr4()) {
        this.err4 = new CollaborationLockQueryNotFound(other.err4);
      }
    }

    public unlock_result deepCopy() {
      return new unlock_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
      this.err4 = null;
    }

    public VCSAuthenticationFailed getErr1() {
      return this.err1;
    }

    public unlock_result setErr1(VCSAuthenticationFailed err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public VCSAuthorizationFailed getErr2() {
      return this.err2;
    }

    public unlock_result setErr2(VCSAuthorizationFailed err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public InvalidCollaborationLockQuerySpec getErr3() {
      return this.err3;
    }

    public unlock_result setErr3(InvalidCollaborationLockQuerySpec err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public CollaborationLockQueryNotFound getErr4() {
      return this.err4;
    }

    public unlock_result setErr4(CollaborationLockQueryNotFound err4) {
      this.err4 = err4;
      return this;
    }

    public void unsetErr4() {
      this.err4 = null;
    }

    /** Returns true if field err4 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr4() {
      return this.err4 != null;
    }

    public void setErr4IsSet(boolean value) {
      if (!value) {
        this.err4 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((VCSAuthenticationFailed)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((VCSAuthorizationFailed)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((InvalidCollaborationLockQuerySpec)value);
        }
        break;

      case ERR4:
        if (value == null) {
          unsetErr4();
        } else {
          setErr4((CollaborationLockQueryNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      case ERR4:
        return getErr4();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      case ERR4:
        return isSetErr4();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unlock_result)
        return this.equals((unlock_result)that);
      return false;
    }

    public boolean equals(unlock_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      boolean this_present_err4 = true && this.isSetErr4();
      boolean that_present_err4 = true && that.isSetErr4();
      if (this_present_err4 || that_present_err4) {
        if (!(this_present_err4 && that_present_err4))
          return false;
        if (!this.err4.equals(that.err4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      boolean present_err4 = true && (isSetErr4());
      list.add(present_err4);
      if (present_err4)
        list.add(err4);

      return list.hashCode();
    }

    @Override
    public int compareTo(unlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr4()).compareTo(other.isSetErr4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err4, other.err4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unlock_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err4:");
      if (this.err4 == null) {
        sb.append("null");
      } else {
        sb.append(this.err4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unlock_resultStandardSchemeFactory implements SchemeFactory {
      public unlock_resultStandardScheme getScheme() {
        return new unlock_resultStandardScheme();
      }
    }

    private static class unlock_resultStandardScheme extends StandardScheme<unlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new VCSAuthenticationFailed();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new VCSAuthorizationFailed();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new InvalidCollaborationLockQuerySpec();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERR4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err4 = new CollaborationLockQueryNotFound();
                struct.err4.read(iprot);
                struct.setErr4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err4 != null) {
          oprot.writeFieldBegin(ERR4_FIELD_DESC);
          struct.err4.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unlock_resultTupleSchemeFactory implements SchemeFactory {
      public unlock_resultTupleScheme getScheme() {
        return new unlock_resultTupleScheme();
      }
    }

    private static class unlock_resultTupleScheme extends TupleScheme<unlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        if (struct.isSetErr3()) {
          optionals.set(2);
        }
        if (struct.isSetErr4()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
        if (struct.isSetErr4()) {
          struct.err4.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.err1 = new VCSAuthenticationFailed();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new VCSAuthorizationFailed();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err3 = new InvalidCollaborationLockQuerySpec();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err4 = new CollaborationLockQueryNotFound();
          struct.err4.read(iprot);
          struct.setErr4IsSet(true);
        }
      }
    }

  }

}
