//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


CommitItemChangeType = {
  'ADDED' : 0,
  'DELETED' : 1,
  'REPLACED' : 2,
  'UNKNOWN' : 3,
  'UPDATED' : 4
};
HawkState = {
  'RUNNING' : 0,
  'STOPPED' : 1,
  'UPDATING' : 2
};
IFCExportStatus = {
  'CANCELLED' : 0,
  'DONE' : 1,
  'FAILED' : 2,
  'RUNNING' : 3,
  'SCHEDULED' : 4
};
SubscriptionDurability = {
  'DEFAULT' : 0,
  'DURABLE' : 1,
  'TEMPORARY' : 2
};
TransformationState = {
  'FAILED' : 0,
  'KILLED' : 1,
  'PREP' : 2,
  'RUNNING' : 3,
  'SUCCEEDED' : 4
};
CommitItem = function(args) {
  this.repoURL = null;
  this.revision = null;
  this.path = null;
  this.type = null;
  if (args) {
    if (args.repoURL !== undefined && args.repoURL !== null) {
      this.repoURL = args.repoURL;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repoURL is unset!');
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field path is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
CommitItem.prototype = {};
CommitItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repoURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.revision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommitItem.prototype.write = function(output) {
  output.writeStructBegin('CommitItem');
  if (this.repoURL !== null && this.repoURL !== undefined) {
    output.writeFieldBegin('repoURL', Thrift.Type.STRING, 1);
    output.writeString(this.repoURL);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.STRING, 2);
    output.writeString(this.revision);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 3);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Credentials = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
  }
};
Credentials.prototype = {};
Credentials.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Credentials.prototype.write = function(output) {
  output.writeStructBegin('Credentials');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DerivedAttributeSpec = function(args) {
  this.metamodelUri = null;
  this.typeName = null;
  this.attributeName = null;
  this.attributeType = null;
  this.isMany = null;
  this.isOrdered = null;
  this.isUnique = null;
  this.derivationLanguage = null;
  this.derivationLogic = null;
  if (args) {
    if (args.metamodelUri !== undefined && args.metamodelUri !== null) {
      this.metamodelUri = args.metamodelUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelUri is unset!');
    }
    if (args.typeName !== undefined && args.typeName !== null) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
    if (args.attributeName !== undefined && args.attributeName !== null) {
      this.attributeName = args.attributeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attributeName is unset!');
    }
    if (args.attributeType !== undefined && args.attributeType !== null) {
      this.attributeType = args.attributeType;
    }
    if (args.isMany !== undefined && args.isMany !== null) {
      this.isMany = args.isMany;
    }
    if (args.isOrdered !== undefined && args.isOrdered !== null) {
      this.isOrdered = args.isOrdered;
    }
    if (args.isUnique !== undefined && args.isUnique !== null) {
      this.isUnique = args.isUnique;
    }
    if (args.derivationLanguage !== undefined && args.derivationLanguage !== null) {
      this.derivationLanguage = args.derivationLanguage;
    }
    if (args.derivationLogic !== undefined && args.derivationLogic !== null) {
      this.derivationLogic = args.derivationLogic;
    }
  }
};
DerivedAttributeSpec.prototype = {};
DerivedAttributeSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.attributeType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isMany = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isOrdered = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isUnique = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.derivationLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.derivationLogic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DerivedAttributeSpec.prototype.write = function(output) {
  output.writeStructBegin('DerivedAttributeSpec');
  if (this.metamodelUri !== null && this.metamodelUri !== undefined) {
    output.writeFieldBegin('metamodelUri', Thrift.Type.STRING, 1);
    output.writeString(this.metamodelUri);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 2);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 3);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  if (this.attributeType !== null && this.attributeType !== undefined) {
    output.writeFieldBegin('attributeType', Thrift.Type.STRING, 4);
    output.writeString(this.attributeType);
    output.writeFieldEnd();
  }
  if (this.isMany !== null && this.isMany !== undefined) {
    output.writeFieldBegin('isMany', Thrift.Type.BOOL, 5);
    output.writeBool(this.isMany);
    output.writeFieldEnd();
  }
  if (this.isOrdered !== null && this.isOrdered !== undefined) {
    output.writeFieldBegin('isOrdered', Thrift.Type.BOOL, 6);
    output.writeBool(this.isOrdered);
    output.writeFieldEnd();
  }
  if (this.isUnique !== null && this.isUnique !== undefined) {
    output.writeFieldBegin('isUnique', Thrift.Type.BOOL, 7);
    output.writeBool(this.isUnique);
    output.writeFieldEnd();
  }
  if (this.derivationLanguage !== null && this.derivationLanguage !== undefined) {
    output.writeFieldBegin('derivationLanguage', Thrift.Type.STRING, 8);
    output.writeString(this.derivationLanguage);
    output.writeFieldEnd();
  }
  if (this.derivationLogic !== null && this.derivationLogic !== undefined) {
    output.writeFieldBegin('derivationLogic', Thrift.Type.STRING, 9);
    output.writeString(this.derivationLogic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FailedQuery = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(FailedQuery, Thrift.TException);
FailedQuery.prototype.name = 'FailedQuery';
FailedQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FailedQuery.prototype.write = function(output) {
  output.writeStructBegin('FailedQuery');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

File = function(args) {
  this.name = null;
  this.contents = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.contents !== undefined && args.contents !== null) {
      this.contents = args.contents;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contents is unset!');
    }
  }
};
File.prototype = {};
File.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contents = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

File.prototype.write = function(output) {
  output.writeStructBegin('File');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.contents !== null && this.contents !== undefined) {
    output.writeFieldBegin('contents', Thrift.Type.STRING, 2);
    output.writeBinary(this.contents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GoldRepoNotFound = function(args) {
};
Thrift.inherits(GoldRepoNotFound, Thrift.TException);
GoldRepoNotFound.prototype.name = 'GoldRepoNotFound';
GoldRepoNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GoldRepoNotFound.prototype.write = function(output) {
  output.writeStructBegin('GoldRepoNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkInstance = function(args) {
  this.name = null;
  this.state = null;
  this.message = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
HawkInstance.prototype = {};
HawkInstance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkInstance.prototype.write = function(output) {
  output.writeStructBegin('HawkInstance');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkInstanceNotFound = function(args) {
};
Thrift.inherits(HawkInstanceNotFound, Thrift.TException);
HawkInstanceNotFound.prototype.name = 'HawkInstanceNotFound';
HawkInstanceNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkInstanceNotFound.prototype.write = function(output) {
  output.writeStructBegin('HawkInstanceNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkInstanceNotRunning = function(args) {
};
Thrift.inherits(HawkInstanceNotRunning, Thrift.TException);
HawkInstanceNotRunning.prototype.name = 'HawkInstanceNotRunning';
HawkInstanceNotRunning.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkInstanceNotRunning.prototype.write = function(output) {
  output.writeStructBegin('HawkInstanceNotRunning');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkStateEvent = function(args) {
  this.timestamp = null;
  this.state = null;
  this.message = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
HawkStateEvent.prototype = {};
HawkStateEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkStateEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkStateEvent');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkSynchronizationEndEvent = function(args) {
  this.timestampNanos = null;
  if (args) {
    if (args.timestampNanos !== undefined && args.timestampNanos !== null) {
      this.timestampNanos = args.timestampNanos;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestampNanos is unset!');
    }
  }
};
HawkSynchronizationEndEvent.prototype = {};
HawkSynchronizationEndEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestampNanos = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkSynchronizationEndEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkSynchronizationEndEvent');
  if (this.timestampNanos !== null && this.timestampNanos !== undefined) {
    output.writeFieldBegin('timestampNanos', Thrift.Type.I64, 1);
    output.writeI64(this.timestampNanos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkSynchronizationStartEvent = function(args) {
  this.timestampNanos = null;
  if (args) {
    if (args.timestampNanos !== undefined && args.timestampNanos !== null) {
      this.timestampNanos = args.timestampNanos;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestampNanos is unset!');
    }
  }
};
HawkSynchronizationStartEvent.prototype = {};
HawkSynchronizationStartEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestampNanos = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkSynchronizationStartEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkSynchronizationStartEvent');
  if (this.timestampNanos !== null && this.timestampNanos !== undefined) {
    output.writeFieldBegin('timestampNanos', Thrift.Type.I64, 1);
    output.writeI64(this.timestampNanos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFCExportJob = function(args) {
  this.jobID = null;
  this.status = null;
  this.message = null;
  if (args) {
    if (args.jobID !== undefined && args.jobID !== null) {
      this.jobID = args.jobID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field jobID is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
IFCExportJob.prototype = {};
IFCExportJob.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFCExportJob.prototype.write = function(output) {
  output.writeStructBegin('IFCExportJob');
  if (this.jobID !== null && this.jobID !== undefined) {
    output.writeFieldBegin('jobID', Thrift.Type.STRING, 1);
    output.writeString(this.jobID);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexedAttributeSpec = function(args) {
  this.metamodelUri = null;
  this.typeName = null;
  this.attributeName = null;
  if (args) {
    if (args.metamodelUri !== undefined && args.metamodelUri !== null) {
      this.metamodelUri = args.metamodelUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelUri is unset!');
    }
    if (args.typeName !== undefined && args.typeName !== null) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
    if (args.attributeName !== undefined && args.attributeName !== null) {
      this.attributeName = args.attributeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attributeName is unset!');
    }
  }
};
IndexedAttributeSpec.prototype = {};
IndexedAttributeSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexedAttributeSpec.prototype.write = function(output) {
  output.writeStructBegin('IndexedAttributeSpec');
  if (this.metamodelUri !== null && this.metamodelUri !== undefined) {
    output.writeFieldBegin('metamodelUri', Thrift.Type.STRING, 1);
    output.writeString(this.metamodelUri);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 2);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 3);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidDerivedAttributeSpec = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidDerivedAttributeSpec, Thrift.TException);
InvalidDerivedAttributeSpec.prototype.name = 'InvalidDerivedAttributeSpec';
InvalidDerivedAttributeSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidDerivedAttributeSpec.prototype.write = function(output) {
  output.writeStructBegin('InvalidDerivedAttributeSpec');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidIndexedAttributeSpec = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidIndexedAttributeSpec, Thrift.TException);
InvalidIndexedAttributeSpec.prototype.name = 'InvalidIndexedAttributeSpec';
InvalidIndexedAttributeSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidIndexedAttributeSpec.prototype.write = function(output) {
  output.writeStructBegin('InvalidIndexedAttributeSpec');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidMetamodel = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidMetamodel, Thrift.TException);
InvalidMetamodel.prototype.name = 'InvalidMetamodel';
InvalidMetamodel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidMetamodel.prototype.write = function(output) {
  output.writeStructBegin('InvalidMetamodel');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidPollingConfiguration = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidPollingConfiguration, Thrift.TException);
InvalidPollingConfiguration.prototype.name = 'InvalidPollingConfiguration';
InvalidPollingConfiguration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPollingConfiguration.prototype.write = function(output) {
  output.writeStructBegin('InvalidPollingConfiguration');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidQuery = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidQuery, Thrift.TException);
InvalidQuery.prototype.name = 'InvalidQuery';
InvalidQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidQuery.prototype.write = function(output) {
  output.writeStructBegin('InvalidQuery');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidTransformation = function(args) {
  this.reason = null;
  this.location = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field location is unset!');
    }
  }
};
Thrift.inherits(InvalidTransformation, Thrift.TException);
InvalidTransformation.prototype.name = 'InvalidTransformation';
InvalidTransformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidTransformation.prototype.write = function(output) {
  output.writeStructBegin('InvalidTransformation');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MixedReference = function(args) {
  this.id = null;
  this.position = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
  }
};
MixedReference.prototype = {};
MixedReference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MixedReference.prototype.write = function(output) {
  output.writeStructBegin('MixedReference');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 2);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelSpec = function(args) {
  this.uri = null;
  this.metamodelUris = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.metamodelUris !== undefined && args.metamodelUris !== null) {
      this.metamodelUris = Thrift.copyList(args.metamodelUris, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelUris is unset!');
    }
  }
};
ModelSpec.prototype = {};
ModelSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.metamodelUris = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.metamodelUris.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelSpec.prototype.write = function(output) {
  output.writeStructBegin('ModelSpec');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.metamodelUris !== null && this.metamodelUris !== undefined) {
    output.writeFieldBegin('metamodelUris', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.metamodelUris.length);
    for (var iter7 in this.metamodelUris)
    {
      if (this.metamodelUris.hasOwnProperty(iter7))
      {
        iter7 = this.metamodelUris[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OfflineCollaborationInternalError = function(args) {
  this.errorMessage = null;
  if (args) {
    if (args.errorMessage !== undefined && args.errorMessage !== null) {
      this.errorMessage = args.errorMessage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field errorMessage is unset!');
    }
  }
};
Thrift.inherits(OfflineCollaborationInternalError, Thrift.TException);
OfflineCollaborationInternalError.prototype.name = 'OfflineCollaborationInternalError';
OfflineCollaborationInternalError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OfflineCollaborationInternalError.prototype.write = function(output) {
  output.writeStructBegin('OfflineCollaborationInternalError');
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 1);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Repository = function(args) {
  this.uri = null;
  this.type = null;
  this.isFrozen = false;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.isFrozen !== undefined && args.isFrozen !== null) {
      this.isFrozen = args.isFrozen;
    }
  }
};
Repository.prototype = {};
Repository.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isFrozen = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository.prototype.write = function(output) {
  output.writeStructBegin('Repository');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.isFrozen !== null && this.isFrozen !== undefined) {
    output.writeFieldBegin('isFrozen', Thrift.Type.BOOL, 3);
    output.writeBool(this.isFrozen);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Slot = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Slot.prototype = {};
Slot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Slot.prototype.write = function(output) {
  output.writeStructBegin('Slot');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SlotMetadata = function(args) {
  this.name = null;
  this.type = null;
  this.isMany = null;
  this.isOrdered = null;
  this.isUnique = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.isMany !== undefined && args.isMany !== null) {
      this.isMany = args.isMany;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMany is unset!');
    }
    if (args.isOrdered !== undefined && args.isOrdered !== null) {
      this.isOrdered = args.isOrdered;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isOrdered is unset!');
    }
    if (args.isUnique !== undefined && args.isUnique !== null) {
      this.isUnique = args.isUnique;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isUnique is unset!');
    }
  }
};
SlotMetadata.prototype = {};
SlotMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMany = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isOrdered = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isUnique = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SlotMetadata.prototype.write = function(output) {
  output.writeStructBegin('SlotMetadata');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.isMany !== null && this.isMany !== undefined) {
    output.writeFieldBegin('isMany', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMany);
    output.writeFieldEnd();
  }
  if (this.isOrdered !== null && this.isOrdered !== undefined) {
    output.writeFieldBegin('isOrdered', Thrift.Type.BOOL, 4);
    output.writeBool(this.isOrdered);
    output.writeFieldEnd();
  }
  if (this.isUnique !== null && this.isUnique !== undefined) {
    output.writeFieldBegin('isUnique', Thrift.Type.BOOL, 5);
    output.writeBool(this.isUnique);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SlotValue = function(args) {
  this.vBoolean = null;
  this.vByte = null;
  this.vShort = null;
  this.vInteger = null;
  this.vLong = null;
  this.vDouble = null;
  this.vString = null;
  this.vBooleans = null;
  this.vBytes = null;
  this.vShorts = null;
  this.vIntegers = null;
  this.vLongs = null;
  this.vDoubles = null;
  this.vStrings = null;
  if (args) {
    if (args.vBoolean !== undefined && args.vBoolean !== null) {
      this.vBoolean = args.vBoolean;
    }
    if (args.vByte !== undefined && args.vByte !== null) {
      this.vByte = args.vByte;
    }
    if (args.vShort !== undefined && args.vShort !== null) {
      this.vShort = args.vShort;
    }
    if (args.vInteger !== undefined && args.vInteger !== null) {
      this.vInteger = args.vInteger;
    }
    if (args.vLong !== undefined && args.vLong !== null) {
      this.vLong = args.vLong;
    }
    if (args.vDouble !== undefined && args.vDouble !== null) {
      this.vDouble = args.vDouble;
    }
    if (args.vString !== undefined && args.vString !== null) {
      this.vString = args.vString;
    }
    if (args.vBooleans !== undefined && args.vBooleans !== null) {
      this.vBooleans = Thrift.copyList(args.vBooleans, [null]);
    }
    if (args.vBytes !== undefined && args.vBytes !== null) {
      this.vBytes = args.vBytes;
    }
    if (args.vShorts !== undefined && args.vShorts !== null) {
      this.vShorts = Thrift.copyList(args.vShorts, [null]);
    }
    if (args.vIntegers !== undefined && args.vIntegers !== null) {
      this.vIntegers = Thrift.copyList(args.vIntegers, [null]);
    }
    if (args.vLongs !== undefined && args.vLongs !== null) {
      this.vLongs = Thrift.copyList(args.vLongs, [null]);
    }
    if (args.vDoubles !== undefined && args.vDoubles !== null) {
      this.vDoubles = Thrift.copyList(args.vDoubles, [null]);
    }
    if (args.vStrings !== undefined && args.vStrings !== null) {
      this.vStrings = Thrift.copyList(args.vStrings, [null]);
    }
  }
};
SlotValue.prototype = {};
SlotValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.vBoolean = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.vByte = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.vShort = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.vInteger = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.vLong = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.vDouble = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.vString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.vBooleans = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readBool().value;
          this.vBooleans.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.vBytes = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.vShorts = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readI16().value;
          this.vShorts.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.vIntegers = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = input.readI32().value;
          this.vIntegers.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size29 = 0;
        var _rtmp333;
        this.vLongs = [];
        var _etype32 = 0;
        _rtmp333 = input.readListBegin();
        _etype32 = _rtmp333.etype;
        _size29 = _rtmp333.size;
        for (var _i34 = 0; _i34 < _size29; ++_i34)
        {
          var elem35 = null;
          elem35 = input.readI64().value;
          this.vLongs.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.vDoubles = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readDouble().value;
          this.vDoubles.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size43 = 0;
        var _rtmp347;
        this.vStrings = [];
        var _etype46 = 0;
        _rtmp347 = input.readListBegin();
        _etype46 = _rtmp347.etype;
        _size43 = _rtmp347.size;
        for (var _i48 = 0; _i48 < _size43; ++_i48)
        {
          var elem49 = null;
          elem49 = input.readString().value;
          this.vStrings.push(elem49);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SlotValue.prototype.write = function(output) {
  output.writeStructBegin('SlotValue');
  if (this.vBoolean !== null && this.vBoolean !== undefined) {
    output.writeFieldBegin('vBoolean', Thrift.Type.BOOL, 1);
    output.writeBool(this.vBoolean);
    output.writeFieldEnd();
  }
  if (this.vByte !== null && this.vByte !== undefined) {
    output.writeFieldBegin('vByte', Thrift.Type.BYTE, 2);
    output.writeByte(this.vByte);
    output.writeFieldEnd();
  }
  if (this.vShort !== null && this.vShort !== undefined) {
    output.writeFieldBegin('vShort', Thrift.Type.I16, 3);
    output.writeI16(this.vShort);
    output.writeFieldEnd();
  }
  if (this.vInteger !== null && this.vInteger !== undefined) {
    output.writeFieldBegin('vInteger', Thrift.Type.I32, 4);
    output.writeI32(this.vInteger);
    output.writeFieldEnd();
  }
  if (this.vLong !== null && this.vLong !== undefined) {
    output.writeFieldBegin('vLong', Thrift.Type.I64, 5);
    output.writeI64(this.vLong);
    output.writeFieldEnd();
  }
  if (this.vDouble !== null && this.vDouble !== undefined) {
    output.writeFieldBegin('vDouble', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.vDouble);
    output.writeFieldEnd();
  }
  if (this.vString !== null && this.vString !== undefined) {
    output.writeFieldBegin('vString', Thrift.Type.STRING, 7);
    output.writeString(this.vString);
    output.writeFieldEnd();
  }
  if (this.vBooleans !== null && this.vBooleans !== undefined) {
    output.writeFieldBegin('vBooleans', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.BOOL, this.vBooleans.length);
    for (var iter50 in this.vBooleans)
    {
      if (this.vBooleans.hasOwnProperty(iter50))
      {
        iter50 = this.vBooleans[iter50];
        output.writeBool(iter50);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vBytes !== null && this.vBytes !== undefined) {
    output.writeFieldBegin('vBytes', Thrift.Type.STRING, 9);
    output.writeBinary(this.vBytes);
    output.writeFieldEnd();
  }
  if (this.vShorts !== null && this.vShorts !== undefined) {
    output.writeFieldBegin('vShorts', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.I16, this.vShorts.length);
    for (var iter51 in this.vShorts)
    {
      if (this.vShorts.hasOwnProperty(iter51))
      {
        iter51 = this.vShorts[iter51];
        output.writeI16(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vIntegers !== null && this.vIntegers !== undefined) {
    output.writeFieldBegin('vIntegers', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.I32, this.vIntegers.length);
    for (var iter52 in this.vIntegers)
    {
      if (this.vIntegers.hasOwnProperty(iter52))
      {
        iter52 = this.vIntegers[iter52];
        output.writeI32(iter52);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vLongs !== null && this.vLongs !== undefined) {
    output.writeFieldBegin('vLongs', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.I64, this.vLongs.length);
    for (var iter53 in this.vLongs)
    {
      if (this.vLongs.hasOwnProperty(iter53))
      {
        iter53 = this.vLongs[iter53];
        output.writeI64(iter53);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vDoubles !== null && this.vDoubles !== undefined) {
    output.writeFieldBegin('vDoubles', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.DOUBLE, this.vDoubles.length);
    for (var iter54 in this.vDoubles)
    {
      if (this.vDoubles.hasOwnProperty(iter54))
      {
        iter54 = this.vDoubles[iter54];
        output.writeDouble(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vStrings !== null && this.vStrings !== undefined) {
    output.writeFieldBegin('vStrings', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.vStrings.length);
    for (var iter55 in this.vStrings)
    {
      if (this.vStrings.hasOwnProperty(iter55))
      {
        iter55 = this.vStrings[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Subscription = function(args) {
  this.host = null;
  this.port = null;
  this.queueAddress = null;
  this.queueName = null;
  this.sslRequired = false;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field host is unset!');
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
    }
    if (args.queueAddress !== undefined && args.queueAddress !== null) {
      this.queueAddress = args.queueAddress;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAddress is unset!');
    }
    if (args.queueName !== undefined && args.queueName !== null) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.sslRequired !== undefined && args.sslRequired !== null) {
      this.sslRequired = args.sslRequired;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sslRequired is unset!');
    }
  }
};
Subscription.prototype = {};
Subscription.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.queueAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sslRequired = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Subscription.prototype.write = function(output) {
  output.writeStructBegin('Subscription');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.queueAddress !== null && this.queueAddress !== undefined) {
    output.writeFieldBegin('queueAddress', Thrift.Type.STRING, 3);
    output.writeString(this.queueAddress);
    output.writeFieldEnd();
  }
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 4);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.sslRequired !== null && this.sslRequired !== undefined) {
    output.writeFieldBegin('sslRequired', Thrift.Type.BOOL, 5);
    output.writeBool(this.sslRequired);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformationStatus = function(args) {
  this.state = null;
  this.elapsed = null;
  this.error = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
    if (args.elapsed !== undefined && args.elapsed !== null) {
      this.elapsed = args.elapsed;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field elapsed is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field error is unset!');
    }
  }
};
TransformationStatus.prototype = {};
TransformationStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.elapsed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformationStatus.prototype.write = function(output) {
  output.writeStructBegin('TransformationStatus');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.I64, 2);
    output.writeI64(this.elapsed);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformationTokenNotFound = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
Thrift.inherits(TransformationTokenNotFound, Thrift.TException);
TransformationTokenNotFound.prototype.name = 'TransformationTokenNotFound';
TransformationTokenNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformationTokenNotFound.prototype.write = function(output) {
  output.writeStructBegin('TransformationTokenNotFound');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnauthorizedRepositoryOperation = function(args) {
};
Thrift.inherits(UnauthorizedRepositoryOperation, Thrift.TException);
UnauthorizedRepositoryOperation.prototype.name = 'UnauthorizedRepositoryOperation';
UnauthorizedRepositoryOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnauthorizedRepositoryOperation.prototype.write = function(output) {
  output.writeStructBegin('UnauthorizedRepositoryOperation');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownQueryLanguage = function(args) {
};
Thrift.inherits(UnknownQueryLanguage, Thrift.TException);
UnknownQueryLanguage.prototype.name = 'UnknownQueryLanguage';
UnknownQueryLanguage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownQueryLanguage.prototype.write = function(output) {
  output.writeStructBegin('UnknownQueryLanguage');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownRepositoryType = function(args) {
};
Thrift.inherits(UnknownRepositoryType, Thrift.TException);
UnknownRepositoryType.prototype.name = 'UnknownRepositoryType';
UnknownRepositoryType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownRepositoryType.prototype.write = function(output) {
  output.writeStructBegin('UnknownRepositoryType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserExists = function(args) {
};
Thrift.inherits(UserExists, Thrift.TException);
UserExists.prototype.name = 'UserExists';
UserExists.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserExists.prototype.write = function(output) {
  output.writeStructBegin('UserExists');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserNotFound = function(args) {
};
Thrift.inherits(UserNotFound, Thrift.TException);
UserNotFound.prototype.name = 'UserNotFound';
UserNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserNotFound.prototype.write = function(output) {
  output.writeStructBegin('UserNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserProfile = function(args) {
  this.realName = null;
  this.admin = null;
  if (args) {
    if (args.realName !== undefined && args.realName !== null) {
      this.realName = args.realName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field realName is unset!');
    }
    if (args.admin !== undefined && args.admin !== null) {
      this.admin = args.admin;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field admin is unset!');
    }
  }
};
UserProfile.prototype = {};
UserProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.realName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.admin = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfile.prototype.write = function(output) {
  output.writeStructBegin('UserProfile');
  if (this.realName !== null && this.realName !== undefined) {
    output.writeFieldBegin('realName', Thrift.Type.STRING, 1);
    output.writeString(this.realName);
    output.writeFieldEnd();
  }
  if (this.admin !== null && this.admin !== undefined) {
    output.writeFieldBegin('admin', Thrift.Type.BOOL, 2);
    output.writeBool(this.admin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VCSAuthenticationFailed = function(args) {
};
Thrift.inherits(VCSAuthenticationFailed, Thrift.TException);
VCSAuthenticationFailed.prototype.name = 'VCSAuthenticationFailed';
VCSAuthenticationFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VCSAuthenticationFailed.prototype.write = function(output) {
  output.writeStructBegin('VCSAuthenticationFailed');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Value = function(args) {
  this.vBoolean = null;
  this.vByte = null;
  this.vShort = null;
  this.vInteger = null;
  this.vLong = null;
  this.vDouble = null;
  this.vString = null;
  if (args) {
    if (args.vBoolean !== undefined && args.vBoolean !== null) {
      this.vBoolean = args.vBoolean;
    }
    if (args.vByte !== undefined && args.vByte !== null) {
      this.vByte = args.vByte;
    }
    if (args.vShort !== undefined && args.vShort !== null) {
      this.vShort = args.vShort;
    }
    if (args.vInteger !== undefined && args.vInteger !== null) {
      this.vInteger = args.vInteger;
    }
    if (args.vLong !== undefined && args.vLong !== null) {
      this.vLong = args.vLong;
    }
    if (args.vDouble !== undefined && args.vDouble !== null) {
      this.vDouble = args.vDouble;
    }
    if (args.vString !== undefined && args.vString !== null) {
      this.vString = args.vString;
    }
  }
};
Value.prototype = {};
Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.vBoolean = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.vByte = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.vShort = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.vInteger = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.vLong = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.vDouble = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.vString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Value.prototype.write = function(output) {
  output.writeStructBegin('Value');
  if (this.vBoolean !== null && this.vBoolean !== undefined) {
    output.writeFieldBegin('vBoolean', Thrift.Type.BOOL, 1);
    output.writeBool(this.vBoolean);
    output.writeFieldEnd();
  }
  if (this.vByte !== null && this.vByte !== undefined) {
    output.writeFieldBegin('vByte', Thrift.Type.BYTE, 2);
    output.writeByte(this.vByte);
    output.writeFieldEnd();
  }
  if (this.vShort !== null && this.vShort !== undefined) {
    output.writeFieldBegin('vShort', Thrift.Type.I16, 3);
    output.writeI16(this.vShort);
    output.writeFieldEnd();
  }
  if (this.vInteger !== null && this.vInteger !== undefined) {
    output.writeFieldBegin('vInteger', Thrift.Type.I32, 4);
    output.writeI32(this.vInteger);
    output.writeFieldEnd();
  }
  if (this.vLong !== null && this.vLong !== undefined) {
    output.writeFieldBegin('vLong', Thrift.Type.I64, 5);
    output.writeI64(this.vLong);
    output.writeFieldEnd();
  }
  if (this.vDouble !== null && this.vDouble !== undefined) {
    output.writeFieldBegin('vDouble', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.vDouble);
    output.writeFieldEnd();
  }
  if (this.vString !== null && this.vString !== undefined) {
    output.writeFieldBegin('vString', Thrift.Type.STRING, 7);
    output.writeString(this.vString);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttributeSlot = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new SlotValue(args.value);
    }
  }
};
AttributeSlot.prototype = {};
AttributeSlot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new SlotValue();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributeSlot.prototype.write = function(output) {
  output.writeStructBegin('AttributeSlot');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkAttributeRemovalEvent = function(args) {
  this.vcsItem = null;
  this.id = null;
  this.attribute = null;
  if (args) {
    if (args.vcsItem !== undefined && args.vcsItem !== null) {
      this.vcsItem = new CommitItem(args.vcsItem);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.attribute !== undefined && args.attribute !== null) {
      this.attribute = args.attribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attribute is unset!');
    }
  }
};
HawkAttributeRemovalEvent.prototype = {};
HawkAttributeRemovalEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkAttributeRemovalEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkAttributeRemovalEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 3);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkAttributeUpdateEvent = function(args) {
  this.vcsItem = null;
  this.id = null;
  this.attribute = null;
  this.value = null;
  if (args) {
    if (args.vcsItem !== undefined && args.vcsItem !== null) {
      this.vcsItem = new CommitItem(args.vcsItem);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.attribute !== undefined && args.attribute !== null) {
      this.attribute = args.attribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attribute is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new SlotValue(args.value);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
HawkAttributeUpdateEvent.prototype = {};
HawkAttributeUpdateEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new SlotValue();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkAttributeUpdateEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkAttributeUpdateEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 3);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 4);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkFileAdditionEvent = function(args) {
  this.vcsItem = null;
  if (args) {
    if (args.vcsItem !== undefined && args.vcsItem !== null) {
      this.vcsItem = new CommitItem(args.vcsItem);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
  }
};
HawkFileAdditionEvent.prototype = {};
HawkFileAdditionEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkFileAdditionEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkFileAdditionEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkFileRemovalEvent = function(args) {
  this.vcsItem = null;
  if (args) {
    if (args.vcsItem !== undefined && args.vcsItem !== null) {
      this.vcsItem = new CommitItem(args.vcsItem);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
  }
};
HawkFileRemovalEvent.prototype = {};
HawkFileRemovalEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkFileRemovalEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkFileRemovalEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkModelElementAdditionEvent = function(args) {
  this.vcsItem = null;
  this.metamodelURI = null;
  this.typeName = null;
  this.id = null;
  if (args) {
    if (args.vcsItem !== undefined && args.vcsItem !== null) {
      this.vcsItem = new CommitItem(args.vcsItem);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.metamodelURI !== undefined && args.metamodelURI !== null) {
      this.metamodelURI = args.metamodelURI;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelURI is unset!');
    }
    if (args.typeName !== undefined && args.typeName !== null) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
HawkModelElementAdditionEvent.prototype = {};
HawkModelElementAdditionEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelURI = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkModelElementAdditionEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkModelElementAdditionEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.metamodelURI !== null && this.metamodelURI !== undefined) {
    output.writeFieldBegin('metamodelURI', Thrift.Type.STRING, 2);
    output.writeString(this.metamodelURI);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 3);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkModelElementRemovalEvent = function(args) {
  this.vcsItem = null;
  this.id = null;
  if (args) {
    if (args.vcsItem !== undefined && args.vcsItem !== null) {
      this.vcsItem = new CommitItem(args.vcsItem);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
HawkModelElementRemovalEvent.prototype = {};
HawkModelElementRemovalEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkModelElementRemovalEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkModelElementRemovalEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkReferenceAdditionEvent = function(args) {
  this.vcsItem = null;
  this.sourceId = null;
  this.targetId = null;
  this.refName = null;
  if (args) {
    if (args.vcsItem !== undefined && args.vcsItem !== null) {
      this.vcsItem = new CommitItem(args.vcsItem);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.sourceId !== undefined && args.sourceId !== null) {
      this.sourceId = args.sourceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceId is unset!');
    }
    if (args.targetId !== undefined && args.targetId !== null) {
      this.targetId = args.targetId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field targetId is unset!');
    }
    if (args.refName !== undefined && args.refName !== null) {
      this.refName = args.refName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refName is unset!');
    }
  }
};
HawkReferenceAdditionEvent.prototype = {};
HawkReferenceAdditionEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.refName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkReferenceAdditionEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkReferenceAdditionEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceId !== null && this.sourceId !== undefined) {
    output.writeFieldBegin('sourceId', Thrift.Type.STRING, 2);
    output.writeString(this.sourceId);
    output.writeFieldEnd();
  }
  if (this.targetId !== null && this.targetId !== undefined) {
    output.writeFieldBegin('targetId', Thrift.Type.STRING, 3);
    output.writeString(this.targetId);
    output.writeFieldEnd();
  }
  if (this.refName !== null && this.refName !== undefined) {
    output.writeFieldBegin('refName', Thrift.Type.STRING, 4);
    output.writeString(this.refName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkReferenceRemovalEvent = function(args) {
  this.vcsItem = null;
  this.sourceId = null;
  this.targetId = null;
  this.refName = null;
  if (args) {
    if (args.vcsItem !== undefined && args.vcsItem !== null) {
      this.vcsItem = new CommitItem(args.vcsItem);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.sourceId !== undefined && args.sourceId !== null) {
      this.sourceId = args.sourceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceId is unset!');
    }
    if (args.targetId !== undefined && args.targetId !== null) {
      this.targetId = args.targetId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field targetId is unset!');
    }
    if (args.refName !== undefined && args.refName !== null) {
      this.refName = args.refName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refName is unset!');
    }
  }
};
HawkReferenceRemovalEvent.prototype = {};
HawkReferenceRemovalEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.refName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkReferenceRemovalEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkReferenceRemovalEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceId !== null && this.sourceId !== undefined) {
    output.writeFieldBegin('sourceId', Thrift.Type.STRING, 2);
    output.writeString(this.sourceId);
    output.writeFieldEnd();
  }
  if (this.targetId !== null && this.targetId !== undefined) {
    output.writeFieldBegin('targetId', Thrift.Type.STRING, 3);
    output.writeString(this.targetId);
    output.writeFieldEnd();
  }
  if (this.refName !== null && this.refName !== undefined) {
    output.writeFieldBegin('refName', Thrift.Type.STRING, 4);
    output.writeString(this.refName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidModelSpec = function(args) {
  this.spec = null;
  this.reason = null;
  if (args) {
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new ModelSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidModelSpec, Thrift.TException);
InvalidModelSpec.prototype.name = 'InvalidModelSpec';
InvalidModelSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ModelSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidModelSpec.prototype.write = function(output) {
  output.writeStructBegin('InvalidModelSpec');
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 1);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelElementType = function(args) {
  this.id = null;
  this.metamodelUri = null;
  this.typeName = null;
  this.attributes = null;
  this.references = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.metamodelUri !== undefined && args.metamodelUri !== null) {
      this.metamodelUri = args.metamodelUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelUri is unset!');
    }
    if (args.typeName !== undefined && args.typeName !== null) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyList(args.attributes, [SlotMetadata]);
    }
    if (args.references !== undefined && args.references !== null) {
      this.references = Thrift.copyList(args.references, [SlotMetadata]);
    }
  }
};
ModelElementType.prototype = {};
ModelElementType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.attributes = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new SlotMetadata();
          elem62.read(input);
          this.attributes.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.references = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new SlotMetadata();
          elem69.read(input);
          this.references.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelElementType.prototype.write = function(output) {
  output.writeStructBegin('ModelElementType');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.metamodelUri !== null && this.metamodelUri !== undefined) {
    output.writeFieldBegin('metamodelUri', Thrift.Type.STRING, 2);
    output.writeString(this.metamodelUri);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 3);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter70 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter70))
      {
        iter70 = this.attributes[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.references !== null && this.references !== undefined) {
    output.writeFieldBegin('references', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.references.length);
    for (var iter71 in this.references)
    {
      if (this.references.hasOwnProperty(iter71))
      {
        iter71 = this.references[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReferenceSlot = function(args) {
  this.name = null;
  this.position = null;
  this.positions = null;
  this.id = null;
  this.ids = null;
  this.mixed = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
    if (args.positions !== undefined && args.positions !== null) {
      this.positions = Thrift.copyList(args.positions, [null]);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
    if (args.mixed !== undefined && args.mixed !== null) {
      this.mixed = Thrift.copyList(args.mixed, [MixedReference]);
    }
  }
};
ReferenceSlot.prototype = {};
ReferenceSlot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.positions = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readI32().value;
          this.positions.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.ids = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = input.readString().value;
          this.ids.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.mixed = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new MixedReference();
          elem92.read(input);
          this.mixed.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReferenceSlot.prototype.write = function(output) {
  output.writeStructBegin('ReferenceSlot');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 2);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.positions !== null && this.positions !== undefined) {
    output.writeFieldBegin('positions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.positions.length);
    for (var iter93 in this.positions)
    {
      if (this.positions.hasOwnProperty(iter93))
      {
        iter93 = this.positions[iter93];
        output.writeI32(iter93);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter94 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter94))
      {
        iter94 = this.ids[iter94];
        output.writeString(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mixed !== null && this.mixed !== undefined) {
    output.writeFieldBegin('mixed', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.mixed.length);
    for (var iter95 in this.mixed)
    {
      if (this.mixed.hasOwnProperty(iter95))
      {
        iter95 = this.mixed[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkChangeEvent = function(args) {
  this.modelElementAddition = null;
  this.modelElementRemoval = null;
  this.modelElementAttributeUpdate = null;
  this.modelElementAttributeRemoval = null;
  this.referenceAddition = null;
  this.referenceRemoval = null;
  this.syncStart = null;
  this.syncEnd = null;
  this.fileAddition = null;
  this.fileRemoval = null;
  if (args) {
    if (args.modelElementAddition !== undefined && args.modelElementAddition !== null) {
      this.modelElementAddition = new HawkModelElementAdditionEvent(args.modelElementAddition);
    }
    if (args.modelElementRemoval !== undefined && args.modelElementRemoval !== null) {
      this.modelElementRemoval = new HawkModelElementRemovalEvent(args.modelElementRemoval);
    }
    if (args.modelElementAttributeUpdate !== undefined && args.modelElementAttributeUpdate !== null) {
      this.modelElementAttributeUpdate = new HawkAttributeUpdateEvent(args.modelElementAttributeUpdate);
    }
    if (args.modelElementAttributeRemoval !== undefined && args.modelElementAttributeRemoval !== null) {
      this.modelElementAttributeRemoval = new HawkAttributeRemovalEvent(args.modelElementAttributeRemoval);
    }
    if (args.referenceAddition !== undefined && args.referenceAddition !== null) {
      this.referenceAddition = new HawkReferenceAdditionEvent(args.referenceAddition);
    }
    if (args.referenceRemoval !== undefined && args.referenceRemoval !== null) {
      this.referenceRemoval = new HawkReferenceRemovalEvent(args.referenceRemoval);
    }
    if (args.syncStart !== undefined && args.syncStart !== null) {
      this.syncStart = new HawkSynchronizationStartEvent(args.syncStart);
    }
    if (args.syncEnd !== undefined && args.syncEnd !== null) {
      this.syncEnd = new HawkSynchronizationEndEvent(args.syncEnd);
    }
    if (args.fileAddition !== undefined && args.fileAddition !== null) {
      this.fileAddition = new HawkFileAdditionEvent(args.fileAddition);
    }
    if (args.fileRemoval !== undefined && args.fileRemoval !== null) {
      this.fileRemoval = new HawkFileRemovalEvent(args.fileRemoval);
    }
  }
};
HawkChangeEvent.prototype = {};
HawkChangeEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelElementAddition = new HawkModelElementAdditionEvent();
        this.modelElementAddition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelElementRemoval = new HawkModelElementRemovalEvent();
        this.modelElementRemoval.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelElementAttributeUpdate = new HawkAttributeUpdateEvent();
        this.modelElementAttributeUpdate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelElementAttributeRemoval = new HawkAttributeRemovalEvent();
        this.modelElementAttributeRemoval.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.referenceAddition = new HawkReferenceAdditionEvent();
        this.referenceAddition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.referenceRemoval = new HawkReferenceRemovalEvent();
        this.referenceRemoval.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.syncStart = new HawkSynchronizationStartEvent();
        this.syncStart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.syncEnd = new HawkSynchronizationEndEvent();
        this.syncEnd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.fileAddition = new HawkFileAdditionEvent();
        this.fileAddition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.fileRemoval = new HawkFileRemovalEvent();
        this.fileRemoval.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkChangeEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkChangeEvent');
  if (this.modelElementAddition !== null && this.modelElementAddition !== undefined) {
    output.writeFieldBegin('modelElementAddition', Thrift.Type.STRUCT, 1);
    this.modelElementAddition.write(output);
    output.writeFieldEnd();
  }
  if (this.modelElementRemoval !== null && this.modelElementRemoval !== undefined) {
    output.writeFieldBegin('modelElementRemoval', Thrift.Type.STRUCT, 2);
    this.modelElementRemoval.write(output);
    output.writeFieldEnd();
  }
  if (this.modelElementAttributeUpdate !== null && this.modelElementAttributeUpdate !== undefined) {
    output.writeFieldBegin('modelElementAttributeUpdate', Thrift.Type.STRUCT, 3);
    this.modelElementAttributeUpdate.write(output);
    output.writeFieldEnd();
  }
  if (this.modelElementAttributeRemoval !== null && this.modelElementAttributeRemoval !== undefined) {
    output.writeFieldBegin('modelElementAttributeRemoval', Thrift.Type.STRUCT, 4);
    this.modelElementAttributeRemoval.write(output);
    output.writeFieldEnd();
  }
  if (this.referenceAddition !== null && this.referenceAddition !== undefined) {
    output.writeFieldBegin('referenceAddition', Thrift.Type.STRUCT, 5);
    this.referenceAddition.write(output);
    output.writeFieldEnd();
  }
  if (this.referenceRemoval !== null && this.referenceRemoval !== undefined) {
    output.writeFieldBegin('referenceRemoval', Thrift.Type.STRUCT, 6);
    this.referenceRemoval.write(output);
    output.writeFieldEnd();
  }
  if (this.syncStart !== null && this.syncStart !== undefined) {
    output.writeFieldBegin('syncStart', Thrift.Type.STRUCT, 7);
    this.syncStart.write(output);
    output.writeFieldEnd();
  }
  if (this.syncEnd !== null && this.syncEnd !== undefined) {
    output.writeFieldBegin('syncEnd', Thrift.Type.STRUCT, 8);
    this.syncEnd.write(output);
    output.writeFieldEnd();
  }
  if (this.fileAddition !== null && this.fileAddition !== undefined) {
    output.writeFieldBegin('fileAddition', Thrift.Type.STRUCT, 9);
    this.fileAddition.write(output);
    output.writeFieldEnd();
  }
  if (this.fileRemoval !== null && this.fileRemoval !== undefined) {
    output.writeFieldBegin('fileRemoval', Thrift.Type.STRUCT, 10);
    this.fileRemoval.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkQueryOptions = function(args) {
  this.repositoryPattern = '*';
  this.filePatterns = null;
  this.defaultNamespaces = null;
  this.includeAttributes = true;
  this.includeReferences = true;
  this.includeNodeIDs = false;
  this.includeContained = true;
  this.effectiveMetamodelIncludes = null;
  this.effectiveMetamodelExcludes = null;
  if (args) {
    if (args.repositoryPattern !== undefined && args.repositoryPattern !== null) {
      this.repositoryPattern = args.repositoryPattern;
    }
    if (args.filePatterns !== undefined && args.filePatterns !== null) {
      this.filePatterns = Thrift.copyList(args.filePatterns, [null]);
    }
    if (args.defaultNamespaces !== undefined && args.defaultNamespaces !== null) {
      this.defaultNamespaces = args.defaultNamespaces;
    }
    if (args.includeAttributes !== undefined && args.includeAttributes !== null) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeReferences !== undefined && args.includeReferences !== null) {
      this.includeReferences = args.includeReferences;
    }
    if (args.includeNodeIDs !== undefined && args.includeNodeIDs !== null) {
      this.includeNodeIDs = args.includeNodeIDs;
    }
    if (args.includeContained !== undefined && args.includeContained !== null) {
      this.includeContained = args.includeContained;
    }
    if (args.effectiveMetamodelIncludes !== undefined && args.effectiveMetamodelIncludes !== null) {
      this.effectiveMetamodelIncludes = Thrift.copyMap(args.effectiveMetamodelIncludes, [Thrift.copyMap, Thrift.copyList, null]);
    }
    if (args.effectiveMetamodelExcludes !== undefined && args.effectiveMetamodelExcludes !== null) {
      this.effectiveMetamodelExcludes = Thrift.copyMap(args.effectiveMetamodelExcludes, [Thrift.copyMap, Thrift.copyList, null]);
    }
  }
};
HawkQueryOptions.prototype = {};
HawkQueryOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.filePatterns = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString().value;
          this.filePatterns.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.defaultNamespaces = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeReferences = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNodeIDs = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContained = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size103 = 0;
        var _rtmp3107;
        this.effectiveMetamodelIncludes = {};
        var _ktype104 = 0;
        var _vtype105 = 0;
        _rtmp3107 = input.readMapBegin();
        _ktype104 = _rtmp3107.ktype;
        _vtype105 = _rtmp3107.vtype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          if (_i108 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key109 = null;
          var val110 = null;
          key109 = input.readString().value;
          var _size111 = 0;
          var _rtmp3115;
          val110 = {};
          var _ktype112 = 0;
          var _vtype113 = 0;
          _rtmp3115 = input.readMapBegin();
          _ktype112 = _rtmp3115.ktype;
          _vtype113 = _rtmp3115.vtype;
          _size111 = _rtmp3115.size;
          for (var _i116 = 0; _i116 < _size111; ++_i116)
          {
            if (_i116 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key117 = null;
            var val118 = null;
            key117 = input.readString().value;
            var _size119 = 0;
            var _rtmp3123;
            val118 = [];
            var _etype122 = 0;
            _rtmp3123 = input.readSetBegin();
            _etype122 = _rtmp3123.etype;
            _size119 = _rtmp3123.size;
            for (var _i124 = 0; _i124 < _size119; ++_i124)
            {
              var elem125 = null;
              elem125 = input.readString().value;
              val118.push(elem125);
            }
            input.readSetEnd();
            val110[key117] = val118;
          }
          input.readMapEnd();
          this.effectiveMetamodelIncludes[key109] = val110;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size126 = 0;
        var _rtmp3130;
        this.effectiveMetamodelExcludes = {};
        var _ktype127 = 0;
        var _vtype128 = 0;
        _rtmp3130 = input.readMapBegin();
        _ktype127 = _rtmp3130.ktype;
        _vtype128 = _rtmp3130.vtype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          if (_i131 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key132 = null;
          var val133 = null;
          key132 = input.readString().value;
          var _size134 = 0;
          var _rtmp3138;
          val133 = {};
          var _ktype135 = 0;
          var _vtype136 = 0;
          _rtmp3138 = input.readMapBegin();
          _ktype135 = _rtmp3138.ktype;
          _vtype136 = _rtmp3138.vtype;
          _size134 = _rtmp3138.size;
          for (var _i139 = 0; _i139 < _size134; ++_i139)
          {
            if (_i139 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key140 = null;
            var val141 = null;
            key140 = input.readString().value;
            var _size142 = 0;
            var _rtmp3146;
            val141 = [];
            var _etype145 = 0;
            _rtmp3146 = input.readSetBegin();
            _etype145 = _rtmp3146.etype;
            _size142 = _rtmp3146.size;
            for (var _i147 = 0; _i147 < _size142; ++_i147)
            {
              var elem148 = null;
              elem148 = input.readString().value;
              val141.push(elem148);
            }
            input.readSetEnd();
            val133[key140] = val141;
          }
          input.readMapEnd();
          this.effectiveMetamodelExcludes[key132] = val133;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkQueryOptions.prototype.write = function(output) {
  output.writeStructBegin('HawkQueryOptions');
  if (this.repositoryPattern !== null && this.repositoryPattern !== undefined) {
    output.writeFieldBegin('repositoryPattern', Thrift.Type.STRING, 1);
    output.writeString(this.repositoryPattern);
    output.writeFieldEnd();
  }
  if (this.filePatterns !== null && this.filePatterns !== undefined) {
    output.writeFieldBegin('filePatterns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.filePatterns.length);
    for (var iter149 in this.filePatterns)
    {
      if (this.filePatterns.hasOwnProperty(iter149))
      {
        iter149 = this.filePatterns[iter149];
        output.writeString(iter149);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.defaultNamespaces !== null && this.defaultNamespaces !== undefined) {
    output.writeFieldBegin('defaultNamespaces', Thrift.Type.STRING, 3);
    output.writeString(this.defaultNamespaces);
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeReferences !== null && this.includeReferences !== undefined) {
    output.writeFieldBegin('includeReferences', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeReferences);
    output.writeFieldEnd();
  }
  if (this.includeNodeIDs !== null && this.includeNodeIDs !== undefined) {
    output.writeFieldBegin('includeNodeIDs', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeNodeIDs);
    output.writeFieldEnd();
  }
  if (this.includeContained !== null && this.includeContained !== undefined) {
    output.writeFieldBegin('includeContained', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeContained);
    output.writeFieldEnd();
  }
  if (this.effectiveMetamodelIncludes !== null && this.effectiveMetamodelIncludes !== undefined) {
    output.writeFieldBegin('effectiveMetamodelIncludes', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.effectiveMetamodelIncludes));
    for (var kiter150 in this.effectiveMetamodelIncludes)
    {
      if (this.effectiveMetamodelIncludes.hasOwnProperty(kiter150))
      {
        var viter151 = this.effectiveMetamodelIncludes[kiter150];
        output.writeString(kiter150);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter151));
        for (var kiter152 in viter151)
        {
          if (viter151.hasOwnProperty(kiter152))
          {
            var viter153 = viter151[kiter152];
            output.writeString(kiter152);
            output.writeSetBegin(Thrift.Type.STRING, viter153.length);
            for (var iter154 in viter153)
            {
              if (viter153.hasOwnProperty(iter154))
              {
                iter154 = viter153[iter154];
                output.writeString(iter154);
              }
            }
            output.writeSetEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.effectiveMetamodelExcludes !== null && this.effectiveMetamodelExcludes !== undefined) {
    output.writeFieldBegin('effectiveMetamodelExcludes', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.effectiveMetamodelExcludes));
    for (var kiter155 in this.effectiveMetamodelExcludes)
    {
      if (this.effectiveMetamodelExcludes.hasOwnProperty(kiter155))
      {
        var viter156 = this.effectiveMetamodelExcludes[kiter155];
        output.writeString(kiter155);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter156));
        for (var kiter157 in viter156)
        {
          if (viter156.hasOwnProperty(kiter157))
          {
            var viter158 = viter156[kiter157];
            output.writeString(kiter157);
            output.writeSetBegin(Thrift.Type.STRING, viter158.length);
            for (var iter159 in viter158)
            {
              if (viter158.hasOwnProperty(iter159))
              {
                iter159 = viter158[iter159];
                output.writeString(iter159);
              }
            }
            output.writeSetEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFCExportOptions = function(args) {
  this.repositoryPattern = '*';
  this.filePatterns = null;
  this.includeRules = null;
  this.excludeRules = null;
  if (args) {
    if (args.repositoryPattern !== undefined && args.repositoryPattern !== null) {
      this.repositoryPattern = args.repositoryPattern;
    }
    if (args.filePatterns !== undefined && args.filePatterns !== null) {
      this.filePatterns = Thrift.copyList(args.filePatterns, [null]);
    }
    if (args.includeRules !== undefined && args.includeRules !== null) {
      this.includeRules = Thrift.copyMap(args.includeRules, [Thrift.copyMap, Thrift.copyList, null]);
    }
    if (args.excludeRules !== undefined && args.excludeRules !== null) {
      this.excludeRules = Thrift.copyMap(args.excludeRules, [Thrift.copyMap, Thrift.copyList, null]);
    }
  }
};
IFCExportOptions.prototype = {};
IFCExportOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.filePatterns = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readString().value;
          this.filePatterns.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size167 = 0;
        var _rtmp3171;
        this.includeRules = {};
        var _ktype168 = 0;
        var _vtype169 = 0;
        _rtmp3171 = input.readMapBegin();
        _ktype168 = _rtmp3171.ktype;
        _vtype169 = _rtmp3171.vtype;
        _size167 = _rtmp3171.size;
        for (var _i172 = 0; _i172 < _size167; ++_i172)
        {
          if (_i172 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key173 = null;
          var val174 = null;
          key173 = input.readString().value;
          var _size175 = 0;
          var _rtmp3179;
          val174 = {};
          var _ktype176 = 0;
          var _vtype177 = 0;
          _rtmp3179 = input.readMapBegin();
          _ktype176 = _rtmp3179.ktype;
          _vtype177 = _rtmp3179.vtype;
          _size175 = _rtmp3179.size;
          for (var _i180 = 0; _i180 < _size175; ++_i180)
          {
            if (_i180 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key181 = null;
            var val182 = null;
            key181 = input.readString().value;
            var _size183 = 0;
            var _rtmp3187;
            val182 = [];
            var _etype186 = 0;
            _rtmp3187 = input.readSetBegin();
            _etype186 = _rtmp3187.etype;
            _size183 = _rtmp3187.size;
            for (var _i188 = 0; _i188 < _size183; ++_i188)
            {
              var elem189 = null;
              elem189 = input.readString().value;
              val182.push(elem189);
            }
            input.readSetEnd();
            val174[key181] = val182;
          }
          input.readMapEnd();
          this.includeRules[key173] = val174;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size190 = 0;
        var _rtmp3194;
        this.excludeRules = {};
        var _ktype191 = 0;
        var _vtype192 = 0;
        _rtmp3194 = input.readMapBegin();
        _ktype191 = _rtmp3194.ktype;
        _vtype192 = _rtmp3194.vtype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          if (_i195 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key196 = null;
          var val197 = null;
          key196 = input.readString().value;
          var _size198 = 0;
          var _rtmp3202;
          val197 = {};
          var _ktype199 = 0;
          var _vtype200 = 0;
          _rtmp3202 = input.readMapBegin();
          _ktype199 = _rtmp3202.ktype;
          _vtype200 = _rtmp3202.vtype;
          _size198 = _rtmp3202.size;
          for (var _i203 = 0; _i203 < _size198; ++_i203)
          {
            if (_i203 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key204 = null;
            var val205 = null;
            key204 = input.readString().value;
            var _size206 = 0;
            var _rtmp3210;
            val205 = [];
            var _etype209 = 0;
            _rtmp3210 = input.readSetBegin();
            _etype209 = _rtmp3210.etype;
            _size206 = _rtmp3210.size;
            for (var _i211 = 0; _i211 < _size206; ++_i211)
            {
              var elem212 = null;
              elem212 = input.readString().value;
              val205.push(elem212);
            }
            input.readSetEnd();
            val197[key204] = val205;
          }
          input.readMapEnd();
          this.excludeRules[key196] = val197;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFCExportOptions.prototype.write = function(output) {
  output.writeStructBegin('IFCExportOptions');
  if (this.repositoryPattern !== null && this.repositoryPattern !== undefined) {
    output.writeFieldBegin('repositoryPattern', Thrift.Type.STRING, 1);
    output.writeString(this.repositoryPattern);
    output.writeFieldEnd();
  }
  if (this.filePatterns !== null && this.filePatterns !== undefined) {
    output.writeFieldBegin('filePatterns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.filePatterns.length);
    for (var iter213 in this.filePatterns)
    {
      if (this.filePatterns.hasOwnProperty(iter213))
      {
        iter213 = this.filePatterns[iter213];
        output.writeString(iter213);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.includeRules !== null && this.includeRules !== undefined) {
    output.writeFieldBegin('includeRules', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.includeRules));
    for (var kiter214 in this.includeRules)
    {
      if (this.includeRules.hasOwnProperty(kiter214))
      {
        var viter215 = this.includeRules[kiter214];
        output.writeString(kiter214);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter215));
        for (var kiter216 in viter215)
        {
          if (viter215.hasOwnProperty(kiter216))
          {
            var viter217 = viter215[kiter216];
            output.writeString(kiter216);
            output.writeSetBegin(Thrift.Type.STRING, viter217.length);
            for (var iter218 in viter217)
            {
              if (viter217.hasOwnProperty(iter218))
              {
                iter218 = viter217[iter218];
                output.writeString(iter218);
              }
            }
            output.writeSetEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.excludeRules !== null && this.excludeRules !== undefined) {
    output.writeFieldBegin('excludeRules', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.excludeRules));
    for (var kiter219 in this.excludeRules)
    {
      if (this.excludeRules.hasOwnProperty(kiter219))
      {
        var viter220 = this.excludeRules[kiter219];
        output.writeString(kiter219);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter220));
        for (var kiter221 in viter220)
        {
          if (viter220.hasOwnProperty(kiter221))
          {
            var viter222 = viter220[kiter221];
            output.writeString(kiter221);
            output.writeSetBegin(Thrift.Type.STRING, viter222.length);
            for (var iter223 in viter222)
            {
              if (viter222.hasOwnProperty(iter223))
              {
                iter223 = viter222[iter223];
                output.writeString(iter223);
              }
            }
            output.writeSetEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelElement = function(args) {
  this.id = null;
  this.repositoryURL = null;
  this.file = null;
  this.metamodelUri = null;
  this.typeName = null;
  this.attributes = null;
  this.references = null;
  this.containers = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.repositoryURL !== undefined && args.repositoryURL !== null) {
      this.repositoryURL = args.repositoryURL;
    }
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
    if (args.metamodelUri !== undefined && args.metamodelUri !== null) {
      this.metamodelUri = args.metamodelUri;
    }
    if (args.typeName !== undefined && args.typeName !== null) {
      this.typeName = args.typeName;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyList(args.attributes, [AttributeSlot]);
    }
    if (args.references !== undefined && args.references !== null) {
      this.references = Thrift.copyList(args.references, [ReferenceSlot]);
    }
    if (args.containers !== undefined && args.containers !== null) {
      this.containers = Thrift.copyList(args.containers, [null]);
    }
  }
};
ModelElement.prototype = {};
ModelElement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.attributes = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = new AttributeSlot();
          elem230.read(input);
          this.attributes.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size231 = 0;
        var _rtmp3235;
        this.references = [];
        var _etype234 = 0;
        _rtmp3235 = input.readListBegin();
        _etype234 = _rtmp3235.etype;
        _size231 = _rtmp3235.size;
        for (var _i236 = 0; _i236 < _size231; ++_i236)
        {
          var elem237 = null;
          elem237 = new ReferenceSlot();
          elem237.read(input);
          this.references.push(elem237);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size238 = 0;
        var _rtmp3242;
        this.containers = [];
        var _etype241 = 0;
        _rtmp3242 = input.readListBegin();
        _etype241 = _rtmp3242.etype;
        _size238 = _rtmp3242.size;
        for (var _i243 = 0; _i243 < _size238; ++_i243)
        {
          var elem244 = null;
          elem244 = new ContainerSlot();
          elem244.read(input);
          this.containers.push(elem244);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelElement.prototype.write = function(output) {
  output.writeStructBegin('ModelElement');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.repositoryURL !== null && this.repositoryURL !== undefined) {
    output.writeFieldBegin('repositoryURL', Thrift.Type.STRING, 2);
    output.writeString(this.repositoryURL);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 3);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  if (this.metamodelUri !== null && this.metamodelUri !== undefined) {
    output.writeFieldBegin('metamodelUri', Thrift.Type.STRING, 4);
    output.writeString(this.metamodelUri);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 5);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter245 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter245))
      {
        iter245 = this.attributes[iter245];
        iter245.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.references !== null && this.references !== undefined) {
    output.writeFieldBegin('references', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.references.length);
    for (var iter246 in this.references)
    {
      if (this.references.hasOwnProperty(iter246))
      {
        iter246 = this.references[iter246];
        iter246.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.containers !== null && this.containers !== undefined) {
    output.writeFieldBegin('containers', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.containers.length);
    for (var iter247 in this.containers)
    {
      if (this.containers.hasOwnProperty(iter247))
      {
        iter247 = this.containers[iter247];
        iter247.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContainerSlot = function(args) {
  this.name = null;
  this.elements = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.elements !== undefined && args.elements !== null) {
      this.elements = Thrift.copyList(args.elements, [ModelElement]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field elements is unset!');
    }
  }
};
ContainerSlot.prototype = {};
ContainerSlot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.elements = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = new ModelElement();
          elem254.read(input);
          this.elements.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContainerSlot.prototype.write = function(output) {
  output.writeStructBegin('ContainerSlot');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.elements !== null && this.elements !== undefined) {
    output.writeFieldBegin('elements', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.elements.length);
    for (var iter255 in this.elements)
    {
      if (this.elements.hasOwnProperty(iter255))
      {
        iter255 = this.elements[iter255];
        iter255.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryResult = function(args) {
  this.vBoolean = null;
  this.vByte = null;
  this.vShort = null;
  this.vInteger = null;
  this.vLong = null;
  this.vDouble = null;
  this.vString = null;
  this.vModelElement = null;
  this.vModelElementType = null;
  if (args) {
    if (args.vBoolean !== undefined && args.vBoolean !== null) {
      this.vBoolean = args.vBoolean;
    }
    if (args.vByte !== undefined && args.vByte !== null) {
      this.vByte = args.vByte;
    }
    if (args.vShort !== undefined && args.vShort !== null) {
      this.vShort = args.vShort;
    }
    if (args.vInteger !== undefined && args.vInteger !== null) {
      this.vInteger = args.vInteger;
    }
    if (args.vLong !== undefined && args.vLong !== null) {
      this.vLong = args.vLong;
    }
    if (args.vDouble !== undefined && args.vDouble !== null) {
      this.vDouble = args.vDouble;
    }
    if (args.vString !== undefined && args.vString !== null) {
      this.vString = args.vString;
    }
    if (args.vModelElement !== undefined && args.vModelElement !== null) {
      this.vModelElement = new ModelElement(args.vModelElement);
    }
    if (args.vModelElementType !== undefined && args.vModelElementType !== null) {
      this.vModelElementType = new ModelElementType(args.vModelElementType);
    }
  }
};
QueryResult.prototype = {};
QueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.vBoolean = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.vByte = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.vShort = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.vInteger = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.vLong = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.vDouble = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.vString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.vModelElement = new ModelElement();
        this.vModelElement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.vModelElementType = new ModelElementType();
        this.vModelElementType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryResult.prototype.write = function(output) {
  output.writeStructBegin('QueryResult');
  if (this.vBoolean !== null && this.vBoolean !== undefined) {
    output.writeFieldBegin('vBoolean', Thrift.Type.BOOL, 1);
    output.writeBool(this.vBoolean);
    output.writeFieldEnd();
  }
  if (this.vByte !== null && this.vByte !== undefined) {
    output.writeFieldBegin('vByte', Thrift.Type.BYTE, 2);
    output.writeByte(this.vByte);
    output.writeFieldEnd();
  }
  if (this.vShort !== null && this.vShort !== undefined) {
    output.writeFieldBegin('vShort', Thrift.Type.I16, 3);
    output.writeI16(this.vShort);
    output.writeFieldEnd();
  }
  if (this.vInteger !== null && this.vInteger !== undefined) {
    output.writeFieldBegin('vInteger', Thrift.Type.I32, 4);
    output.writeI32(this.vInteger);
    output.writeFieldEnd();
  }
  if (this.vLong !== null && this.vLong !== undefined) {
    output.writeFieldBegin('vLong', Thrift.Type.I64, 5);
    output.writeI64(this.vLong);
    output.writeFieldEnd();
  }
  if (this.vDouble !== null && this.vDouble !== undefined) {
    output.writeFieldBegin('vDouble', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.vDouble);
    output.writeFieldEnd();
  }
  if (this.vString !== null && this.vString !== undefined) {
    output.writeFieldBegin('vString', Thrift.Type.STRING, 7);
    output.writeString(this.vString);
    output.writeFieldEnd();
  }
  if (this.vModelElement !== null && this.vModelElement !== undefined) {
    output.writeFieldBegin('vModelElement', Thrift.Type.STRUCT, 8);
    this.vModelElement.write(output);
    output.writeFieldEnd();
  }
  if (this.vModelElementType !== null && this.vModelElementType !== undefined) {
    output.writeFieldBegin('vModelElementType', Thrift.Type.STRUCT, 9);
    this.vModelElementType.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

