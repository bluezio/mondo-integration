/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package uk.ac.york.mondo.integration.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-27")
public class OfflineCollaboration {

  public interface Iface {

    public void addRule(String repoURL, CollaborationRule rule) throws org.apache.thrift.TException;

    public void removeRule(String repoURL, String ruleName) throws CollaborationRuleNotFound, org.apache.thrift.TException;

    public void updateRule(String repoURL, CollaborationRule rule) throws CollaborationRuleNotFound, org.apache.thrift.TException;

    public List<CollaborationRule> listRules(String repoURL) throws org.apache.thrift.TException;

    public void regenerateFrontRepositories(String goldRepoURL) throws org.apache.thrift.TException;

    public void getMyFrontRepositoryURL(String goldRepoURL) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addRule(String repoURL, CollaborationRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeRule(String repoURL, String ruleName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRule(String repoURL, CollaborationRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listRules(String repoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void regenerateFrontRepositories(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyFrontRepositoryURL(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addRule(String repoURL, CollaborationRule rule) throws org.apache.thrift.TException
    {
      send_addRule(repoURL, rule);
      recv_addRule();
    }

    public void send_addRule(String repoURL, CollaborationRule rule) throws org.apache.thrift.TException
    {
      addRule_args args = new addRule_args();
      args.setRepoURL(repoURL);
      args.setRule(rule);
      sendBase("addRule", args);
    }

    public void recv_addRule() throws org.apache.thrift.TException
    {
      addRule_result result = new addRule_result();
      receiveBase(result, "addRule");
      return;
    }

    public void removeRule(String repoURL, String ruleName) throws CollaborationRuleNotFound, org.apache.thrift.TException
    {
      send_removeRule(repoURL, ruleName);
      recv_removeRule();
    }

    public void send_removeRule(String repoURL, String ruleName) throws org.apache.thrift.TException
    {
      removeRule_args args = new removeRule_args();
      args.setRepoURL(repoURL);
      args.setRuleName(ruleName);
      sendBase("removeRule", args);
    }

    public void recv_removeRule() throws CollaborationRuleNotFound, org.apache.thrift.TException
    {
      removeRule_result result = new removeRule_result();
      receiveBase(result, "removeRule");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public void updateRule(String repoURL, CollaborationRule rule) throws CollaborationRuleNotFound, org.apache.thrift.TException
    {
      send_updateRule(repoURL, rule);
      recv_updateRule();
    }

    public void send_updateRule(String repoURL, CollaborationRule rule) throws org.apache.thrift.TException
    {
      updateRule_args args = new updateRule_args();
      args.setRepoURL(repoURL);
      args.setRule(rule);
      sendBase("updateRule", args);
    }

    public void recv_updateRule() throws CollaborationRuleNotFound, org.apache.thrift.TException
    {
      updateRule_result result = new updateRule_result();
      receiveBase(result, "updateRule");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public List<CollaborationRule> listRules(String repoURL) throws org.apache.thrift.TException
    {
      send_listRules(repoURL);
      return recv_listRules();
    }

    public void send_listRules(String repoURL) throws org.apache.thrift.TException
    {
      listRules_args args = new listRules_args();
      args.setRepoURL(repoURL);
      sendBase("listRules", args);
    }

    public List<CollaborationRule> recv_listRules() throws org.apache.thrift.TException
    {
      listRules_result result = new listRules_result();
      receiveBase(result, "listRules");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listRules failed: unknown result");
    }

    public void regenerateFrontRepositories(String goldRepoURL) throws org.apache.thrift.TException
    {
      send_regenerateFrontRepositories(goldRepoURL);
      recv_regenerateFrontRepositories();
    }

    public void send_regenerateFrontRepositories(String goldRepoURL) throws org.apache.thrift.TException
    {
      regenerateFrontRepositories_args args = new regenerateFrontRepositories_args();
      args.setGoldRepoURL(goldRepoURL);
      sendBase("regenerateFrontRepositories", args);
    }

    public void recv_regenerateFrontRepositories() throws org.apache.thrift.TException
    {
      regenerateFrontRepositories_result result = new regenerateFrontRepositories_result();
      receiveBase(result, "regenerateFrontRepositories");
      return;
    }

    public void getMyFrontRepositoryURL(String goldRepoURL) throws org.apache.thrift.TException
    {
      send_getMyFrontRepositoryURL(goldRepoURL);
      recv_getMyFrontRepositoryURL();
    }

    public void send_getMyFrontRepositoryURL(String goldRepoURL) throws org.apache.thrift.TException
    {
      getMyFrontRepositoryURL_args args = new getMyFrontRepositoryURL_args();
      args.setGoldRepoURL(goldRepoURL);
      sendBase("getMyFrontRepositoryURL", args);
    }

    public void recv_getMyFrontRepositoryURL() throws org.apache.thrift.TException
    {
      getMyFrontRepositoryURL_result result = new getMyFrontRepositoryURL_result();
      receiveBase(result, "getMyFrontRepositoryURL");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addRule(String repoURL, CollaborationRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRule_call method_call = new addRule_call(repoURL, rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String repoURL;
      private CollaborationRule rule;
      public addRule_call(String repoURL, CollaborationRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repoURL = repoURL;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRule_args args = new addRule_args();
        args.setRepoURL(repoURL);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addRule();
      }
    }

    public void removeRule(String repoURL, String ruleName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeRule_call method_call = new removeRule_call(repoURL, ruleName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String repoURL;
      private String ruleName;
      public removeRule_call(String repoURL, String ruleName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repoURL = repoURL;
        this.ruleName = ruleName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeRule_args args = new removeRule_args();
        args.setRepoURL(repoURL);
        args.setRuleName(ruleName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CollaborationRuleNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeRule();
      }
    }

    public void updateRule(String repoURL, CollaborationRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRule_call method_call = new updateRule_call(repoURL, rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String repoURL;
      private CollaborationRule rule;
      public updateRule_call(String repoURL, CollaborationRule rule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repoURL = repoURL;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRule_args args = new updateRule_args();
        args.setRepoURL(repoURL);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws CollaborationRuleNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateRule();
      }
    }

    public void listRules(String repoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listRules_call method_call = new listRules_call(repoURL, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listRules_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String repoURL;
      public listRules_call(String repoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repoURL = repoURL;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listRules", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listRules_args args = new listRules_args();
        args.setRepoURL(repoURL);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollaborationRule> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listRules();
      }
    }

    public void regenerateFrontRepositories(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      regenerateFrontRepositories_call method_call = new regenerateFrontRepositories_call(goldRepoURL, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class regenerateFrontRepositories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String goldRepoURL;
      public regenerateFrontRepositories_call(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.goldRepoURL = goldRepoURL;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("regenerateFrontRepositories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        regenerateFrontRepositories_args args = new regenerateFrontRepositories_args();
        args.setGoldRepoURL(goldRepoURL);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_regenerateFrontRepositories();
      }
    }

    public void getMyFrontRepositoryURL(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyFrontRepositoryURL_call method_call = new getMyFrontRepositoryURL_call(goldRepoURL, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyFrontRepositoryURL_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String goldRepoURL;
      public getMyFrontRepositoryURL_call(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.goldRepoURL = goldRepoURL;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyFrontRepositoryURL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyFrontRepositoryURL_args args = new getMyFrontRepositoryURL_args();
        args.setGoldRepoURL(goldRepoURL);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_getMyFrontRepositoryURL();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addRule", new addRule());
      processMap.put("removeRule", new removeRule());
      processMap.put("updateRule", new updateRule());
      processMap.put("listRules", new listRules());
      processMap.put("regenerateFrontRepositories", new regenerateFrontRepositories());
      processMap.put("getMyFrontRepositoryURL", new getMyFrontRepositoryURL());
      return processMap;
    }

    public static class addRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRule_args> {
      public addRule() {
        super("addRule");
      }

      public addRule_args getEmptyArgsInstance() {
        return new addRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRule_result getResult(I iface, addRule_args args) throws org.apache.thrift.TException {
        addRule_result result = new addRule_result();
        iface.addRule(args.repoURL, args.rule);
        return result;
      }
    }

    public static class removeRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeRule_args> {
      public removeRule() {
        super("removeRule");
      }

      public removeRule_args getEmptyArgsInstance() {
        return new removeRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeRule_result getResult(I iface, removeRule_args args) throws org.apache.thrift.TException {
        removeRule_result result = new removeRule_result();
        try {
          iface.removeRule(args.repoURL, args.ruleName);
        } catch (CollaborationRuleNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class updateRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRule_args> {
      public updateRule() {
        super("updateRule");
      }

      public updateRule_args getEmptyArgsInstance() {
        return new updateRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRule_result getResult(I iface, updateRule_args args) throws org.apache.thrift.TException {
        updateRule_result result = new updateRule_result();
        try {
          iface.updateRule(args.repoURL, args.rule);
        } catch (CollaborationRuleNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class listRules<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listRules_args> {
      public listRules() {
        super("listRules");
      }

      public listRules_args getEmptyArgsInstance() {
        return new listRules_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listRules_result getResult(I iface, listRules_args args) throws org.apache.thrift.TException {
        listRules_result result = new listRules_result();
        result.success = iface.listRules(args.repoURL);
        return result;
      }
    }

    public static class regenerateFrontRepositories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, regenerateFrontRepositories_args> {
      public regenerateFrontRepositories() {
        super("regenerateFrontRepositories");
      }

      public regenerateFrontRepositories_args getEmptyArgsInstance() {
        return new regenerateFrontRepositories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public regenerateFrontRepositories_result getResult(I iface, regenerateFrontRepositories_args args) throws org.apache.thrift.TException {
        regenerateFrontRepositories_result result = new regenerateFrontRepositories_result();
        iface.regenerateFrontRepositories(args.goldRepoURL);
        return result;
      }
    }

    public static class getMyFrontRepositoryURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyFrontRepositoryURL_args> {
      public getMyFrontRepositoryURL() {
        super("getMyFrontRepositoryURL");
      }

      public getMyFrontRepositoryURL_args getEmptyArgsInstance() {
        return new getMyFrontRepositoryURL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyFrontRepositoryURL_result getResult(I iface, getMyFrontRepositoryURL_args args) throws org.apache.thrift.TException {
        getMyFrontRepositoryURL_result result = new getMyFrontRepositoryURL_result();
        iface.getMyFrontRepositoryURL(args.goldRepoURL);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addRule", new addRule());
      processMap.put("removeRule", new removeRule());
      processMap.put("updateRule", new updateRule());
      processMap.put("listRules", new listRules());
      processMap.put("regenerateFrontRepositories", new regenerateFrontRepositories());
      processMap.put("getMyFrontRepositoryURL", new getMyFrontRepositoryURL());
      return processMap;
    }

    public static class addRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRule_args, Void> {
      public addRule() {
        super("addRule");
      }

      public addRule_args getEmptyArgsInstance() {
        return new addRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addRule_result result = new addRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRule_result result = new addRule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addRule(args.repoURL, args.rule,resultHandler);
      }
    }

    public static class removeRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeRule_args, Void> {
      public removeRule() {
        super("removeRule");
      }

      public removeRule_args getEmptyArgsInstance() {
        return new removeRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeRule_result result = new removeRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeRule_result result = new removeRule_result();
            if (e instanceof CollaborationRuleNotFound) {
                        result.err1 = (CollaborationRuleNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeRule(args.repoURL, args.ruleName,resultHandler);
      }
    }

    public static class updateRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRule_args, Void> {
      public updateRule() {
        super("updateRule");
      }

      public updateRule_args getEmptyArgsInstance() {
        return new updateRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateRule_result result = new updateRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRule_result result = new updateRule_result();
            if (e instanceof CollaborationRuleNotFound) {
                        result.err1 = (CollaborationRuleNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateRule(args.repoURL, args.rule,resultHandler);
      }
    }

    public static class listRules<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listRules_args, List<CollaborationRule>> {
      public listRules() {
        super("listRules");
      }

      public listRules_args getEmptyArgsInstance() {
        return new listRules_args();
      }

      public AsyncMethodCallback<List<CollaborationRule>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollaborationRule>>() { 
          public void onComplete(List<CollaborationRule> o) {
            listRules_result result = new listRules_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listRules_result result = new listRules_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listRules_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollaborationRule>> resultHandler) throws TException {
        iface.listRules(args.repoURL,resultHandler);
      }
    }

    public static class regenerateFrontRepositories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, regenerateFrontRepositories_args, Void> {
      public regenerateFrontRepositories() {
        super("regenerateFrontRepositories");
      }

      public regenerateFrontRepositories_args getEmptyArgsInstance() {
        return new regenerateFrontRepositories_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            regenerateFrontRepositories_result result = new regenerateFrontRepositories_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            regenerateFrontRepositories_result result = new regenerateFrontRepositories_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, regenerateFrontRepositories_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.regenerateFrontRepositories(args.goldRepoURL,resultHandler);
      }
    }

    public static class getMyFrontRepositoryURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyFrontRepositoryURL_args, Void> {
      public getMyFrontRepositoryURL() {
        super("getMyFrontRepositoryURL");
      }

      public getMyFrontRepositoryURL_args getEmptyArgsInstance() {
        return new getMyFrontRepositoryURL_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            getMyFrontRepositoryURL_result result = new getMyFrontRepositoryURL_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyFrontRepositoryURL_result result = new getMyFrontRepositoryURL_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyFrontRepositoryURL_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.getMyFrontRepositoryURL(args.goldRepoURL,resultHandler);
      }
    }

      }

  public static class addRule_args implements org.apache.thrift.TBase<addRule_args, addRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRule_args");

    private static final org.apache.thrift.protocol.TField REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("repoURL", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRule_argsTupleSchemeFactory());
      }

    public String repoURL; // required
    public CollaborationRule rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPO_URL((short)1, "repoURL"),
      RULE((short)2, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPO_URL
            return REPO_URL;
          case 2: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("repoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRule_args.class, metaDataMap);
    }

    public addRule_args() {
    }

    public addRule_args(
      String repoURL,
      CollaborationRule rule)
    {
      this();
      this.repoURL = repoURL;
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRule_args(addRule_args other) {
      if (other.isSetRepoURL()) {
        this.repoURL = other.repoURL;
      }
      if (other.isSetRule()) {
        this.rule = new CollaborationRule(other.rule);
      }
    }

    public addRule_args deepCopy() {
      return new addRule_args(this);
    }

    @Override
    public void clear() {
      this.repoURL = null;
      this.rule = null;
    }

    public String getRepoURL() {
      return this.repoURL;
    }

    public addRule_args setRepoURL(String repoURL) {
      this.repoURL = repoURL;
      return this;
    }

    public void unsetRepoURL() {
      this.repoURL = null;
    }

    /** Returns true if field repoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoURL() {
      return this.repoURL != null;
    }

    public void setRepoURLIsSet(boolean value) {
      if (!value) {
        this.repoURL = null;
    }
    }

    public CollaborationRule getRule() {
      return this.rule;
    }

    public addRule_args setRule(CollaborationRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPO_URL:
        if (value == null) {
          unsetRepoURL();
        } else {
          setRepoURL((String)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((CollaborationRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPO_URL:
        return getRepoURL();

      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPO_URL:
        return isSetRepoURL();
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRule_args)
        return this.equals((addRule_args)that);
      return false;
    }

    public boolean equals(addRule_args that) {
      if (that == null)
        return false;

      boolean this_present_repoURL = true && this.isSetRepoURL();
      boolean that_present_repoURL = true && that.isSetRepoURL();
      if (this_present_repoURL || that_present_repoURL) {
        if (!(this_present_repoURL && that_present_repoURL))
          return false;
        if (!this.repoURL.equals(that.repoURL))
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repoURL = true && (isSetRepoURL());
      list.add(present_repoURL);
      if (present_repoURL)
        list.add(repoURL);

      boolean present_rule = true && (isSetRule());
      list.add(present_rule);
      if (present_rule)
        list.add(rule);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepoURL()).compareTo(other.isSetRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoURL, other.repoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRule_args(");
      boolean first = true;

      sb.append("repoURL:");
      if (this.repoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.repoURL);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (repoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'repoURL' was not present! Struct: " + toString());
      }
      if (rule == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rule' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRule_argsStandardSchemeFactory implements SchemeFactory {
      public addRule_argsStandardScheme getScheme() {
        return new addRule_argsStandardScheme();
      }
    }

    private static class addRule_argsStandardScheme extends StandardScheme<addRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoURL = iprot.readString();
                struct.setRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new CollaborationRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repoURL != null) {
          oprot.writeFieldBegin(REPO_URL_FIELD_DESC);
          oprot.writeString(struct.repoURL);
          oprot.writeFieldEnd();
        }
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRule_argsTupleSchemeFactory implements SchemeFactory {
      public addRule_argsTupleScheme getScheme() {
        return new addRule_argsTupleScheme();
      }
    }

    private static class addRule_argsTupleScheme extends TupleScheme<addRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.repoURL);
        struct.rule.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.repoURL = iprot.readString();
        struct.setRepoURLIsSet(true);
        struct.rule = new CollaborationRule();
        struct.rule.read(iprot);
        struct.setRuleIsSet(true);
      }
    }

  }

  public static class addRule_result implements org.apache.thrift.TBase<addRule_result, addRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRule_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRule_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRule_result.class, metaDataMap);
    }

    public addRule_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRule_result(addRule_result other) {
    }

    public addRule_result deepCopy() {
      return new addRule_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
    }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
    }

      switch (field) {
    }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRule_result)
        return this.equals((addRule_result)that);
      return false;
    }

    public boolean equals(addRule_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(addRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRule_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRule_resultStandardSchemeFactory implements SchemeFactory {
      public addRule_resultStandardScheme getScheme() {
        return new addRule_resultStandardScheme();
      }
    }

    private static class addRule_resultStandardScheme extends StandardScheme<addRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRule_resultTupleSchemeFactory implements SchemeFactory {
      public addRule_resultTupleScheme getScheme() {
        return new addRule_resultTupleScheme();
      }
    }

    private static class addRule_resultTupleScheme extends TupleScheme<addRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeRule_args implements org.apache.thrift.TBase<removeRule_args, removeRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeRule_args");

    private static final org.apache.thrift.protocol.TField REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("repoURL", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeRule_argsTupleSchemeFactory());
    }

    public String repoURL; // required
    public String ruleName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPO_URL((short)1, "repoURL"),
      RULE_NAME((short)2, "ruleName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPO_URL
            return REPO_URL;
          case 2: // RULE_NAME
            return RULE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("repoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RULE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ruleName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeRule_args.class, metaDataMap);
    }

    public removeRule_args() {
    }

    public removeRule_args(
      String repoURL,
      String ruleName)
    {
      this();
      this.repoURL = repoURL;
      this.ruleName = ruleName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeRule_args(removeRule_args other) {
      if (other.isSetRepoURL()) {
        this.repoURL = other.repoURL;
      }
      if (other.isSetRuleName()) {
        this.ruleName = other.ruleName;
      }
    }

    public removeRule_args deepCopy() {
      return new removeRule_args(this);
    }

    @Override
    public void clear() {
      this.repoURL = null;
      this.ruleName = null;
    }

    public String getRepoURL() {
      return this.repoURL;
    }

    public removeRule_args setRepoURL(String repoURL) {
      this.repoURL = repoURL;
      return this;
    }

    public void unsetRepoURL() {
      this.repoURL = null;
    }

    /** Returns true if field repoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoURL() {
      return this.repoURL != null;
    }

    public void setRepoURLIsSet(boolean value) {
      if (!value) {
        this.repoURL = null;
      }
    }

    public String getRuleName() {
      return this.ruleName;
    }

    public removeRule_args setRuleName(String ruleName) {
      this.ruleName = ruleName;
      return this;
    }

    public void unsetRuleName() {
      this.ruleName = null;
    }

    /** Returns true if field ruleName is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleName() {
      return this.ruleName != null;
    }

    public void setRuleNameIsSet(boolean value) {
      if (!value) {
        this.ruleName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPO_URL:
        if (value == null) {
          unsetRepoURL();
        } else {
          setRepoURL((String)value);
        }
        break;

      case RULE_NAME:
        if (value == null) {
          unsetRuleName();
        } else {
          setRuleName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPO_URL:
        return getRepoURL();

      case RULE_NAME:
        return getRuleName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPO_URL:
        return isSetRepoURL();
      case RULE_NAME:
        return isSetRuleName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeRule_args)
        return this.equals((removeRule_args)that);
      return false;
    }

    public boolean equals(removeRule_args that) {
      if (that == null)
        return false;

      boolean this_present_repoURL = true && this.isSetRepoURL();
      boolean that_present_repoURL = true && that.isSetRepoURL();
      if (this_present_repoURL || that_present_repoURL) {
        if (!(this_present_repoURL && that_present_repoURL))
          return false;
        if (!this.repoURL.equals(that.repoURL))
          return false;
      }

      boolean this_present_ruleName = true && this.isSetRuleName();
      boolean that_present_ruleName = true && that.isSetRuleName();
      if (this_present_ruleName || that_present_ruleName) {
        if (!(this_present_ruleName && that_present_ruleName))
          return false;
        if (!this.ruleName.equals(that.ruleName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repoURL = true && (isSetRepoURL());
      list.add(present_repoURL);
      if (present_repoURL)
        list.add(repoURL);

      boolean present_ruleName = true && (isSetRuleName());
      list.add(present_ruleName);
      if (present_ruleName)
        list.add(ruleName);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepoURL()).compareTo(other.isSetRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoURL, other.repoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleName()).compareTo(other.isSetRuleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleName, other.ruleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeRule_args(");
      boolean first = true;

      sb.append("repoURL:");
      if (this.repoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.repoURL);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleName:");
      if (this.ruleName == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (repoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'repoURL' was not present! Struct: " + toString());
      }
      if (ruleName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ruleName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeRule_argsStandardSchemeFactory implements SchemeFactory {
      public removeRule_argsStandardScheme getScheme() {
        return new removeRule_argsStandardScheme();
      }
    }

    private static class removeRule_argsStandardScheme extends StandardScheme<removeRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoURL = iprot.readString();
                struct.setRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ruleName = iprot.readString();
                struct.setRuleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repoURL != null) {
          oprot.writeFieldBegin(REPO_URL_FIELD_DESC);
          oprot.writeString(struct.repoURL);
          oprot.writeFieldEnd();
        }
        if (struct.ruleName != null) {
          oprot.writeFieldBegin(RULE_NAME_FIELD_DESC);
          oprot.writeString(struct.ruleName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeRule_argsTupleSchemeFactory implements SchemeFactory {
      public removeRule_argsTupleScheme getScheme() {
        return new removeRule_argsTupleScheme();
      }
    }

    private static class removeRule_argsTupleScheme extends TupleScheme<removeRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.repoURL);
        oprot.writeString(struct.ruleName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.repoURL = iprot.readString();
        struct.setRepoURLIsSet(true);
        struct.ruleName = iprot.readString();
        struct.setRuleNameIsSet(true);
      }
    }

  }

  public static class removeRule_result implements org.apache.thrift.TBase<removeRule_result, removeRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeRule_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeRule_resultTupleSchemeFactory());
    }

    public CollaborationRuleNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeRule_result.class, metaDataMap);
    }

    public removeRule_result() {
    }

    public removeRule_result(
      CollaborationRuleNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeRule_result(removeRule_result other) {
      if (other.isSetErr1()) {
        this.err1 = new CollaborationRuleNotFound(other.err1);
      }
    }

    public removeRule_result deepCopy() {
      return new removeRule_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public CollaborationRuleNotFound getErr1() {
      return this.err1;
    }

    public removeRule_result setErr1(CollaborationRuleNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((CollaborationRuleNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeRule_result)
        return this.equals((removeRule_result)that);
      return false;
    }

    public boolean equals(removeRule_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeRule_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeRule_resultStandardSchemeFactory implements SchemeFactory {
      public removeRule_resultStandardScheme getScheme() {
        return new removeRule_resultStandardScheme();
      }
    }

    private static class removeRule_resultStandardScheme extends StandardScheme<removeRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new CollaborationRuleNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeRule_resultTupleSchemeFactory implements SchemeFactory {
      public removeRule_resultTupleScheme getScheme() {
        return new removeRule_resultTupleScheme();
      }
    }

    private static class removeRule_resultTupleScheme extends TupleScheme<removeRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new CollaborationRuleNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class updateRule_args implements org.apache.thrift.TBase<updateRule_args, updateRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRule_args");

    private static final org.apache.thrift.protocol.TField REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("repoURL", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRule_argsTupleSchemeFactory());
    }

    public String repoURL; // required
    public CollaborationRule rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPO_URL((short)1, "repoURL"),
      RULE((short)2, "rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPO_URL
            return REPO_URL;
          case 2: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("repoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRule_args.class, metaDataMap);
    }

    public updateRule_args() {
    }

    public updateRule_args(
      String repoURL,
      CollaborationRule rule)
    {
      this();
      this.repoURL = repoURL;
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRule_args(updateRule_args other) {
      if (other.isSetRepoURL()) {
        this.repoURL = other.repoURL;
      }
      if (other.isSetRule()) {
        this.rule = new CollaborationRule(other.rule);
      }
    }

    public updateRule_args deepCopy() {
      return new updateRule_args(this);
    }

    @Override
    public void clear() {
      this.repoURL = null;
      this.rule = null;
    }

    public String getRepoURL() {
      return this.repoURL;
    }

    public updateRule_args setRepoURL(String repoURL) {
      this.repoURL = repoURL;
      return this;
    }

    public void unsetRepoURL() {
      this.repoURL = null;
    }

    /** Returns true if field repoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoURL() {
      return this.repoURL != null;
    }

    public void setRepoURLIsSet(boolean value) {
      if (!value) {
        this.repoURL = null;
      }
    }

    public CollaborationRule getRule() {
      return this.rule;
    }

    public updateRule_args setRule(CollaborationRule rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPO_URL:
        if (value == null) {
          unsetRepoURL();
        } else {
          setRepoURL((String)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((CollaborationRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPO_URL:
        return getRepoURL();

      case RULE:
        return getRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPO_URL:
        return isSetRepoURL();
      case RULE:
        return isSetRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRule_args)
        return this.equals((updateRule_args)that);
      return false;
    }

    public boolean equals(updateRule_args that) {
      if (that == null)
        return false;

      boolean this_present_repoURL = true && this.isSetRepoURL();
      boolean that_present_repoURL = true && that.isSetRepoURL();
      if (this_present_repoURL || that_present_repoURL) {
        if (!(this_present_repoURL && that_present_repoURL))
          return false;
        if (!this.repoURL.equals(that.repoURL))
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repoURL = true && (isSetRepoURL());
      list.add(present_repoURL);
      if (present_repoURL)
        list.add(repoURL);

      boolean present_rule = true && (isSetRule());
      list.add(present_rule);
      if (present_rule)
        list.add(rule);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepoURL()).compareTo(other.isSetRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoURL, other.repoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRule_args(");
      boolean first = true;

      sb.append("repoURL:");
      if (this.repoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.repoURL);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (repoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'repoURL' was not present! Struct: " + toString());
      }
      if (rule == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rule' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (rule != null) {
        rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRule_argsStandardSchemeFactory implements SchemeFactory {
      public updateRule_argsStandardScheme getScheme() {
        return new updateRule_argsStandardScheme();
      }
    }

    private static class updateRule_argsStandardScheme extends StandardScheme<updateRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoURL = iprot.readString();
                struct.setRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rule = new CollaborationRule();
                struct.rule.read(iprot);
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repoURL != null) {
          oprot.writeFieldBegin(REPO_URL_FIELD_DESC);
          oprot.writeString(struct.repoURL);
          oprot.writeFieldEnd();
        }
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRule_argsTupleSchemeFactory implements SchemeFactory {
      public updateRule_argsTupleScheme getScheme() {
        return new updateRule_argsTupleScheme();
      }
    }

    private static class updateRule_argsTupleScheme extends TupleScheme<updateRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.repoURL);
        struct.rule.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.repoURL = iprot.readString();
        struct.setRepoURLIsSet(true);
        struct.rule = new CollaborationRule();
        struct.rule.read(iprot);
        struct.setRuleIsSet(true);
      }
    }

  }

  public static class updateRule_result implements org.apache.thrift.TBase<updateRule_result, updateRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRule_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRule_resultTupleSchemeFactory());
    }

    public CollaborationRuleNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRule_result.class, metaDataMap);
    }

    public updateRule_result() {
    }

    public updateRule_result(
      CollaborationRuleNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRule_result(updateRule_result other) {
      if (other.isSetErr1()) {
        this.err1 = new CollaborationRuleNotFound(other.err1);
      }
    }

    public updateRule_result deepCopy() {
      return new updateRule_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public CollaborationRuleNotFound getErr1() {
      return this.err1;
    }

    public updateRule_result setErr1(CollaborationRuleNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((CollaborationRuleNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRule_result)
        return this.equals((updateRule_result)that);
      return false;
    }

    public boolean equals(updateRule_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRule_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRule_resultStandardSchemeFactory implements SchemeFactory {
      public updateRule_resultStandardScheme getScheme() {
        return new updateRule_resultStandardScheme();
      }
    }

    private static class updateRule_resultStandardScheme extends StandardScheme<updateRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new CollaborationRuleNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRule_resultTupleSchemeFactory implements SchemeFactory {
      public updateRule_resultTupleScheme getScheme() {
        return new updateRule_resultTupleScheme();
      }
    }

    private static class updateRule_resultTupleScheme extends TupleScheme<updateRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new CollaborationRuleNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class listRules_args implements org.apache.thrift.TBase<listRules_args, listRules_args._Fields>, java.io.Serializable, Cloneable, Comparable<listRules_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listRules_args");

    private static final org.apache.thrift.protocol.TField REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("repoURL", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listRules_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listRules_argsTupleSchemeFactory());
    }

    public String repoURL; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPO_URL((short)1, "repoURL");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPO_URL
            return REPO_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("repoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listRules_args.class, metaDataMap);
    }

    public listRules_args() {
    }

    public listRules_args(
      String repoURL)
    {
      this();
      this.repoURL = repoURL;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listRules_args(listRules_args other) {
      if (other.isSetRepoURL()) {
        this.repoURL = other.repoURL;
      }
    }

    public listRules_args deepCopy() {
      return new listRules_args(this);
    }

    @Override
    public void clear() {
      this.repoURL = null;
    }

    public String getRepoURL() {
      return this.repoURL;
    }

    public listRules_args setRepoURL(String repoURL) {
      this.repoURL = repoURL;
      return this;
    }

    public void unsetRepoURL() {
      this.repoURL = null;
    }

    /** Returns true if field repoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoURL() {
      return this.repoURL != null;
    }

    public void setRepoURLIsSet(boolean value) {
      if (!value) {
        this.repoURL = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPO_URL:
        if (value == null) {
          unsetRepoURL();
        } else {
          setRepoURL((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPO_URL:
        return getRepoURL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPO_URL:
        return isSetRepoURL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listRules_args)
        return this.equals((listRules_args)that);
      return false;
    }

    public boolean equals(listRules_args that) {
      if (that == null)
        return false;

      boolean this_present_repoURL = true && this.isSetRepoURL();
      boolean that_present_repoURL = true && that.isSetRepoURL();
      if (this_present_repoURL || that_present_repoURL) {
        if (!(this_present_repoURL && that_present_repoURL))
          return false;
        if (!this.repoURL.equals(that.repoURL))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repoURL = true && (isSetRepoURL());
      list.add(present_repoURL);
      if (present_repoURL)
        list.add(repoURL);

      return list.hashCode();
    }

    @Override
    public int compareTo(listRules_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepoURL()).compareTo(other.isSetRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoURL, other.repoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listRules_args(");
      boolean first = true;

      sb.append("repoURL:");
      if (this.repoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.repoURL);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (repoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'repoURL' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listRules_argsStandardSchemeFactory implements SchemeFactory {
      public listRules_argsStandardScheme getScheme() {
        return new listRules_argsStandardScheme();
      }
    }

    private static class listRules_argsStandardScheme extends StandardScheme<listRules_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listRules_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoURL = iprot.readString();
                struct.setRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listRules_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repoURL != null) {
          oprot.writeFieldBegin(REPO_URL_FIELD_DESC);
          oprot.writeString(struct.repoURL);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listRules_argsTupleSchemeFactory implements SchemeFactory {
      public listRules_argsTupleScheme getScheme() {
        return new listRules_argsTupleScheme();
      }
    }

    private static class listRules_argsTupleScheme extends TupleScheme<listRules_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.repoURL);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.repoURL = iprot.readString();
        struct.setRepoURLIsSet(true);
      }
    }

  }

  public static class listRules_result implements org.apache.thrift.TBase<listRules_result, listRules_result._Fields>, java.io.Serializable, Cloneable, Comparable<listRules_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listRules_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listRules_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listRules_resultTupleSchemeFactory());
    }

    public List<CollaborationRule> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollaborationRule.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listRules_result.class, metaDataMap);
    }

    public listRules_result() {
    }

    public listRules_result(
      List<CollaborationRule> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listRules_result(listRules_result other) {
      if (other.isSetSuccess()) {
        List<CollaborationRule> __this__success = new ArrayList<CollaborationRule>(other.success.size());
        for (CollaborationRule other_element : other.success) {
          __this__success.add(new CollaborationRule(other_element));
      }
        this.success = __this__success;
      }
    }

    public listRules_result deepCopy() {
      return new listRules_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollaborationRule> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollaborationRule elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollaborationRule>();
      }
      this.success.add(elem);
    }

    public List<CollaborationRule> getSuccess() {
      return this.success;
    }

    public listRules_result setSuccess(List<CollaborationRule> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollaborationRule>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listRules_result)
        return this.equals((listRules_result)that);
      return false;
    }

    public boolean equals(listRules_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listRules_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listRules_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listRules_resultStandardSchemeFactory implements SchemeFactory {
      public listRules_resultStandardScheme getScheme() {
        return new listRules_resultStandardScheme();
      }
    }

    private static class listRules_resultStandardScheme extends StandardScheme<listRules_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listRules_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list316 = iprot.readListBegin();
                  struct.success = new ArrayList<CollaborationRule>(_list316.size);
                  CollaborationRule _elem317;
                  for (int _i318 = 0; _i318 < _list316.size; ++_i318)
                  {
                    _elem317 = new CollaborationRule();
                    _elem317.read(iprot);
                    struct.success.add(_elem317);
              }
                  iprot.readListEnd();
              }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listRules_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollaborationRule _iter319 : struct.success)
            {
              _iter319.write(oprot);
        }
            oprot.writeListEnd();
        }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listRules_resultTupleSchemeFactory implements SchemeFactory {
      public listRules_resultTupleScheme getScheme() {
        return new listRules_resultTupleScheme();
      }
    }

    private static class listRules_resultTupleScheme extends TupleScheme<listRules_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollaborationRule _iter320 : struct.success)
            {
              _iter320.write(oprot);
        }
        }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list321 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollaborationRule>(_list321.size);
            CollaborationRule _elem322;
            for (int _i323 = 0; _i323 < _list321.size; ++_i323)
            {
              _elem322 = new CollaborationRule();
              _elem322.read(iprot);
              struct.success.add(_elem322);
        }
        }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class regenerateFrontRepositories_args implements org.apache.thrift.TBase<regenerateFrontRepositories_args, regenerateFrontRepositories_args._Fields>, java.io.Serializable, Cloneable, Comparable<regenerateFrontRepositories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regenerateFrontRepositories_args");

    private static final org.apache.thrift.protocol.TField GOLD_REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("goldRepoURL", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regenerateFrontRepositories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regenerateFrontRepositories_argsTupleSchemeFactory());
    }

    public String goldRepoURL; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOLD_REPO_URL((short)1, "goldRepoURL");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOLD_REPO_URL
            return GOLD_REPO_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOLD_REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("goldRepoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regenerateFrontRepositories_args.class, metaDataMap);
    }

    public regenerateFrontRepositories_args() {
    }

    public regenerateFrontRepositories_args(
      String goldRepoURL)
    {
      this();
      this.goldRepoURL = goldRepoURL;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regenerateFrontRepositories_args(regenerateFrontRepositories_args other) {
      if (other.isSetGoldRepoURL()) {
        this.goldRepoURL = other.goldRepoURL;
      }
    }

    public regenerateFrontRepositories_args deepCopy() {
      return new regenerateFrontRepositories_args(this);
    }

    @Override
    public void clear() {
      this.goldRepoURL = null;
    }

    public String getGoldRepoURL() {
      return this.goldRepoURL;
    }

    public regenerateFrontRepositories_args setGoldRepoURL(String goldRepoURL) {
      this.goldRepoURL = goldRepoURL;
      return this;
    }

    public void unsetGoldRepoURL() {
      this.goldRepoURL = null;
    }

    /** Returns true if field goldRepoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetGoldRepoURL() {
      return this.goldRepoURL != null;
    }

    public void setGoldRepoURLIsSet(boolean value) {
      if (!value) {
        this.goldRepoURL = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOLD_REPO_URL:
        if (value == null) {
          unsetGoldRepoURL();
        } else {
          setGoldRepoURL((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOLD_REPO_URL:
        return getGoldRepoURL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOLD_REPO_URL:
        return isSetGoldRepoURL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regenerateFrontRepositories_args)
        return this.equals((regenerateFrontRepositories_args)that);
      return false;
    }

    public boolean equals(regenerateFrontRepositories_args that) {
      if (that == null)
        return false;

      boolean this_present_goldRepoURL = true && this.isSetGoldRepoURL();
      boolean that_present_goldRepoURL = true && that.isSetGoldRepoURL();
      if (this_present_goldRepoURL || that_present_goldRepoURL) {
        if (!(this_present_goldRepoURL && that_present_goldRepoURL))
          return false;
        if (!this.goldRepoURL.equals(that.goldRepoURL))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_goldRepoURL = true && (isSetGoldRepoURL());
      list.add(present_goldRepoURL);
      if (present_goldRepoURL)
        list.add(goldRepoURL);

      return list.hashCode();
    }

    @Override
    public int compareTo(regenerateFrontRepositories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGoldRepoURL()).compareTo(other.isSetGoldRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGoldRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldRepoURL, other.goldRepoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regenerateFrontRepositories_args(");
      boolean first = true;

      sb.append("goldRepoURL:");
      if (this.goldRepoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.goldRepoURL);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (goldRepoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'goldRepoURL' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regenerateFrontRepositories_argsStandardSchemeFactory implements SchemeFactory {
      public regenerateFrontRepositories_argsStandardScheme getScheme() {
        return new regenerateFrontRepositories_argsStandardScheme();
      }
    }

    private static class regenerateFrontRepositories_argsStandardScheme extends StandardScheme<regenerateFrontRepositories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regenerateFrontRepositories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOLD_REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.goldRepoURL = iprot.readString();
                struct.setGoldRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regenerateFrontRepositories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.goldRepoURL != null) {
          oprot.writeFieldBegin(GOLD_REPO_URL_FIELD_DESC);
          oprot.writeString(struct.goldRepoURL);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regenerateFrontRepositories_argsTupleSchemeFactory implements SchemeFactory {
      public regenerateFrontRepositories_argsTupleScheme getScheme() {
        return new regenerateFrontRepositories_argsTupleScheme();
      }
    }

    private static class regenerateFrontRepositories_argsTupleScheme extends TupleScheme<regenerateFrontRepositories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regenerateFrontRepositories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.goldRepoURL);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regenerateFrontRepositories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.goldRepoURL = iprot.readString();
        struct.setGoldRepoURLIsSet(true);
      }
    }

  }

  public static class regenerateFrontRepositories_result implements org.apache.thrift.TBase<regenerateFrontRepositories_result, regenerateFrontRepositories_result._Fields>, java.io.Serializable, Cloneable, Comparable<regenerateFrontRepositories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regenerateFrontRepositories_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regenerateFrontRepositories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regenerateFrontRepositories_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regenerateFrontRepositories_result.class, metaDataMap);
    }

    public regenerateFrontRepositories_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regenerateFrontRepositories_result(regenerateFrontRepositories_result other) {
    }

    public regenerateFrontRepositories_result deepCopy() {
      return new regenerateFrontRepositories_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regenerateFrontRepositories_result)
        return this.equals((regenerateFrontRepositories_result)that);
      return false;
    }

    public boolean equals(regenerateFrontRepositories_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(regenerateFrontRepositories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regenerateFrontRepositories_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regenerateFrontRepositories_resultStandardSchemeFactory implements SchemeFactory {
      public regenerateFrontRepositories_resultStandardScheme getScheme() {
        return new regenerateFrontRepositories_resultStandardScheme();
      }
    }

    private static class regenerateFrontRepositories_resultStandardScheme extends StandardScheme<regenerateFrontRepositories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regenerateFrontRepositories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regenerateFrontRepositories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regenerateFrontRepositories_resultTupleSchemeFactory implements SchemeFactory {
      public regenerateFrontRepositories_resultTupleScheme getScheme() {
        return new regenerateFrontRepositories_resultTupleScheme();
      }
    }

    private static class regenerateFrontRepositories_resultTupleScheme extends TupleScheme<regenerateFrontRepositories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regenerateFrontRepositories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regenerateFrontRepositories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMyFrontRepositoryURL_args implements org.apache.thrift.TBase<getMyFrontRepositoryURL_args, getMyFrontRepositoryURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyFrontRepositoryURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyFrontRepositoryURL_args");

    private static final org.apache.thrift.protocol.TField GOLD_REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("goldRepoURL", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyFrontRepositoryURL_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyFrontRepositoryURL_argsTupleSchemeFactory());
    }

    public String goldRepoURL; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOLD_REPO_URL((short)1, "goldRepoURL");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOLD_REPO_URL
            return GOLD_REPO_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOLD_REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("goldRepoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyFrontRepositoryURL_args.class, metaDataMap);
    }

    public getMyFrontRepositoryURL_args() {
    }

    public getMyFrontRepositoryURL_args(
      String goldRepoURL)
    {
      this();
      this.goldRepoURL = goldRepoURL;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyFrontRepositoryURL_args(getMyFrontRepositoryURL_args other) {
      if (other.isSetGoldRepoURL()) {
        this.goldRepoURL = other.goldRepoURL;
      }
    }

    public getMyFrontRepositoryURL_args deepCopy() {
      return new getMyFrontRepositoryURL_args(this);
    }

    @Override
    public void clear() {
      this.goldRepoURL = null;
    }

    public String getGoldRepoURL() {
      return this.goldRepoURL;
    }

    public getMyFrontRepositoryURL_args setGoldRepoURL(String goldRepoURL) {
      this.goldRepoURL = goldRepoURL;
      return this;
    }

    public void unsetGoldRepoURL() {
      this.goldRepoURL = null;
    }

    /** Returns true if field goldRepoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetGoldRepoURL() {
      return this.goldRepoURL != null;
    }

    public void setGoldRepoURLIsSet(boolean value) {
      if (!value) {
        this.goldRepoURL = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOLD_REPO_URL:
        if (value == null) {
          unsetGoldRepoURL();
        } else {
          setGoldRepoURL((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOLD_REPO_URL:
        return getGoldRepoURL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOLD_REPO_URL:
        return isSetGoldRepoURL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyFrontRepositoryURL_args)
        return this.equals((getMyFrontRepositoryURL_args)that);
      return false;
    }

    public boolean equals(getMyFrontRepositoryURL_args that) {
      if (that == null)
        return false;

      boolean this_present_goldRepoURL = true && this.isSetGoldRepoURL();
      boolean that_present_goldRepoURL = true && that.isSetGoldRepoURL();
      if (this_present_goldRepoURL || that_present_goldRepoURL) {
        if (!(this_present_goldRepoURL && that_present_goldRepoURL))
          return false;
        if (!this.goldRepoURL.equals(that.goldRepoURL))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_goldRepoURL = true && (isSetGoldRepoURL());
      list.add(present_goldRepoURL);
      if (present_goldRepoURL)
        list.add(goldRepoURL);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyFrontRepositoryURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGoldRepoURL()).compareTo(other.isSetGoldRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGoldRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldRepoURL, other.goldRepoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyFrontRepositoryURL_args(");
      boolean first = true;

      sb.append("goldRepoURL:");
      if (this.goldRepoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.goldRepoURL);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (goldRepoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'goldRepoURL' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyFrontRepositoryURL_argsStandardSchemeFactory implements SchemeFactory {
      public getMyFrontRepositoryURL_argsStandardScheme getScheme() {
        return new getMyFrontRepositoryURL_argsStandardScheme();
      }
    }

    private static class getMyFrontRepositoryURL_argsStandardScheme extends StandardScheme<getMyFrontRepositoryURL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyFrontRepositoryURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOLD_REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.goldRepoURL = iprot.readString();
                struct.setGoldRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyFrontRepositoryURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.goldRepoURL != null) {
          oprot.writeFieldBegin(GOLD_REPO_URL_FIELD_DESC);
          oprot.writeString(struct.goldRepoURL);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyFrontRepositoryURL_argsTupleSchemeFactory implements SchemeFactory {
      public getMyFrontRepositoryURL_argsTupleScheme getScheme() {
        return new getMyFrontRepositoryURL_argsTupleScheme();
      }
    }

    private static class getMyFrontRepositoryURL_argsTupleScheme extends TupleScheme<getMyFrontRepositoryURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyFrontRepositoryURL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.goldRepoURL);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyFrontRepositoryURL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.goldRepoURL = iprot.readString();
        struct.setGoldRepoURLIsSet(true);
      }
    }

  }

  public static class getMyFrontRepositoryURL_result implements org.apache.thrift.TBase<getMyFrontRepositoryURL_result, getMyFrontRepositoryURL_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyFrontRepositoryURL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyFrontRepositoryURL_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyFrontRepositoryURL_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyFrontRepositoryURL_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyFrontRepositoryURL_result.class, metaDataMap);
    }

    public getMyFrontRepositoryURL_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyFrontRepositoryURL_result(getMyFrontRepositoryURL_result other) {
    }

    public getMyFrontRepositoryURL_result deepCopy() {
      return new getMyFrontRepositoryURL_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyFrontRepositoryURL_result)
        return this.equals((getMyFrontRepositoryURL_result)that);
      return false;
    }

    public boolean equals(getMyFrontRepositoryURL_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyFrontRepositoryURL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyFrontRepositoryURL_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyFrontRepositoryURL_resultStandardSchemeFactory implements SchemeFactory {
      public getMyFrontRepositoryURL_resultStandardScheme getScheme() {
        return new getMyFrontRepositoryURL_resultStandardScheme();
      }
    }

    private static class getMyFrontRepositoryURL_resultStandardScheme extends StandardScheme<getMyFrontRepositoryURL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyFrontRepositoryURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyFrontRepositoryURL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyFrontRepositoryURL_resultTupleSchemeFactory implements SchemeFactory {
      public getMyFrontRepositoryURL_resultTupleScheme getScheme() {
        return new getMyFrontRepositoryURL_resultTupleScheme();
      }
    }

    private static class getMyFrontRepositoryURL_resultTupleScheme extends TupleScheme<getMyFrontRepositoryURL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyFrontRepositoryURL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyFrontRepositoryURL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
