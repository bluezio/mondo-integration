/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package uk.ac.york.mondo.integration.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class QueryResult extends org.apache.thrift.TUnion<QueryResult, QueryResult._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryResult");
  private static final org.apache.thrift.protocol.TField V_BOOLEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("vBoolean", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField V_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("vByte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField V_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("vShort", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField V_INTEGER_FIELD_DESC = new org.apache.thrift.protocol.TField("vInteger", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField V_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("vLong", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField V_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField V_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("vString", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField V_MODEL_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("vModelElement", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField V_MODEL_ELEMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("vModelElementType", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V_BOOLEAN((short)1, "vBoolean"),
    V_BYTE((short)2, "vByte"),
    V_SHORT((short)3, "vShort"),
    V_INTEGER((short)4, "vInteger"),
    V_LONG((short)5, "vLong"),
    V_DOUBLE((short)6, "vDouble"),
    V_STRING((short)7, "vString"),
    V_MODEL_ELEMENT((short)8, "vModelElement"),
    V_MODEL_ELEMENT_TYPE((short)9, "vModelElementType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V_BOOLEAN
          return V_BOOLEAN;
        case 2: // V_BYTE
          return V_BYTE;
        case 3: // V_SHORT
          return V_SHORT;
        case 4: // V_INTEGER
          return V_INTEGER;
        case 5: // V_LONG
          return V_LONG;
        case 6: // V_DOUBLE
          return V_DOUBLE;
        case 7: // V_STRING
          return V_STRING;
        case 8: // V_MODEL_ELEMENT
          return V_MODEL_ELEMENT;
        case 9: // V_MODEL_ELEMENT_TYPE
          return V_MODEL_ELEMENT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V_BOOLEAN, new org.apache.thrift.meta_data.FieldMetaData("vBoolean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.V_BYTE, new org.apache.thrift.meta_data.FieldMetaData("vByte", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.V_SHORT, new org.apache.thrift.meta_data.FieldMetaData("vShort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.V_INTEGER, new org.apache.thrift.meta_data.FieldMetaData("vInteger", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.V_LONG, new org.apache.thrift.meta_data.FieldMetaData("vLong", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.V_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("vDouble", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.V_STRING, new org.apache.thrift.meta_data.FieldMetaData("vString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V_MODEL_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("vModelElement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelElement.class)));
    tmpMap.put(_Fields.V_MODEL_ELEMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("vModelElementType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelElementType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryResult.class, metaDataMap);
  }

  public QueryResult() {
    super();
  }

  public QueryResult(_Fields setField, Object value) {
    super(setField, value);
  }

  public QueryResult(QueryResult other) {
    super(other);
  }
  public QueryResult deepCopy() {
    return new QueryResult(this);
  }

  public static QueryResult vBoolean(boolean value) {
    QueryResult x = new QueryResult();
    x.setVBoolean(value);
    return x;
  }

  public static QueryResult vByte(byte value) {
    QueryResult x = new QueryResult();
    x.setVByte(value);
    return x;
  }

  public static QueryResult vShort(short value) {
    QueryResult x = new QueryResult();
    x.setVShort(value);
    return x;
  }

  public static QueryResult vInteger(int value) {
    QueryResult x = new QueryResult();
    x.setVInteger(value);
    return x;
  }

  public static QueryResult vLong(long value) {
    QueryResult x = new QueryResult();
    x.setVLong(value);
    return x;
  }

  public static QueryResult vDouble(double value) {
    QueryResult x = new QueryResult();
    x.setVDouble(value);
    return x;
  }

  public static QueryResult vString(String value) {
    QueryResult x = new QueryResult();
    x.setVString(value);
    return x;
  }

  public static QueryResult vModelElement(ModelElement value) {
    QueryResult x = new QueryResult();
    x.setVModelElement(value);
    return x;
  }

  public static QueryResult vModelElementType(ModelElementType value) {
    QueryResult x = new QueryResult();
    x.setVModelElementType(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case V_BOOLEAN:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'vBoolean', but got " + value.getClass().getSimpleName());
      case V_BYTE:
        if (value instanceof Byte) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Byte for field 'vByte', but got " + value.getClass().getSimpleName());
      case V_SHORT:
        if (value instanceof Short) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Short for field 'vShort', but got " + value.getClass().getSimpleName());
      case V_INTEGER:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'vInteger', but got " + value.getClass().getSimpleName());
      case V_LONG:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'vLong', but got " + value.getClass().getSimpleName());
      case V_DOUBLE:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'vDouble', but got " + value.getClass().getSimpleName());
      case V_STRING:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'vString', but got " + value.getClass().getSimpleName());
      case V_MODEL_ELEMENT:
        if (value instanceof ModelElement) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ModelElement for field 'vModelElement', but got " + value.getClass().getSimpleName());
      case V_MODEL_ELEMENT_TYPE:
        if (value instanceof ModelElementType) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ModelElementType for field 'vModelElementType', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case V_BOOLEAN:
          if (field.type == V_BOOLEAN_FIELD_DESC.type) {
            Boolean vBoolean;
            vBoolean = iprot.readBool();
            return vBoolean;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_BYTE:
          if (field.type == V_BYTE_FIELD_DESC.type) {
            Byte vByte;
            vByte = iprot.readByte();
            return vByte;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_SHORT:
          if (field.type == V_SHORT_FIELD_DESC.type) {
            Short vShort;
            vShort = iprot.readI16();
            return vShort;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_INTEGER:
          if (field.type == V_INTEGER_FIELD_DESC.type) {
            Integer vInteger;
            vInteger = iprot.readI32();
            return vInteger;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_LONG:
          if (field.type == V_LONG_FIELD_DESC.type) {
            Long vLong;
            vLong = iprot.readI64();
            return vLong;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_DOUBLE:
          if (field.type == V_DOUBLE_FIELD_DESC.type) {
            Double vDouble;
            vDouble = iprot.readDouble();
            return vDouble;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_STRING:
          if (field.type == V_STRING_FIELD_DESC.type) {
            String vString;
            vString = iprot.readString();
            return vString;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_MODEL_ELEMENT:
          if (field.type == V_MODEL_ELEMENT_FIELD_DESC.type) {
            ModelElement vModelElement;
            vModelElement = new ModelElement();
            vModelElement.read(iprot);
            return vModelElement;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_MODEL_ELEMENT_TYPE:
          if (field.type == V_MODEL_ELEMENT_TYPE_FIELD_DESC.type) {
            ModelElementType vModelElementType;
            vModelElementType = new ModelElementType();
            vModelElementType.read(iprot);
            return vModelElementType;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_BOOLEAN:
        Boolean vBoolean = (Boolean)value_;
        oprot.writeBool(vBoolean);
        return;
      case V_BYTE:
        Byte vByte = (Byte)value_;
        oprot.writeByte(vByte);
        return;
      case V_SHORT:
        Short vShort = (Short)value_;
        oprot.writeI16(vShort);
        return;
      case V_INTEGER:
        Integer vInteger = (Integer)value_;
        oprot.writeI32(vInteger);
        return;
      case V_LONG:
        Long vLong = (Long)value_;
        oprot.writeI64(vLong);
        return;
      case V_DOUBLE:
        Double vDouble = (Double)value_;
        oprot.writeDouble(vDouble);
        return;
      case V_STRING:
        String vString = (String)value_;
        oprot.writeString(vString);
        return;
      case V_MODEL_ELEMENT:
        ModelElement vModelElement = (ModelElement)value_;
        vModelElement.write(oprot);
        return;
      case V_MODEL_ELEMENT_TYPE:
        ModelElementType vModelElementType = (ModelElementType)value_;
        vModelElementType.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case V_BOOLEAN:
          Boolean vBoolean;
          vBoolean = iprot.readBool();
          return vBoolean;
        case V_BYTE:
          Byte vByte;
          vByte = iprot.readByte();
          return vByte;
        case V_SHORT:
          Short vShort;
          vShort = iprot.readI16();
          return vShort;
        case V_INTEGER:
          Integer vInteger;
          vInteger = iprot.readI32();
          return vInteger;
        case V_LONG:
          Long vLong;
          vLong = iprot.readI64();
          return vLong;
        case V_DOUBLE:
          Double vDouble;
          vDouble = iprot.readDouble();
          return vDouble;
        case V_STRING:
          String vString;
          vString = iprot.readString();
          return vString;
        case V_MODEL_ELEMENT:
          ModelElement vModelElement;
          vModelElement = new ModelElement();
          vModelElement.read(iprot);
          return vModelElement;
        case V_MODEL_ELEMENT_TYPE:
          ModelElementType vModelElementType;
          vModelElementType = new ModelElementType();
          vModelElementType.read(iprot);
          return vModelElementType;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_BOOLEAN:
        Boolean vBoolean = (Boolean)value_;
        oprot.writeBool(vBoolean);
        return;
      case V_BYTE:
        Byte vByte = (Byte)value_;
        oprot.writeByte(vByte);
        return;
      case V_SHORT:
        Short vShort = (Short)value_;
        oprot.writeI16(vShort);
        return;
      case V_INTEGER:
        Integer vInteger = (Integer)value_;
        oprot.writeI32(vInteger);
        return;
      case V_LONG:
        Long vLong = (Long)value_;
        oprot.writeI64(vLong);
        return;
      case V_DOUBLE:
        Double vDouble = (Double)value_;
        oprot.writeDouble(vDouble);
        return;
      case V_STRING:
        String vString = (String)value_;
        oprot.writeString(vString);
        return;
      case V_MODEL_ELEMENT:
        ModelElement vModelElement = (ModelElement)value_;
        vModelElement.write(oprot);
        return;
      case V_MODEL_ELEMENT_TYPE:
        ModelElementType vModelElementType = (ModelElementType)value_;
        vModelElementType.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case V_BOOLEAN:
        return V_BOOLEAN_FIELD_DESC;
      case V_BYTE:
        return V_BYTE_FIELD_DESC;
      case V_SHORT:
        return V_SHORT_FIELD_DESC;
      case V_INTEGER:
        return V_INTEGER_FIELD_DESC;
      case V_LONG:
        return V_LONG_FIELD_DESC;
      case V_DOUBLE:
        return V_DOUBLE_FIELD_DESC;
      case V_STRING:
        return V_STRING_FIELD_DESC;
      case V_MODEL_ELEMENT:
        return V_MODEL_ELEMENT_FIELD_DESC;
      case V_MODEL_ELEMENT_TYPE:
        return V_MODEL_ELEMENT_TYPE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public boolean getVBoolean() {
    if (getSetField() == _Fields.V_BOOLEAN) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vBoolean' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVBoolean(boolean value) {
    setField_ = _Fields.V_BOOLEAN;
    value_ = value;
  }

  public byte getVByte() {
    if (getSetField() == _Fields.V_BYTE) {
      return (Byte)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vByte' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVByte(byte value) {
    setField_ = _Fields.V_BYTE;
    value_ = value;
  }

  public short getVShort() {
    if (getSetField() == _Fields.V_SHORT) {
      return (Short)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vShort' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVShort(short value) {
    setField_ = _Fields.V_SHORT;
    value_ = value;
  }

  public int getVInteger() {
    if (getSetField() == _Fields.V_INTEGER) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vInteger' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVInteger(int value) {
    setField_ = _Fields.V_INTEGER;
    value_ = value;
  }

  public long getVLong() {
    if (getSetField() == _Fields.V_LONG) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vLong' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVLong(long value) {
    setField_ = _Fields.V_LONG;
    value_ = value;
  }

  public double getVDouble() {
    if (getSetField() == _Fields.V_DOUBLE) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vDouble' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVDouble(double value) {
    setField_ = _Fields.V_DOUBLE;
    value_ = value;
  }

  public String getVString() {
    if (getSetField() == _Fields.V_STRING) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vString' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVString(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_STRING;
    value_ = value;
  }

  public ModelElement getVModelElement() {
    if (getSetField() == _Fields.V_MODEL_ELEMENT) {
      return (ModelElement)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vModelElement' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVModelElement(ModelElement value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_MODEL_ELEMENT;
    value_ = value;
  }

  public ModelElementType getVModelElementType() {
    if (getSetField() == _Fields.V_MODEL_ELEMENT_TYPE) {
      return (ModelElementType)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vModelElementType' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVModelElementType(ModelElementType value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_MODEL_ELEMENT_TYPE;
    value_ = value;
  }

  public boolean isSetVBoolean() {
    return setField_ == _Fields.V_BOOLEAN;
  }


  public boolean isSetVByte() {
    return setField_ == _Fields.V_BYTE;
  }


  public boolean isSetVShort() {
    return setField_ == _Fields.V_SHORT;
  }


  public boolean isSetVInteger() {
    return setField_ == _Fields.V_INTEGER;
  }


  public boolean isSetVLong() {
    return setField_ == _Fields.V_LONG;
  }


  public boolean isSetVDouble() {
    return setField_ == _Fields.V_DOUBLE;
  }


  public boolean isSetVString() {
    return setField_ == _Fields.V_STRING;
  }


  public boolean isSetVModelElement() {
    return setField_ == _Fields.V_MODEL_ELEMENT;
  }


  public boolean isSetVModelElementType() {
    return setField_ == _Fields.V_MODEL_ELEMENT_TYPE;
  }


  public boolean equals(Object other) {
    if (other instanceof QueryResult) {
      return equals((QueryResult)other);
    } else {
      return false;
    }
  }

  public boolean equals(QueryResult other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(QueryResult other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
