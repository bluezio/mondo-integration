/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package uk.ac.york.mondo.integration.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class ScalarList extends org.apache.thrift.TUnion<ScalarList, ScalarList._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScalarList");
  private static final org.apache.thrift.protocol.TField V_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("vBytes", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField V_SHORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("vShorts", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField V_INTEGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("vIntegers", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField V_LONGS_FIELD_DESC = new org.apache.thrift.protocol.TField("vLongs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField V_DOUBLES_FIELD_DESC = new org.apache.thrift.protocol.TField("vDoubles", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField V_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("vStrings", org.apache.thrift.protocol.TType.LIST, (short)6);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V_BYTES((short)1, "vBytes"),
    V_SHORTS((short)2, "vShorts"),
    V_INTEGERS((short)3, "vIntegers"),
    V_LONGS((short)4, "vLongs"),
    V_DOUBLES((short)5, "vDoubles"),
    V_STRINGS((short)6, "vStrings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V_BYTES
          return V_BYTES;
        case 2: // V_SHORTS
          return V_SHORTS;
        case 3: // V_INTEGERS
          return V_INTEGERS;
        case 4: // V_LONGS
          return V_LONGS;
        case 5: // V_DOUBLES
          return V_DOUBLES;
        case 6: // V_STRINGS
          return V_STRINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V_BYTES, new org.apache.thrift.meta_data.FieldMetaData("vBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.V_SHORTS, new org.apache.thrift.meta_data.FieldMetaData("vShorts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.V_INTEGERS, new org.apache.thrift.meta_data.FieldMetaData("vIntegers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.V_LONGS, new org.apache.thrift.meta_data.FieldMetaData("vLongs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.V_DOUBLES, new org.apache.thrift.meta_data.FieldMetaData("vDoubles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.V_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("vStrings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScalarList.class, metaDataMap);
  }

  public ScalarList() {
    super();
  }

  public ScalarList(_Fields setField, Object value) {
    super(setField, value);
  }

  public ScalarList(ScalarList other) {
    super(other);
  }
  public ScalarList deepCopy() {
    return new ScalarList(this);
  }

  public static ScalarList vBytes(ByteBuffer value) {
    ScalarList x = new ScalarList();
    x.setVBytes(value);
    return x;
  }

  public static ScalarList vBytes(byte[] value) {
    ScalarList x = new ScalarList();
    x.setVBytes(ByteBuffer.wrap(Arrays.copyOf(value, value.length)));
    return x;
  }

  public static ScalarList vShorts(List<Short> value) {
    ScalarList x = new ScalarList();
    x.setVShorts(value);
    return x;
  }

  public static ScalarList vIntegers(List<Integer> value) {
    ScalarList x = new ScalarList();
    x.setVIntegers(value);
    return x;
  }

  public static ScalarList vLongs(List<Long> value) {
    ScalarList x = new ScalarList();
    x.setVLongs(value);
    return x;
  }

  public static ScalarList vDoubles(List<Double> value) {
    ScalarList x = new ScalarList();
    x.setVDoubles(value);
    return x;
  }

  public static ScalarList vStrings(List<String> value) {
    ScalarList x = new ScalarList();
    x.setVStrings(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case V_BYTES:
        if (value instanceof ByteBuffer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ByteBuffer for field 'vBytes', but got " + value.getClass().getSimpleName());
      case V_SHORTS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Short> for field 'vShorts', but got " + value.getClass().getSimpleName());
      case V_INTEGERS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Integer> for field 'vIntegers', but got " + value.getClass().getSimpleName());
      case V_LONGS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Long> for field 'vLongs', but got " + value.getClass().getSimpleName());
      case V_DOUBLES:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Double> for field 'vDoubles', but got " + value.getClass().getSimpleName());
      case V_STRINGS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<String> for field 'vStrings', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case V_BYTES:
          if (field.type == V_BYTES_FIELD_DESC.type) {
            ByteBuffer vBytes;
            vBytes = iprot.readBinary();
            return vBytes;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_SHORTS:
          if (field.type == V_SHORTS_FIELD_DESC.type) {
            List<Short> vShorts;
            {
              org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
              vShorts = new ArrayList<Short>(_list16.size);
              short _elem17;
              for (int _i18 = 0; _i18 < _list16.size; ++_i18)
              {
                _elem17 = iprot.readI16();
                vShorts.add(_elem17);
              }
              iprot.readListEnd();
            }
            return vShorts;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_INTEGERS:
          if (field.type == V_INTEGERS_FIELD_DESC.type) {
            List<Integer> vIntegers;
            {
              org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
              vIntegers = new ArrayList<Integer>(_list19.size);
              int _elem20;
              for (int _i21 = 0; _i21 < _list19.size; ++_i21)
              {
                _elem20 = iprot.readI32();
                vIntegers.add(_elem20);
              }
              iprot.readListEnd();
            }
            return vIntegers;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_LONGS:
          if (field.type == V_LONGS_FIELD_DESC.type) {
            List<Long> vLongs;
            {
              org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
              vLongs = new ArrayList<Long>(_list22.size);
              long _elem23;
              for (int _i24 = 0; _i24 < _list22.size; ++_i24)
              {
                _elem23 = iprot.readI64();
                vLongs.add(_elem23);
              }
              iprot.readListEnd();
            }
            return vLongs;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_DOUBLES:
          if (field.type == V_DOUBLES_FIELD_DESC.type) {
            List<Double> vDoubles;
            {
              org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
              vDoubles = new ArrayList<Double>(_list25.size);
              double _elem26;
              for (int _i27 = 0; _i27 < _list25.size; ++_i27)
              {
                _elem26 = iprot.readDouble();
                vDoubles.add(_elem26);
              }
              iprot.readListEnd();
            }
            return vDoubles;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_STRINGS:
          if (field.type == V_STRINGS_FIELD_DESC.type) {
            List<String> vStrings;
            {
              org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
              vStrings = new ArrayList<String>(_list28.size);
              String _elem29;
              for (int _i30 = 0; _i30 < _list28.size; ++_i30)
              {
                _elem29 = iprot.readString();
                vStrings.add(_elem29);
              }
              iprot.readListEnd();
            }
            return vStrings;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_BYTES:
        ByteBuffer vBytes = (ByteBuffer)value_;
        oprot.writeBinary(vBytes);
        return;
      case V_SHORTS:
        List<Short> vShorts = (List<Short>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, vShorts.size()));
          for (short _iter31 : vShorts)
          {
            oprot.writeI16(_iter31);
          }
          oprot.writeListEnd();
        }
        return;
      case V_INTEGERS:
        List<Integer> vIntegers = (List<Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, vIntegers.size()));
          for (int _iter32 : vIntegers)
          {
            oprot.writeI32(_iter32);
          }
          oprot.writeListEnd();
        }
        return;
      case V_LONGS:
        List<Long> vLongs = (List<Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, vLongs.size()));
          for (long _iter33 : vLongs)
          {
            oprot.writeI64(_iter33);
          }
          oprot.writeListEnd();
        }
        return;
      case V_DOUBLES:
        List<Double> vDoubles = (List<Double>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, vDoubles.size()));
          for (double _iter34 : vDoubles)
          {
            oprot.writeDouble(_iter34);
          }
          oprot.writeListEnd();
        }
        return;
      case V_STRINGS:
        List<String> vStrings = (List<String>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, vStrings.size()));
          for (String _iter35 : vStrings)
          {
            oprot.writeString(_iter35);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case V_BYTES:
          ByteBuffer vBytes;
          vBytes = iprot.readBinary();
          return vBytes;
        case V_SHORTS:
          List<Short> vShorts;
          {
            org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
            vShorts = new ArrayList<Short>(_list36.size);
            short _elem37;
            for (int _i38 = 0; _i38 < _list36.size; ++_i38)
            {
              _elem37 = iprot.readI16();
              vShorts.add(_elem37);
            }
            iprot.readListEnd();
          }
          return vShorts;
        case V_INTEGERS:
          List<Integer> vIntegers;
          {
            org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
            vIntegers = new ArrayList<Integer>(_list39.size);
            int _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = iprot.readI32();
              vIntegers.add(_elem40);
            }
            iprot.readListEnd();
          }
          return vIntegers;
        case V_LONGS:
          List<Long> vLongs;
          {
            org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
            vLongs = new ArrayList<Long>(_list42.size);
            long _elem43;
            for (int _i44 = 0; _i44 < _list42.size; ++_i44)
            {
              _elem43 = iprot.readI64();
              vLongs.add(_elem43);
            }
            iprot.readListEnd();
          }
          return vLongs;
        case V_DOUBLES:
          List<Double> vDoubles;
          {
            org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
            vDoubles = new ArrayList<Double>(_list45.size);
            double _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readDouble();
              vDoubles.add(_elem46);
            }
            iprot.readListEnd();
          }
          return vDoubles;
        case V_STRINGS:
          List<String> vStrings;
          {
            org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
            vStrings = new ArrayList<String>(_list48.size);
            String _elem49;
            for (int _i50 = 0; _i50 < _list48.size; ++_i50)
            {
              _elem49 = iprot.readString();
              vStrings.add(_elem49);
            }
            iprot.readListEnd();
          }
          return vStrings;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_BYTES:
        ByteBuffer vBytes = (ByteBuffer)value_;
        oprot.writeBinary(vBytes);
        return;
      case V_SHORTS:
        List<Short> vShorts = (List<Short>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, vShorts.size()));
          for (short _iter51 : vShorts)
          {
            oprot.writeI16(_iter51);
          }
          oprot.writeListEnd();
        }
        return;
      case V_INTEGERS:
        List<Integer> vIntegers = (List<Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, vIntegers.size()));
          for (int _iter52 : vIntegers)
          {
            oprot.writeI32(_iter52);
          }
          oprot.writeListEnd();
        }
        return;
      case V_LONGS:
        List<Long> vLongs = (List<Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, vLongs.size()));
          for (long _iter53 : vLongs)
          {
            oprot.writeI64(_iter53);
          }
          oprot.writeListEnd();
        }
        return;
      case V_DOUBLES:
        List<Double> vDoubles = (List<Double>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, vDoubles.size()));
          for (double _iter54 : vDoubles)
          {
            oprot.writeDouble(_iter54);
          }
          oprot.writeListEnd();
        }
        return;
      case V_STRINGS:
        List<String> vStrings = (List<String>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, vStrings.size()));
          for (String _iter55 : vStrings)
          {
            oprot.writeString(_iter55);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case V_BYTES:
        return V_BYTES_FIELD_DESC;
      case V_SHORTS:
        return V_SHORTS_FIELD_DESC;
      case V_INTEGERS:
        return V_INTEGERS_FIELD_DESC;
      case V_LONGS:
        return V_LONGS_FIELD_DESC;
      case V_DOUBLES:
        return V_DOUBLES_FIELD_DESC;
      case V_STRINGS:
        return V_STRINGS_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public byte[] getVBytes() {
    setVBytes(org.apache.thrift.TBaseHelper.rightSize(bufferForVBytes()));
    ByteBuffer b = bufferForVBytes();
    return b == null ? null : b.array();
  }

  public ByteBuffer bufferForVBytes() {
    if (getSetField() == _Fields.V_BYTES) {
      return org.apache.thrift.TBaseHelper.copyBinary((ByteBuffer)getFieldValue());
    } else {
      throw new RuntimeException("Cannot get field 'vBytes' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVBytes(byte[] value) {
    setVBytes(ByteBuffer.wrap(Arrays.copyOf(value, value.length)));
  }

  public void setVBytes(ByteBuffer value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_BYTES;
    value_ = value;
  }

  public List<Short> getVShorts() {
    if (getSetField() == _Fields.V_SHORTS) {
      return (List<Short>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vShorts' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVShorts(List<Short> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_SHORTS;
    value_ = value;
  }

  public List<Integer> getVIntegers() {
    if (getSetField() == _Fields.V_INTEGERS) {
      return (List<Integer>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vIntegers' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVIntegers(List<Integer> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_INTEGERS;
    value_ = value;
  }

  public List<Long> getVLongs() {
    if (getSetField() == _Fields.V_LONGS) {
      return (List<Long>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vLongs' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVLongs(List<Long> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_LONGS;
    value_ = value;
  }

  public List<Double> getVDoubles() {
    if (getSetField() == _Fields.V_DOUBLES) {
      return (List<Double>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vDoubles' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVDoubles(List<Double> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_DOUBLES;
    value_ = value;
  }

  public List<String> getVStrings() {
    if (getSetField() == _Fields.V_STRINGS) {
      return (List<String>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vStrings' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVStrings(List<String> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_STRINGS;
    value_ = value;
  }

  public boolean isSetVBytes() {
    return setField_ == _Fields.V_BYTES;
  }


  public boolean isSetVShorts() {
    return setField_ == _Fields.V_SHORTS;
  }


  public boolean isSetVIntegers() {
    return setField_ == _Fields.V_INTEGERS;
  }


  public boolean isSetVLongs() {
    return setField_ == _Fields.V_LONGS;
  }


  public boolean isSetVDoubles() {
    return setField_ == _Fields.V_DOUBLES;
  }


  public boolean isSetVStrings() {
    return setField_ == _Fields.V_STRINGS;
  }


  public boolean equals(Object other) {
    if (other instanceof ScalarList) {
      return equals((ScalarList)other);
    } else {
      return false;
    }
  }

  public boolean equals(ScalarList other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ScalarList other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
