/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package uk.ac.york.mondo.integration.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class Variant extends org.apache.thrift.TUnion<Variant, Variant._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Variant");
  private static final org.apache.thrift.protocol.TField V_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("vByte", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField V_BOOLEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("vBoolean", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField V_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("vShort", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField V_INTEGER_FIELD_DESC = new org.apache.thrift.protocol.TField("vInteger", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField V_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("vLong", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField V_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField V_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("vString", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField V_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("vBytes", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField V_BOOLEANS_FIELD_DESC = new org.apache.thrift.protocol.TField("vBooleans", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField V_SHORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("vShorts", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField V_INTEGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("vIntegers", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField V_LONGS_FIELD_DESC = new org.apache.thrift.protocol.TField("vLongs", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField V_DOUBLES_FIELD_DESC = new org.apache.thrift.protocol.TField("vDoubles", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField V_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("vStrings", org.apache.thrift.protocol.TType.LIST, (short)14);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V_BYTE((short)1, "vByte"),
    V_BOOLEAN((short)2, "vBoolean"),
    V_SHORT((short)3, "vShort"),
    V_INTEGER((short)4, "vInteger"),
    V_LONG((short)5, "vLong"),
    V_DOUBLE((short)6, "vDouble"),
    V_STRING((short)7, "vString"),
    V_BYTES((short)8, "vBytes"),
    V_BOOLEANS((short)9, "vBooleans"),
    V_SHORTS((short)10, "vShorts"),
    V_INTEGERS((short)11, "vIntegers"),
    V_LONGS((short)12, "vLongs"),
    V_DOUBLES((short)13, "vDoubles"),
    V_STRINGS((short)14, "vStrings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V_BYTE
          return V_BYTE;
        case 2: // V_BOOLEAN
          return V_BOOLEAN;
        case 3: // V_SHORT
          return V_SHORT;
        case 4: // V_INTEGER
          return V_INTEGER;
        case 5: // V_LONG
          return V_LONG;
        case 6: // V_DOUBLE
          return V_DOUBLE;
        case 7: // V_STRING
          return V_STRING;
        case 8: // V_BYTES
          return V_BYTES;
        case 9: // V_BOOLEANS
          return V_BOOLEANS;
        case 10: // V_SHORTS
          return V_SHORTS;
        case 11: // V_INTEGERS
          return V_INTEGERS;
        case 12: // V_LONGS
          return V_LONGS;
        case 13: // V_DOUBLES
          return V_DOUBLES;
        case 14: // V_STRINGS
          return V_STRINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V_BYTE, new org.apache.thrift.meta_data.FieldMetaData("vByte", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.V_BOOLEAN, new org.apache.thrift.meta_data.FieldMetaData("vBoolean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.V_SHORT, new org.apache.thrift.meta_data.FieldMetaData("vShort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.V_INTEGER, new org.apache.thrift.meta_data.FieldMetaData("vInteger", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.V_LONG, new org.apache.thrift.meta_data.FieldMetaData("vLong", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.V_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("vDouble", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.V_STRING, new org.apache.thrift.meta_data.FieldMetaData("vString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V_BYTES, new org.apache.thrift.meta_data.FieldMetaData("vBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.V_BOOLEANS, new org.apache.thrift.meta_data.FieldMetaData("vBooleans", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.V_SHORTS, new org.apache.thrift.meta_data.FieldMetaData("vShorts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.V_INTEGERS, new org.apache.thrift.meta_data.FieldMetaData("vIntegers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.V_LONGS, new org.apache.thrift.meta_data.FieldMetaData("vLongs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.V_DOUBLES, new org.apache.thrift.meta_data.FieldMetaData("vDoubles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.V_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("vStrings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Variant.class, metaDataMap);
  }

  public Variant() {
    super();
  }

  public Variant(_Fields setField, Object value) {
    super(setField, value);
  }

  public Variant(Variant other) {
    super(other);
  }
  public Variant deepCopy() {
    return new Variant(this);
  }

  public static Variant vByte(byte value) {
    Variant x = new Variant();
    x.setVByte(value);
    return x;
  }

  public static Variant vBoolean(boolean value) {
    Variant x = new Variant();
    x.setVBoolean(value);
    return x;
  }

  public static Variant vShort(short value) {
    Variant x = new Variant();
    x.setVShort(value);
    return x;
  }

  public static Variant vInteger(int value) {
    Variant x = new Variant();
    x.setVInteger(value);
    return x;
  }

  public static Variant vLong(long value) {
    Variant x = new Variant();
    x.setVLong(value);
    return x;
  }

  public static Variant vDouble(double value) {
    Variant x = new Variant();
    x.setVDouble(value);
    return x;
  }

  public static Variant vString(String value) {
    Variant x = new Variant();
    x.setVString(value);
    return x;
  }

  public static Variant vBytes(ByteBuffer value) {
    Variant x = new Variant();
    x.setVBytes(value);
    return x;
  }

  public static Variant vBytes(byte[] value) {
    Variant x = new Variant();
    x.setVBytes(ByteBuffer.wrap(Arrays.copyOf(value, value.length)));
    return x;
  }

  public static Variant vBooleans(List<Boolean> value) {
    Variant x = new Variant();
    x.setVBooleans(value);
    return x;
  }

  public static Variant vShorts(List<Short> value) {
    Variant x = new Variant();
    x.setVShorts(value);
    return x;
  }

  public static Variant vIntegers(List<Integer> value) {
    Variant x = new Variant();
    x.setVIntegers(value);
    return x;
  }

  public static Variant vLongs(List<Long> value) {
    Variant x = new Variant();
    x.setVLongs(value);
    return x;
  }

  public static Variant vDoubles(List<Double> value) {
    Variant x = new Variant();
    x.setVDoubles(value);
    return x;
  }

  public static Variant vStrings(List<String> value) {
    Variant x = new Variant();
    x.setVStrings(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case V_BYTE:
        if (value instanceof Byte) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Byte for field 'vByte', but got " + value.getClass().getSimpleName());
      case V_BOOLEAN:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'vBoolean', but got " + value.getClass().getSimpleName());
      case V_SHORT:
        if (value instanceof Short) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Short for field 'vShort', but got " + value.getClass().getSimpleName());
      case V_INTEGER:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'vInteger', but got " + value.getClass().getSimpleName());
      case V_LONG:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'vLong', but got " + value.getClass().getSimpleName());
      case V_DOUBLE:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'vDouble', but got " + value.getClass().getSimpleName());
      case V_STRING:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'vString', but got " + value.getClass().getSimpleName());
      case V_BYTES:
        if (value instanceof ByteBuffer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ByteBuffer for field 'vBytes', but got " + value.getClass().getSimpleName());
      case V_BOOLEANS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Boolean> for field 'vBooleans', but got " + value.getClass().getSimpleName());
      case V_SHORTS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Short> for field 'vShorts', but got " + value.getClass().getSimpleName());
      case V_INTEGERS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Integer> for field 'vIntegers', but got " + value.getClass().getSimpleName());
      case V_LONGS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Long> for field 'vLongs', but got " + value.getClass().getSimpleName());
      case V_DOUBLES:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Double> for field 'vDoubles', but got " + value.getClass().getSimpleName());
      case V_STRINGS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<String> for field 'vStrings', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case V_BYTE:
          if (field.type == V_BYTE_FIELD_DESC.type) {
            Byte vByte;
            vByte = iprot.readByte();
            return vByte;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_BOOLEAN:
          if (field.type == V_BOOLEAN_FIELD_DESC.type) {
            Boolean vBoolean;
            vBoolean = iprot.readBool();
            return vBoolean;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_SHORT:
          if (field.type == V_SHORT_FIELD_DESC.type) {
            Short vShort;
            vShort = iprot.readI16();
            return vShort;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_INTEGER:
          if (field.type == V_INTEGER_FIELD_DESC.type) {
            Integer vInteger;
            vInteger = iprot.readI32();
            return vInteger;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_LONG:
          if (field.type == V_LONG_FIELD_DESC.type) {
            Long vLong;
            vLong = iprot.readI64();
            return vLong;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_DOUBLE:
          if (field.type == V_DOUBLE_FIELD_DESC.type) {
            Double vDouble;
            vDouble = iprot.readDouble();
            return vDouble;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_STRING:
          if (field.type == V_STRING_FIELD_DESC.type) {
            String vString;
            vString = iprot.readString();
            return vString;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_BYTES:
          if (field.type == V_BYTES_FIELD_DESC.type) {
            ByteBuffer vBytes;
            vBytes = iprot.readBinary();
            return vBytes;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_BOOLEANS:
          if (field.type == V_BOOLEANS_FIELD_DESC.type) {
            List<Boolean> vBooleans;
            {
              org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
              vBooleans = new ArrayList<Boolean>(_list16.size);
              boolean _elem17;
              for (int _i18 = 0; _i18 < _list16.size; ++_i18)
              {
                _elem17 = iprot.readBool();
                vBooleans.add(_elem17);
              }
              iprot.readListEnd();
            }
            return vBooleans;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_SHORTS:
          if (field.type == V_SHORTS_FIELD_DESC.type) {
            List<Short> vShorts;
            {
              org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
              vShorts = new ArrayList<Short>(_list19.size);
              short _elem20;
              for (int _i21 = 0; _i21 < _list19.size; ++_i21)
              {
                _elem20 = iprot.readI16();
                vShorts.add(_elem20);
              }
              iprot.readListEnd();
            }
            return vShorts;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_INTEGERS:
          if (field.type == V_INTEGERS_FIELD_DESC.type) {
            List<Integer> vIntegers;
            {
              org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
              vIntegers = new ArrayList<Integer>(_list22.size);
              int _elem23;
              for (int _i24 = 0; _i24 < _list22.size; ++_i24)
              {
                _elem23 = iprot.readI32();
                vIntegers.add(_elem23);
              }
              iprot.readListEnd();
            }
            return vIntegers;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_LONGS:
          if (field.type == V_LONGS_FIELD_DESC.type) {
            List<Long> vLongs;
            {
              org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
              vLongs = new ArrayList<Long>(_list25.size);
              long _elem26;
              for (int _i27 = 0; _i27 < _list25.size; ++_i27)
              {
                _elem26 = iprot.readI64();
                vLongs.add(_elem26);
              }
              iprot.readListEnd();
            }
            return vLongs;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_DOUBLES:
          if (field.type == V_DOUBLES_FIELD_DESC.type) {
            List<Double> vDoubles;
            {
              org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
              vDoubles = new ArrayList<Double>(_list28.size);
              double _elem29;
              for (int _i30 = 0; _i30 < _list28.size; ++_i30)
              {
                _elem29 = iprot.readDouble();
                vDoubles.add(_elem29);
              }
              iprot.readListEnd();
            }
            return vDoubles;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_STRINGS:
          if (field.type == V_STRINGS_FIELD_DESC.type) {
            List<String> vStrings;
            {
              org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
              vStrings = new ArrayList<String>(_list31.size);
              String _elem32;
              for (int _i33 = 0; _i33 < _list31.size; ++_i33)
              {
                _elem32 = iprot.readString();
                vStrings.add(_elem32);
              }
              iprot.readListEnd();
            }
            return vStrings;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_BYTE:
        Byte vByte = (Byte)value_;
        oprot.writeByte(vByte);
        return;
      case V_BOOLEAN:
        Boolean vBoolean = (Boolean)value_;
        oprot.writeBool(vBoolean);
        return;
      case V_SHORT:
        Short vShort = (Short)value_;
        oprot.writeI16(vShort);
        return;
      case V_INTEGER:
        Integer vInteger = (Integer)value_;
        oprot.writeI32(vInteger);
        return;
      case V_LONG:
        Long vLong = (Long)value_;
        oprot.writeI64(vLong);
        return;
      case V_DOUBLE:
        Double vDouble = (Double)value_;
        oprot.writeDouble(vDouble);
        return;
      case V_STRING:
        String vString = (String)value_;
        oprot.writeString(vString);
        return;
      case V_BYTES:
        ByteBuffer vBytes = (ByteBuffer)value_;
        oprot.writeBinary(vBytes);
        return;
      case V_BOOLEANS:
        List<Boolean> vBooleans = (List<Boolean>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, vBooleans.size()));
          for (boolean _iter34 : vBooleans)
          {
            oprot.writeBool(_iter34);
          }
          oprot.writeListEnd();
        }
        return;
      case V_SHORTS:
        List<Short> vShorts = (List<Short>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, vShorts.size()));
          for (short _iter35 : vShorts)
          {
            oprot.writeI16(_iter35);
          }
          oprot.writeListEnd();
        }
        return;
      case V_INTEGERS:
        List<Integer> vIntegers = (List<Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, vIntegers.size()));
          for (int _iter36 : vIntegers)
          {
            oprot.writeI32(_iter36);
          }
          oprot.writeListEnd();
        }
        return;
      case V_LONGS:
        List<Long> vLongs = (List<Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, vLongs.size()));
          for (long _iter37 : vLongs)
          {
            oprot.writeI64(_iter37);
          }
          oprot.writeListEnd();
        }
        return;
      case V_DOUBLES:
        List<Double> vDoubles = (List<Double>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, vDoubles.size()));
          for (double _iter38 : vDoubles)
          {
            oprot.writeDouble(_iter38);
          }
          oprot.writeListEnd();
        }
        return;
      case V_STRINGS:
        List<String> vStrings = (List<String>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, vStrings.size()));
          for (String _iter39 : vStrings)
          {
            oprot.writeString(_iter39);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case V_BYTE:
          Byte vByte;
          vByte = iprot.readByte();
          return vByte;
        case V_BOOLEAN:
          Boolean vBoolean;
          vBoolean = iprot.readBool();
          return vBoolean;
        case V_SHORT:
          Short vShort;
          vShort = iprot.readI16();
          return vShort;
        case V_INTEGER:
          Integer vInteger;
          vInteger = iprot.readI32();
          return vInteger;
        case V_LONG:
          Long vLong;
          vLong = iprot.readI64();
          return vLong;
        case V_DOUBLE:
          Double vDouble;
          vDouble = iprot.readDouble();
          return vDouble;
        case V_STRING:
          String vString;
          vString = iprot.readString();
          return vString;
        case V_BYTES:
          ByteBuffer vBytes;
          vBytes = iprot.readBinary();
          return vBytes;
        case V_BOOLEANS:
          List<Boolean> vBooleans;
          {
            org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
            vBooleans = new ArrayList<Boolean>(_list40.size);
            boolean _elem41;
            for (int _i42 = 0; _i42 < _list40.size; ++_i42)
            {
              _elem41 = iprot.readBool();
              vBooleans.add(_elem41);
            }
            iprot.readListEnd();
          }
          return vBooleans;
        case V_SHORTS:
          List<Short> vShorts;
          {
            org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
            vShorts = new ArrayList<Short>(_list43.size);
            short _elem44;
            for (int _i45 = 0; _i45 < _list43.size; ++_i45)
            {
              _elem44 = iprot.readI16();
              vShorts.add(_elem44);
            }
            iprot.readListEnd();
          }
          return vShorts;
        case V_INTEGERS:
          List<Integer> vIntegers;
          {
            org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
            vIntegers = new ArrayList<Integer>(_list46.size);
            int _elem47;
            for (int _i48 = 0; _i48 < _list46.size; ++_i48)
            {
              _elem47 = iprot.readI32();
              vIntegers.add(_elem47);
            }
            iprot.readListEnd();
          }
          return vIntegers;
        case V_LONGS:
          List<Long> vLongs;
          {
            org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
            vLongs = new ArrayList<Long>(_list49.size);
            long _elem50;
            for (int _i51 = 0; _i51 < _list49.size; ++_i51)
            {
              _elem50 = iprot.readI64();
              vLongs.add(_elem50);
            }
            iprot.readListEnd();
          }
          return vLongs;
        case V_DOUBLES:
          List<Double> vDoubles;
          {
            org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
            vDoubles = new ArrayList<Double>(_list52.size);
            double _elem53;
            for (int _i54 = 0; _i54 < _list52.size; ++_i54)
            {
              _elem53 = iprot.readDouble();
              vDoubles.add(_elem53);
            }
            iprot.readListEnd();
          }
          return vDoubles;
        case V_STRINGS:
          List<String> vStrings;
          {
            org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
            vStrings = new ArrayList<String>(_list55.size);
            String _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = iprot.readString();
              vStrings.add(_elem56);
            }
            iprot.readListEnd();
          }
          return vStrings;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_BYTE:
        Byte vByte = (Byte)value_;
        oprot.writeByte(vByte);
        return;
      case V_BOOLEAN:
        Boolean vBoolean = (Boolean)value_;
        oprot.writeBool(vBoolean);
        return;
      case V_SHORT:
        Short vShort = (Short)value_;
        oprot.writeI16(vShort);
        return;
      case V_INTEGER:
        Integer vInteger = (Integer)value_;
        oprot.writeI32(vInteger);
        return;
      case V_LONG:
        Long vLong = (Long)value_;
        oprot.writeI64(vLong);
        return;
      case V_DOUBLE:
        Double vDouble = (Double)value_;
        oprot.writeDouble(vDouble);
        return;
      case V_STRING:
        String vString = (String)value_;
        oprot.writeString(vString);
        return;
      case V_BYTES:
        ByteBuffer vBytes = (ByteBuffer)value_;
        oprot.writeBinary(vBytes);
        return;
      case V_BOOLEANS:
        List<Boolean> vBooleans = (List<Boolean>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, vBooleans.size()));
          for (boolean _iter58 : vBooleans)
          {
            oprot.writeBool(_iter58);
          }
          oprot.writeListEnd();
        }
        return;
      case V_SHORTS:
        List<Short> vShorts = (List<Short>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, vShorts.size()));
          for (short _iter59 : vShorts)
          {
            oprot.writeI16(_iter59);
          }
          oprot.writeListEnd();
        }
        return;
      case V_INTEGERS:
        List<Integer> vIntegers = (List<Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, vIntegers.size()));
          for (int _iter60 : vIntegers)
          {
            oprot.writeI32(_iter60);
          }
          oprot.writeListEnd();
        }
        return;
      case V_LONGS:
        List<Long> vLongs = (List<Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, vLongs.size()));
          for (long _iter61 : vLongs)
          {
            oprot.writeI64(_iter61);
          }
          oprot.writeListEnd();
        }
        return;
      case V_DOUBLES:
        List<Double> vDoubles = (List<Double>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, vDoubles.size()));
          for (double _iter62 : vDoubles)
          {
            oprot.writeDouble(_iter62);
          }
          oprot.writeListEnd();
        }
        return;
      case V_STRINGS:
        List<String> vStrings = (List<String>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, vStrings.size()));
          for (String _iter63 : vStrings)
          {
            oprot.writeString(_iter63);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case V_BYTE:
        return V_BYTE_FIELD_DESC;
      case V_BOOLEAN:
        return V_BOOLEAN_FIELD_DESC;
      case V_SHORT:
        return V_SHORT_FIELD_DESC;
      case V_INTEGER:
        return V_INTEGER_FIELD_DESC;
      case V_LONG:
        return V_LONG_FIELD_DESC;
      case V_DOUBLE:
        return V_DOUBLE_FIELD_DESC;
      case V_STRING:
        return V_STRING_FIELD_DESC;
      case V_BYTES:
        return V_BYTES_FIELD_DESC;
      case V_BOOLEANS:
        return V_BOOLEANS_FIELD_DESC;
      case V_SHORTS:
        return V_SHORTS_FIELD_DESC;
      case V_INTEGERS:
        return V_INTEGERS_FIELD_DESC;
      case V_LONGS:
        return V_LONGS_FIELD_DESC;
      case V_DOUBLES:
        return V_DOUBLES_FIELD_DESC;
      case V_STRINGS:
        return V_STRINGS_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public byte getVByte() {
    if (getSetField() == _Fields.V_BYTE) {
      return (Byte)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vByte' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVByte(byte value) {
    setField_ = _Fields.V_BYTE;
    value_ = value;
  }

  public boolean getVBoolean() {
    if (getSetField() == _Fields.V_BOOLEAN) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vBoolean' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVBoolean(boolean value) {
    setField_ = _Fields.V_BOOLEAN;
    value_ = value;
  }

  public short getVShort() {
    if (getSetField() == _Fields.V_SHORT) {
      return (Short)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vShort' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVShort(short value) {
    setField_ = _Fields.V_SHORT;
    value_ = value;
  }

  public int getVInteger() {
    if (getSetField() == _Fields.V_INTEGER) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vInteger' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVInteger(int value) {
    setField_ = _Fields.V_INTEGER;
    value_ = value;
  }

  public long getVLong() {
    if (getSetField() == _Fields.V_LONG) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vLong' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVLong(long value) {
    setField_ = _Fields.V_LONG;
    value_ = value;
  }

  public double getVDouble() {
    if (getSetField() == _Fields.V_DOUBLE) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vDouble' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVDouble(double value) {
    setField_ = _Fields.V_DOUBLE;
    value_ = value;
  }

  public String getVString() {
    if (getSetField() == _Fields.V_STRING) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vString' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVString(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_STRING;
    value_ = value;
  }

  public byte[] getVBytes() {
    setVBytes(org.apache.thrift.TBaseHelper.rightSize(bufferForVBytes()));
    ByteBuffer b = bufferForVBytes();
    return b == null ? null : b.array();
  }

  public ByteBuffer bufferForVBytes() {
    if (getSetField() == _Fields.V_BYTES) {
      return org.apache.thrift.TBaseHelper.copyBinary((ByteBuffer)getFieldValue());
    } else {
      throw new RuntimeException("Cannot get field 'vBytes' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVBytes(byte[] value) {
    setVBytes(ByteBuffer.wrap(Arrays.copyOf(value, value.length)));
  }

  public void setVBytes(ByteBuffer value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_BYTES;
    value_ = value;
  }

  public List<Boolean> getVBooleans() {
    if (getSetField() == _Fields.V_BOOLEANS) {
      return (List<Boolean>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vBooleans' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVBooleans(List<Boolean> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_BOOLEANS;
    value_ = value;
  }

  public List<Short> getVShorts() {
    if (getSetField() == _Fields.V_SHORTS) {
      return (List<Short>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vShorts' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVShorts(List<Short> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_SHORTS;
    value_ = value;
  }

  public List<Integer> getVIntegers() {
    if (getSetField() == _Fields.V_INTEGERS) {
      return (List<Integer>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vIntegers' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVIntegers(List<Integer> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_INTEGERS;
    value_ = value;
  }

  public List<Long> getVLongs() {
    if (getSetField() == _Fields.V_LONGS) {
      return (List<Long>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vLongs' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVLongs(List<Long> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_LONGS;
    value_ = value;
  }

  public List<Double> getVDoubles() {
    if (getSetField() == _Fields.V_DOUBLES) {
      return (List<Double>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vDoubles' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVDoubles(List<Double> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_DOUBLES;
    value_ = value;
  }

  public List<String> getVStrings() {
    if (getSetField() == _Fields.V_STRINGS) {
      return (List<String>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'vStrings' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVStrings(List<String> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_STRINGS;
    value_ = value;
  }

  public boolean isSetVByte() {
    return setField_ == _Fields.V_BYTE;
  }


  public boolean isSetVBoolean() {
    return setField_ == _Fields.V_BOOLEAN;
  }


  public boolean isSetVShort() {
    return setField_ == _Fields.V_SHORT;
  }


  public boolean isSetVInteger() {
    return setField_ == _Fields.V_INTEGER;
  }


  public boolean isSetVLong() {
    return setField_ == _Fields.V_LONG;
  }


  public boolean isSetVDouble() {
    return setField_ == _Fields.V_DOUBLE;
  }


  public boolean isSetVString() {
    return setField_ == _Fields.V_STRING;
  }


  public boolean isSetVBytes() {
    return setField_ == _Fields.V_BYTES;
  }


  public boolean isSetVBooleans() {
    return setField_ == _Fields.V_BOOLEANS;
  }


  public boolean isSetVShorts() {
    return setField_ == _Fields.V_SHORTS;
  }


  public boolean isSetVIntegers() {
    return setField_ == _Fields.V_INTEGERS;
  }


  public boolean isSetVLongs() {
    return setField_ == _Fields.V_LONGS;
  }


  public boolean isSetVDoubles() {
    return setField_ == _Fields.V_DOUBLES;
  }


  public boolean isSetVStrings() {
    return setField_ == _Fields.V_STRINGS;
  }


  public boolean equals(Object other) {
    if (other instanceof Variant) {
      return equals((Variant)other);
    } else {
      return false;
    }
  }

  public boolean equals(Variant other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Variant other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
