/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package uk.ac.york.mondo.integration.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-25")
public class OfflineCollaboration {

  public interface Iface {

    public List<String> listGoldRepositories() throws UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException;

    public void regenerateFrontRepositories(String goldRepoURL) throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException;

    public String getMyFrontRepositoryURL(String goldRepoURL) throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException;

    public String getOnlineCollaborationURL(String goldRepoURL) throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void listGoldRepositories(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void regenerateFrontRepositories(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyFrontRepositoryURL(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOnlineCollaborationURL(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<String> listGoldRepositories() throws UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException
    {
      send_listGoldRepositories();
      return recv_listGoldRepositories();
    }

    public void send_listGoldRepositories() throws org.apache.thrift.TException
    {
      listGoldRepositories_args args = new listGoldRepositories_args();
      sendBase("listGoldRepositories", args);
    }

    public List<String> recv_listGoldRepositories() throws UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException
    {
      listGoldRepositories_result result = new listGoldRepositories_result();
      receiveBase(result, "listGoldRepositories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listGoldRepositories failed: unknown result");
    }

    public void regenerateFrontRepositories(String goldRepoURL) throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException
    {
      send_regenerateFrontRepositories(goldRepoURL);
      recv_regenerateFrontRepositories();
    }

    public void send_regenerateFrontRepositories(String goldRepoURL) throws org.apache.thrift.TException
    {
      regenerateFrontRepositories_args args = new regenerateFrontRepositories_args();
      args.setGoldRepoURL(goldRepoURL);
      sendBase("regenerateFrontRepositories", args);
    }

    public void recv_regenerateFrontRepositories() throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException
    {
      regenerateFrontRepositories_result result = new regenerateFrontRepositories_result();
      receiveBase(result, "regenerateFrontRepositories");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      return;
    }

    public String getMyFrontRepositoryURL(String goldRepoURL) throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException
    {
      send_getMyFrontRepositoryURL(goldRepoURL);
      return recv_getMyFrontRepositoryURL();
    }

    public void send_getMyFrontRepositoryURL(String goldRepoURL) throws org.apache.thrift.TException
    {
      getMyFrontRepositoryURL_args args = new getMyFrontRepositoryURL_args();
      args.setGoldRepoURL(goldRepoURL);
      sendBase("getMyFrontRepositoryURL", args);
    }

    public String recv_getMyFrontRepositoryURL() throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException
    {
      getMyFrontRepositoryURL_result result = new getMyFrontRepositoryURL_result();
      receiveBase(result, "getMyFrontRepositoryURL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyFrontRepositoryURL failed: unknown result");
    }

    public String getOnlineCollaborationURL(String goldRepoURL) throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException
    {
      send_getOnlineCollaborationURL(goldRepoURL);
      return recv_getOnlineCollaborationURL();
    }

    public void send_getOnlineCollaborationURL(String goldRepoURL) throws org.apache.thrift.TException
    {
      getOnlineCollaborationURL_args args = new getOnlineCollaborationURL_args();
      args.setGoldRepoURL(goldRepoURL);
      sendBase("getOnlineCollaborationURL", args);
    }

    public String recv_getOnlineCollaborationURL() throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException
    {
      getOnlineCollaborationURL_result result = new getOnlineCollaborationURL_result();
      receiveBase(result, "getOnlineCollaborationURL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOnlineCollaborationURL failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void listGoldRepositories(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listGoldRepositories_call method_call = new listGoldRepositories_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listGoldRepositories_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listGoldRepositories_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listGoldRepositories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listGoldRepositories_args args = new listGoldRepositories_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listGoldRepositories();
      }
    }

    public void regenerateFrontRepositories(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      regenerateFrontRepositories_call method_call = new regenerateFrontRepositories_call(goldRepoURL, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class regenerateFrontRepositories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String goldRepoURL;
      public regenerateFrontRepositories_call(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.goldRepoURL = goldRepoURL;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("regenerateFrontRepositories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        regenerateFrontRepositories_args args = new regenerateFrontRepositories_args();
        args.setGoldRepoURL(goldRepoURL);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_regenerateFrontRepositories();
      }
    }

    public void getMyFrontRepositoryURL(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyFrontRepositoryURL_call method_call = new getMyFrontRepositoryURL_call(goldRepoURL, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyFrontRepositoryURL_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String goldRepoURL;
      public getMyFrontRepositoryURL_call(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.goldRepoURL = goldRepoURL;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyFrontRepositoryURL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyFrontRepositoryURL_args args = new getMyFrontRepositoryURL_args();
        args.setGoldRepoURL(goldRepoURL);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyFrontRepositoryURL();
      }
    }

    public void getOnlineCollaborationURL(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOnlineCollaborationURL_call method_call = new getOnlineCollaborationURL_call(goldRepoURL, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOnlineCollaborationURL_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String goldRepoURL;
      public getOnlineCollaborationURL_call(String goldRepoURL, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.goldRepoURL = goldRepoURL;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOnlineCollaborationURL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOnlineCollaborationURL_args args = new getOnlineCollaborationURL_args();
        args.setGoldRepoURL(goldRepoURL);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws GoldRepoNotFound, UnauthorizedRepositoryOperation, OfflineCollaborationInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOnlineCollaborationURL();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("listGoldRepositories", new listGoldRepositories());
      processMap.put("regenerateFrontRepositories", new regenerateFrontRepositories());
      processMap.put("getMyFrontRepositoryURL", new getMyFrontRepositoryURL());
      processMap.put("getOnlineCollaborationURL", new getOnlineCollaborationURL());
      return processMap;
    }

    public static class listGoldRepositories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listGoldRepositories_args> {
      public listGoldRepositories() {
        super("listGoldRepositories");
      }

      public listGoldRepositories_args getEmptyArgsInstance() {
        return new listGoldRepositories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listGoldRepositories_result getResult(I iface, listGoldRepositories_args args) throws org.apache.thrift.TException {
        listGoldRepositories_result result = new listGoldRepositories_result();
        try {
          result.success = iface.listGoldRepositories();
        } catch (UnauthorizedRepositoryOperation err1) {
          result.err1 = err1;
        } catch (OfflineCollaborationInternalError err2) {
          result.err2 = err2;
        }
        return result;
      }
    }

    public static class regenerateFrontRepositories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, regenerateFrontRepositories_args> {
      public regenerateFrontRepositories() {
        super("regenerateFrontRepositories");
      }

      public regenerateFrontRepositories_args getEmptyArgsInstance() {
        return new regenerateFrontRepositories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public regenerateFrontRepositories_result getResult(I iface, regenerateFrontRepositories_args args) throws org.apache.thrift.TException {
        regenerateFrontRepositories_result result = new regenerateFrontRepositories_result();
        try {
          iface.regenerateFrontRepositories(args.goldRepoURL);
        } catch (GoldRepoNotFound err1) {
          result.err1 = err1;
        } catch (UnauthorizedRepositoryOperation err2) {
          result.err2 = err2;
        } catch (OfflineCollaborationInternalError err3) {
          result.err3 = err3;
        }
        return result;
      }
    }

    public static class getMyFrontRepositoryURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyFrontRepositoryURL_args> {
      public getMyFrontRepositoryURL() {
        super("getMyFrontRepositoryURL");
      }

      public getMyFrontRepositoryURL_args getEmptyArgsInstance() {
        return new getMyFrontRepositoryURL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyFrontRepositoryURL_result getResult(I iface, getMyFrontRepositoryURL_args args) throws org.apache.thrift.TException {
        getMyFrontRepositoryURL_result result = new getMyFrontRepositoryURL_result();
        try {
          result.success = iface.getMyFrontRepositoryURL(args.goldRepoURL);
        } catch (GoldRepoNotFound err1) {
          result.err1 = err1;
        } catch (UnauthorizedRepositoryOperation err2) {
          result.err2 = err2;
        } catch (OfflineCollaborationInternalError err3) {
          result.err3 = err3;
        }
        return result;
      }
    }

    public static class getOnlineCollaborationURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOnlineCollaborationURL_args> {
      public getOnlineCollaborationURL() {
        super("getOnlineCollaborationURL");
      }

      public getOnlineCollaborationURL_args getEmptyArgsInstance() {
        return new getOnlineCollaborationURL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOnlineCollaborationURL_result getResult(I iface, getOnlineCollaborationURL_args args) throws org.apache.thrift.TException {
        getOnlineCollaborationURL_result result = new getOnlineCollaborationURL_result();
        try {
          result.success = iface.getOnlineCollaborationURL(args.goldRepoURL);
        } catch (GoldRepoNotFound err1) {
          result.err1 = err1;
        } catch (UnauthorizedRepositoryOperation err2) {
          result.err2 = err2;
        } catch (OfflineCollaborationInternalError err3) {
          result.err3 = err3;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("listGoldRepositories", new listGoldRepositories());
      processMap.put("regenerateFrontRepositories", new regenerateFrontRepositories());
      processMap.put("getMyFrontRepositoryURL", new getMyFrontRepositoryURL());
      processMap.put("getOnlineCollaborationURL", new getOnlineCollaborationURL());
      return processMap;
    }

    public static class listGoldRepositories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listGoldRepositories_args, List<String>> {
      public listGoldRepositories() {
        super("listGoldRepositories");
      }

      public listGoldRepositories_args getEmptyArgsInstance() {
        return new listGoldRepositories_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            listGoldRepositories_result result = new listGoldRepositories_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listGoldRepositories_result result = new listGoldRepositories_result();
            if (e instanceof UnauthorizedRepositoryOperation) {
                        result.err1 = (UnauthorizedRepositoryOperation) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof OfflineCollaborationInternalError) {
                        result.err2 = (OfflineCollaborationInternalError) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listGoldRepositories_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.listGoldRepositories(resultHandler);
      }
    }

    public static class regenerateFrontRepositories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, regenerateFrontRepositories_args, Void> {
      public regenerateFrontRepositories() {
        super("regenerateFrontRepositories");
      }

      public regenerateFrontRepositories_args getEmptyArgsInstance() {
        return new regenerateFrontRepositories_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            regenerateFrontRepositories_result result = new regenerateFrontRepositories_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            regenerateFrontRepositories_result result = new regenerateFrontRepositories_result();
            if (e instanceof GoldRepoNotFound) {
                        result.err1 = (GoldRepoNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnauthorizedRepositoryOperation) {
                        result.err2 = (UnauthorizedRepositoryOperation) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof OfflineCollaborationInternalError) {
                        result.err3 = (OfflineCollaborationInternalError) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, regenerateFrontRepositories_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.regenerateFrontRepositories(args.goldRepoURL,resultHandler);
      }
    }

    public static class getMyFrontRepositoryURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyFrontRepositoryURL_args, String> {
      public getMyFrontRepositoryURL() {
        super("getMyFrontRepositoryURL");
      }

      public getMyFrontRepositoryURL_args getEmptyArgsInstance() {
        return new getMyFrontRepositoryURL_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMyFrontRepositoryURL_result result = new getMyFrontRepositoryURL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyFrontRepositoryURL_result result = new getMyFrontRepositoryURL_result();
            if (e instanceof GoldRepoNotFound) {
                        result.err1 = (GoldRepoNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnauthorizedRepositoryOperation) {
                        result.err2 = (UnauthorizedRepositoryOperation) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof OfflineCollaborationInternalError) {
                        result.err3 = (OfflineCollaborationInternalError) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyFrontRepositoryURL_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMyFrontRepositoryURL(args.goldRepoURL,resultHandler);
      }
    }

    public static class getOnlineCollaborationURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOnlineCollaborationURL_args, String> {
      public getOnlineCollaborationURL() {
        super("getOnlineCollaborationURL");
      }

      public getOnlineCollaborationURL_args getEmptyArgsInstance() {
        return new getOnlineCollaborationURL_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getOnlineCollaborationURL_result result = new getOnlineCollaborationURL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOnlineCollaborationURL_result result = new getOnlineCollaborationURL_result();
            if (e instanceof GoldRepoNotFound) {
                        result.err1 = (GoldRepoNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnauthorizedRepositoryOperation) {
                        result.err2 = (UnauthorizedRepositoryOperation) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof OfflineCollaborationInternalError) {
                        result.err3 = (OfflineCollaborationInternalError) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOnlineCollaborationURL_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getOnlineCollaborationURL(args.goldRepoURL,resultHandler);
      }
    }

  }

  public static class listGoldRepositories_args implements org.apache.thrift.TBase<listGoldRepositories_args, listGoldRepositories_args._Fields>, java.io.Serializable, Cloneable, Comparable<listGoldRepositories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listGoldRepositories_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listGoldRepositories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listGoldRepositories_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listGoldRepositories_args.class, metaDataMap);
    }

    public listGoldRepositories_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listGoldRepositories_args(listGoldRepositories_args other) {
    }

    public listGoldRepositories_args deepCopy() {
      return new listGoldRepositories_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listGoldRepositories_args)
        return this.equals((listGoldRepositories_args)that);
      return false;
    }

    public boolean equals(listGoldRepositories_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(listGoldRepositories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listGoldRepositories_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listGoldRepositories_argsStandardSchemeFactory implements SchemeFactory {
      public listGoldRepositories_argsStandardScheme getScheme() {
        return new listGoldRepositories_argsStandardScheme();
      }
    }

    private static class listGoldRepositories_argsStandardScheme extends StandardScheme<listGoldRepositories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listGoldRepositories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listGoldRepositories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listGoldRepositories_argsTupleSchemeFactory implements SchemeFactory {
      public listGoldRepositories_argsTupleScheme getScheme() {
        return new listGoldRepositories_argsTupleScheme();
      }
    }

    private static class listGoldRepositories_argsTupleScheme extends TupleScheme<listGoldRepositories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listGoldRepositories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listGoldRepositories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listGoldRepositories_result implements org.apache.thrift.TBase<listGoldRepositories_result, listGoldRepositories_result._Fields>, java.io.Serializable, Cloneable, Comparable<listGoldRepositories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listGoldRepositories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listGoldRepositories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listGoldRepositories_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public UnauthorizedRepositoryOperation err1; // required
    public OfflineCollaborationInternalError err2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listGoldRepositories_result.class, metaDataMap);
    }

    public listGoldRepositories_result() {
    }

    public listGoldRepositories_result(
      List<String> success,
      UnauthorizedRepositoryOperation err1,
      OfflineCollaborationInternalError err2)
    {
      this();
      this.success = success;
      this.err1 = err1;
      this.err2 = err2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listGoldRepositories_result(listGoldRepositories_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new UnauthorizedRepositoryOperation(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new OfflineCollaborationInternalError(other.err2);
      }
    }

    public listGoldRepositories_result deepCopy() {
      return new listGoldRepositories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
      this.err2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public listGoldRepositories_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnauthorizedRepositoryOperation getErr1() {
      return this.err1;
    }

    public listGoldRepositories_result setErr1(UnauthorizedRepositoryOperation err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public OfflineCollaborationInternalError getErr2() {
      return this.err2;
    }

    public listGoldRepositories_result setErr2(OfflineCollaborationInternalError err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((UnauthorizedRepositoryOperation)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((OfflineCollaborationInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listGoldRepositories_result)
        return this.equals((listGoldRepositories_result)that);
      return false;
    }

    public boolean equals(listGoldRepositories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      return list.hashCode();
    }

    @Override
    public int compareTo(listGoldRepositories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listGoldRepositories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listGoldRepositories_resultStandardSchemeFactory implements SchemeFactory {
      public listGoldRepositories_resultStandardScheme getScheme() {
        return new listGoldRepositories_resultStandardScheme();
      }
    }

    private static class listGoldRepositories_resultStandardScheme extends StandardScheme<listGoldRepositories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listGoldRepositories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list424 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list424.size);
                  String _elem425;
                  for (int _i426 = 0; _i426 < _list424.size; ++_i426)
                  {
                    _elem425 = iprot.readString();
                    struct.success.add(_elem425);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new UnauthorizedRepositoryOperation();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new OfflineCollaborationInternalError();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listGoldRepositories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter427 : struct.success)
            {
              oprot.writeString(_iter427);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listGoldRepositories_resultTupleSchemeFactory implements SchemeFactory {
      public listGoldRepositories_resultTupleScheme getScheme() {
        return new listGoldRepositories_resultTupleScheme();
      }
    }

    private static class listGoldRepositories_resultTupleScheme extends TupleScheme<listGoldRepositories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listGoldRepositories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        if (struct.isSetErr2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter428 : struct.success)
            {
              oprot.writeString(_iter428);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listGoldRepositories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list429 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list429.size);
            String _elem430;
            for (int _i431 = 0; _i431 < _list429.size; ++_i431)
            {
              _elem430 = iprot.readString();
              struct.success.add(_elem430);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new UnauthorizedRepositoryOperation();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err2 = new OfflineCollaborationInternalError();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
      }
    }

  }

  public static class regenerateFrontRepositories_args implements org.apache.thrift.TBase<regenerateFrontRepositories_args, regenerateFrontRepositories_args._Fields>, java.io.Serializable, Cloneable, Comparable<regenerateFrontRepositories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regenerateFrontRepositories_args");

    private static final org.apache.thrift.protocol.TField GOLD_REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("goldRepoURL", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regenerateFrontRepositories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regenerateFrontRepositories_argsTupleSchemeFactory());
    }

    public String goldRepoURL; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOLD_REPO_URL((short)1, "goldRepoURL");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOLD_REPO_URL
            return GOLD_REPO_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOLD_REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("goldRepoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regenerateFrontRepositories_args.class, metaDataMap);
    }

    public regenerateFrontRepositories_args() {
    }

    public regenerateFrontRepositories_args(
      String goldRepoURL)
    {
      this();
      this.goldRepoURL = goldRepoURL;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regenerateFrontRepositories_args(regenerateFrontRepositories_args other) {
      if (other.isSetGoldRepoURL()) {
        this.goldRepoURL = other.goldRepoURL;
      }
    }

    public regenerateFrontRepositories_args deepCopy() {
      return new regenerateFrontRepositories_args(this);
    }

    @Override
    public void clear() {
      this.goldRepoURL = null;
    }

    public String getGoldRepoURL() {
      return this.goldRepoURL;
    }

    public regenerateFrontRepositories_args setGoldRepoURL(String goldRepoURL) {
      this.goldRepoURL = goldRepoURL;
      return this;
    }

    public void unsetGoldRepoURL() {
      this.goldRepoURL = null;
    }

    /** Returns true if field goldRepoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetGoldRepoURL() {
      return this.goldRepoURL != null;
    }

    public void setGoldRepoURLIsSet(boolean value) {
      if (!value) {
        this.goldRepoURL = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOLD_REPO_URL:
        if (value == null) {
          unsetGoldRepoURL();
        } else {
          setGoldRepoURL((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOLD_REPO_URL:
        return getGoldRepoURL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOLD_REPO_URL:
        return isSetGoldRepoURL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regenerateFrontRepositories_args)
        return this.equals((regenerateFrontRepositories_args)that);
      return false;
    }

    public boolean equals(regenerateFrontRepositories_args that) {
      if (that == null)
        return false;

      boolean this_present_goldRepoURL = true && this.isSetGoldRepoURL();
      boolean that_present_goldRepoURL = true && that.isSetGoldRepoURL();
      if (this_present_goldRepoURL || that_present_goldRepoURL) {
        if (!(this_present_goldRepoURL && that_present_goldRepoURL))
          return false;
        if (!this.goldRepoURL.equals(that.goldRepoURL))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_goldRepoURL = true && (isSetGoldRepoURL());
      list.add(present_goldRepoURL);
      if (present_goldRepoURL)
        list.add(goldRepoURL);

      return list.hashCode();
    }

    @Override
    public int compareTo(regenerateFrontRepositories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGoldRepoURL()).compareTo(other.isSetGoldRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGoldRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldRepoURL, other.goldRepoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regenerateFrontRepositories_args(");
      boolean first = true;

      sb.append("goldRepoURL:");
      if (this.goldRepoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.goldRepoURL);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (goldRepoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'goldRepoURL' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regenerateFrontRepositories_argsStandardSchemeFactory implements SchemeFactory {
      public regenerateFrontRepositories_argsStandardScheme getScheme() {
        return new regenerateFrontRepositories_argsStandardScheme();
      }
    }

    private static class regenerateFrontRepositories_argsStandardScheme extends StandardScheme<regenerateFrontRepositories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regenerateFrontRepositories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOLD_REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.goldRepoURL = iprot.readString();
                struct.setGoldRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regenerateFrontRepositories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.goldRepoURL != null) {
          oprot.writeFieldBegin(GOLD_REPO_URL_FIELD_DESC);
          oprot.writeString(struct.goldRepoURL);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regenerateFrontRepositories_argsTupleSchemeFactory implements SchemeFactory {
      public regenerateFrontRepositories_argsTupleScheme getScheme() {
        return new regenerateFrontRepositories_argsTupleScheme();
      }
    }

    private static class regenerateFrontRepositories_argsTupleScheme extends TupleScheme<regenerateFrontRepositories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regenerateFrontRepositories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.goldRepoURL);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regenerateFrontRepositories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.goldRepoURL = iprot.readString();
        struct.setGoldRepoURLIsSet(true);
      }
    }

  }

  public static class regenerateFrontRepositories_result implements org.apache.thrift.TBase<regenerateFrontRepositories_result, regenerateFrontRepositories_result._Fields>, java.io.Serializable, Cloneable, Comparable<regenerateFrontRepositories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regenerateFrontRepositories_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regenerateFrontRepositories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regenerateFrontRepositories_resultTupleSchemeFactory());
    }

    public GoldRepoNotFound err1; // required
    public UnauthorizedRepositoryOperation err2; // required
    public OfflineCollaborationInternalError err3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regenerateFrontRepositories_result.class, metaDataMap);
    }

    public regenerateFrontRepositories_result() {
    }

    public regenerateFrontRepositories_result(
      GoldRepoNotFound err1,
      UnauthorizedRepositoryOperation err2,
      OfflineCollaborationInternalError err3)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regenerateFrontRepositories_result(regenerateFrontRepositories_result other) {
      if (other.isSetErr1()) {
        this.err1 = new GoldRepoNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new UnauthorizedRepositoryOperation(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new OfflineCollaborationInternalError(other.err3);
      }
    }

    public regenerateFrontRepositories_result deepCopy() {
      return new regenerateFrontRepositories_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
    }

    public GoldRepoNotFound getErr1() {
      return this.err1;
    }

    public regenerateFrontRepositories_result setErr1(GoldRepoNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public UnauthorizedRepositoryOperation getErr2() {
      return this.err2;
    }

    public regenerateFrontRepositories_result setErr2(UnauthorizedRepositoryOperation err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public OfflineCollaborationInternalError getErr3() {
      return this.err3;
    }

    public regenerateFrontRepositories_result setErr3(OfflineCollaborationInternalError err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((GoldRepoNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((UnauthorizedRepositoryOperation)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((OfflineCollaborationInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regenerateFrontRepositories_result)
        return this.equals((regenerateFrontRepositories_result)that);
      return false;
    }

    public boolean equals(regenerateFrontRepositories_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      return list.hashCode();
    }

    @Override
    public int compareTo(regenerateFrontRepositories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regenerateFrontRepositories_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regenerateFrontRepositories_resultStandardSchemeFactory implements SchemeFactory {
      public regenerateFrontRepositories_resultStandardScheme getScheme() {
        return new regenerateFrontRepositories_resultStandardScheme();
      }
    }

    private static class regenerateFrontRepositories_resultStandardScheme extends StandardScheme<regenerateFrontRepositories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regenerateFrontRepositories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new GoldRepoNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new UnauthorizedRepositoryOperation();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new OfflineCollaborationInternalError();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regenerateFrontRepositories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regenerateFrontRepositories_resultTupleSchemeFactory implements SchemeFactory {
      public regenerateFrontRepositories_resultTupleScheme getScheme() {
        return new regenerateFrontRepositories_resultTupleScheme();
      }
    }

    private static class regenerateFrontRepositories_resultTupleScheme extends TupleScheme<regenerateFrontRepositories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regenerateFrontRepositories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        if (struct.isSetErr3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regenerateFrontRepositories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.err1 = new GoldRepoNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new UnauthorizedRepositoryOperation();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err3 = new OfflineCollaborationInternalError();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
      }
    }

  }

  public static class getMyFrontRepositoryURL_args implements org.apache.thrift.TBase<getMyFrontRepositoryURL_args, getMyFrontRepositoryURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyFrontRepositoryURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyFrontRepositoryURL_args");

    private static final org.apache.thrift.protocol.TField GOLD_REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("goldRepoURL", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyFrontRepositoryURL_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyFrontRepositoryURL_argsTupleSchemeFactory());
    }

    public String goldRepoURL; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOLD_REPO_URL((short)1, "goldRepoURL");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOLD_REPO_URL
            return GOLD_REPO_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOLD_REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("goldRepoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyFrontRepositoryURL_args.class, metaDataMap);
    }

    public getMyFrontRepositoryURL_args() {
    }

    public getMyFrontRepositoryURL_args(
      String goldRepoURL)
    {
      this();
      this.goldRepoURL = goldRepoURL;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyFrontRepositoryURL_args(getMyFrontRepositoryURL_args other) {
      if (other.isSetGoldRepoURL()) {
        this.goldRepoURL = other.goldRepoURL;
      }
    }

    public getMyFrontRepositoryURL_args deepCopy() {
      return new getMyFrontRepositoryURL_args(this);
    }

    @Override
    public void clear() {
      this.goldRepoURL = null;
    }

    public String getGoldRepoURL() {
      return this.goldRepoURL;
    }

    public getMyFrontRepositoryURL_args setGoldRepoURL(String goldRepoURL) {
      this.goldRepoURL = goldRepoURL;
      return this;
    }

    public void unsetGoldRepoURL() {
      this.goldRepoURL = null;
    }

    /** Returns true if field goldRepoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetGoldRepoURL() {
      return this.goldRepoURL != null;
    }

    public void setGoldRepoURLIsSet(boolean value) {
      if (!value) {
        this.goldRepoURL = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOLD_REPO_URL:
        if (value == null) {
          unsetGoldRepoURL();
        } else {
          setGoldRepoURL((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOLD_REPO_URL:
        return getGoldRepoURL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOLD_REPO_URL:
        return isSetGoldRepoURL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyFrontRepositoryURL_args)
        return this.equals((getMyFrontRepositoryURL_args)that);
      return false;
    }

    public boolean equals(getMyFrontRepositoryURL_args that) {
      if (that == null)
        return false;

      boolean this_present_goldRepoURL = true && this.isSetGoldRepoURL();
      boolean that_present_goldRepoURL = true && that.isSetGoldRepoURL();
      if (this_present_goldRepoURL || that_present_goldRepoURL) {
        if (!(this_present_goldRepoURL && that_present_goldRepoURL))
          return false;
        if (!this.goldRepoURL.equals(that.goldRepoURL))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_goldRepoURL = true && (isSetGoldRepoURL());
      list.add(present_goldRepoURL);
      if (present_goldRepoURL)
        list.add(goldRepoURL);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyFrontRepositoryURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGoldRepoURL()).compareTo(other.isSetGoldRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGoldRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldRepoURL, other.goldRepoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyFrontRepositoryURL_args(");
      boolean first = true;

      sb.append("goldRepoURL:");
      if (this.goldRepoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.goldRepoURL);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (goldRepoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'goldRepoURL' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyFrontRepositoryURL_argsStandardSchemeFactory implements SchemeFactory {
      public getMyFrontRepositoryURL_argsStandardScheme getScheme() {
        return new getMyFrontRepositoryURL_argsStandardScheme();
      }
    }

    private static class getMyFrontRepositoryURL_argsStandardScheme extends StandardScheme<getMyFrontRepositoryURL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyFrontRepositoryURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOLD_REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.goldRepoURL = iprot.readString();
                struct.setGoldRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyFrontRepositoryURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.goldRepoURL != null) {
          oprot.writeFieldBegin(GOLD_REPO_URL_FIELD_DESC);
          oprot.writeString(struct.goldRepoURL);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyFrontRepositoryURL_argsTupleSchemeFactory implements SchemeFactory {
      public getMyFrontRepositoryURL_argsTupleScheme getScheme() {
        return new getMyFrontRepositoryURL_argsTupleScheme();
      }
    }

    private static class getMyFrontRepositoryURL_argsTupleScheme extends TupleScheme<getMyFrontRepositoryURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyFrontRepositoryURL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.goldRepoURL);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyFrontRepositoryURL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.goldRepoURL = iprot.readString();
        struct.setGoldRepoURLIsSet(true);
      }
    }

  }

  public static class getMyFrontRepositoryURL_result implements org.apache.thrift.TBase<getMyFrontRepositoryURL_result, getMyFrontRepositoryURL_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyFrontRepositoryURL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyFrontRepositoryURL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyFrontRepositoryURL_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyFrontRepositoryURL_resultTupleSchemeFactory());
    }

    public String success; // required
    public GoldRepoNotFound err1; // required
    public UnauthorizedRepositoryOperation err2; // required
    public OfflineCollaborationInternalError err3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyFrontRepositoryURL_result.class, metaDataMap);
    }

    public getMyFrontRepositoryURL_result() {
    }

    public getMyFrontRepositoryURL_result(
      String success,
      GoldRepoNotFound err1,
      UnauthorizedRepositoryOperation err2,
      OfflineCollaborationInternalError err3)
    {
      this();
      this.success = success;
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyFrontRepositoryURL_result(getMyFrontRepositoryURL_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr1()) {
        this.err1 = new GoldRepoNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new UnauthorizedRepositoryOperation(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new OfflineCollaborationInternalError(other.err3);
      }
    }

    public getMyFrontRepositoryURL_result deepCopy() {
      return new getMyFrontRepositoryURL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMyFrontRepositoryURL_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public GoldRepoNotFound getErr1() {
      return this.err1;
    }

    public getMyFrontRepositoryURL_result setErr1(GoldRepoNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public UnauthorizedRepositoryOperation getErr2() {
      return this.err2;
    }

    public getMyFrontRepositoryURL_result setErr2(UnauthorizedRepositoryOperation err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public OfflineCollaborationInternalError getErr3() {
      return this.err3;
    }

    public getMyFrontRepositoryURL_result setErr3(OfflineCollaborationInternalError err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((GoldRepoNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((UnauthorizedRepositoryOperation)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((OfflineCollaborationInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyFrontRepositoryURL_result)
        return this.equals((getMyFrontRepositoryURL_result)that);
      return false;
    }

    public boolean equals(getMyFrontRepositoryURL_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyFrontRepositoryURL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyFrontRepositoryURL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyFrontRepositoryURL_resultStandardSchemeFactory implements SchemeFactory {
      public getMyFrontRepositoryURL_resultStandardScheme getScheme() {
        return new getMyFrontRepositoryURL_resultStandardScheme();
      }
    }

    private static class getMyFrontRepositoryURL_resultStandardScheme extends StandardScheme<getMyFrontRepositoryURL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyFrontRepositoryURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new GoldRepoNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new UnauthorizedRepositoryOperation();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new OfflineCollaborationInternalError();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyFrontRepositoryURL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyFrontRepositoryURL_resultTupleSchemeFactory implements SchemeFactory {
      public getMyFrontRepositoryURL_resultTupleScheme getScheme() {
        return new getMyFrontRepositoryURL_resultTupleScheme();
      }
    }

    private static class getMyFrontRepositoryURL_resultTupleScheme extends TupleScheme<getMyFrontRepositoryURL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyFrontRepositoryURL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        if (struct.isSetErr2()) {
          optionals.set(2);
        }
        if (struct.isSetErr3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyFrontRepositoryURL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new GoldRepoNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err2 = new UnauthorizedRepositoryOperation();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err3 = new OfflineCollaborationInternalError();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
      }
    }

  }

  public static class getOnlineCollaborationURL_args implements org.apache.thrift.TBase<getOnlineCollaborationURL_args, getOnlineCollaborationURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineCollaborationURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineCollaborationURL_args");

    private static final org.apache.thrift.protocol.TField GOLD_REPO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("goldRepoURL", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineCollaborationURL_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineCollaborationURL_argsTupleSchemeFactory());
    }

    public String goldRepoURL; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOLD_REPO_URL((short)1, "goldRepoURL");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOLD_REPO_URL
            return GOLD_REPO_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOLD_REPO_URL, new org.apache.thrift.meta_data.FieldMetaData("goldRepoURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineCollaborationURL_args.class, metaDataMap);
    }

    public getOnlineCollaborationURL_args() {
    }

    public getOnlineCollaborationURL_args(
      String goldRepoURL)
    {
      this();
      this.goldRepoURL = goldRepoURL;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineCollaborationURL_args(getOnlineCollaborationURL_args other) {
      if (other.isSetGoldRepoURL()) {
        this.goldRepoURL = other.goldRepoURL;
      }
    }

    public getOnlineCollaborationURL_args deepCopy() {
      return new getOnlineCollaborationURL_args(this);
    }

    @Override
    public void clear() {
      this.goldRepoURL = null;
    }

    public String getGoldRepoURL() {
      return this.goldRepoURL;
    }

    public getOnlineCollaborationURL_args setGoldRepoURL(String goldRepoURL) {
      this.goldRepoURL = goldRepoURL;
      return this;
    }

    public void unsetGoldRepoURL() {
      this.goldRepoURL = null;
    }

    /** Returns true if field goldRepoURL is set (has been assigned a value) and false otherwise */
    public boolean isSetGoldRepoURL() {
      return this.goldRepoURL != null;
    }

    public void setGoldRepoURLIsSet(boolean value) {
      if (!value) {
        this.goldRepoURL = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOLD_REPO_URL:
        if (value == null) {
          unsetGoldRepoURL();
        } else {
          setGoldRepoURL((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOLD_REPO_URL:
        return getGoldRepoURL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOLD_REPO_URL:
        return isSetGoldRepoURL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineCollaborationURL_args)
        return this.equals((getOnlineCollaborationURL_args)that);
      return false;
    }

    public boolean equals(getOnlineCollaborationURL_args that) {
      if (that == null)
        return false;

      boolean this_present_goldRepoURL = true && this.isSetGoldRepoURL();
      boolean that_present_goldRepoURL = true && that.isSetGoldRepoURL();
      if (this_present_goldRepoURL || that_present_goldRepoURL) {
        if (!(this_present_goldRepoURL && that_present_goldRepoURL))
          return false;
        if (!this.goldRepoURL.equals(that.goldRepoURL))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_goldRepoURL = true && (isSetGoldRepoURL());
      list.add(present_goldRepoURL);
      if (present_goldRepoURL)
        list.add(goldRepoURL);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineCollaborationURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGoldRepoURL()).compareTo(other.isSetGoldRepoURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGoldRepoURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldRepoURL, other.goldRepoURL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineCollaborationURL_args(");
      boolean first = true;

      sb.append("goldRepoURL:");
      if (this.goldRepoURL == null) {
        sb.append("null");
      } else {
        sb.append(this.goldRepoURL);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (goldRepoURL == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'goldRepoURL' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineCollaborationURL_argsStandardSchemeFactory implements SchemeFactory {
      public getOnlineCollaborationURL_argsStandardScheme getScheme() {
        return new getOnlineCollaborationURL_argsStandardScheme();
      }
    }

    private static class getOnlineCollaborationURL_argsStandardScheme extends StandardScheme<getOnlineCollaborationURL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineCollaborationURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOLD_REPO_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.goldRepoURL = iprot.readString();
                struct.setGoldRepoURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineCollaborationURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.goldRepoURL != null) {
          oprot.writeFieldBegin(GOLD_REPO_URL_FIELD_DESC);
          oprot.writeString(struct.goldRepoURL);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineCollaborationURL_argsTupleSchemeFactory implements SchemeFactory {
      public getOnlineCollaborationURL_argsTupleScheme getScheme() {
        return new getOnlineCollaborationURL_argsTupleScheme();
      }
    }

    private static class getOnlineCollaborationURL_argsTupleScheme extends TupleScheme<getOnlineCollaborationURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineCollaborationURL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.goldRepoURL);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineCollaborationURL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.goldRepoURL = iprot.readString();
        struct.setGoldRepoURLIsSet(true);
      }
    }

  }

  public static class getOnlineCollaborationURL_result implements org.apache.thrift.TBase<getOnlineCollaborationURL_result, getOnlineCollaborationURL_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineCollaborationURL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineCollaborationURL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineCollaborationURL_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineCollaborationURL_resultTupleSchemeFactory());
    }

    public String success; // required
    public GoldRepoNotFound err1; // required
    public UnauthorizedRepositoryOperation err2; // required
    public OfflineCollaborationInternalError err3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineCollaborationURL_result.class, metaDataMap);
    }

    public getOnlineCollaborationURL_result() {
    }

    public getOnlineCollaborationURL_result(
      String success,
      GoldRepoNotFound err1,
      UnauthorizedRepositoryOperation err2,
      OfflineCollaborationInternalError err3)
    {
      this();
      this.success = success;
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineCollaborationURL_result(getOnlineCollaborationURL_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr1()) {
        this.err1 = new GoldRepoNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new UnauthorizedRepositoryOperation(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new OfflineCollaborationInternalError(other.err3);
      }
    }

    public getOnlineCollaborationURL_result deepCopy() {
      return new getOnlineCollaborationURL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getOnlineCollaborationURL_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public GoldRepoNotFound getErr1() {
      return this.err1;
    }

    public getOnlineCollaborationURL_result setErr1(GoldRepoNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public UnauthorizedRepositoryOperation getErr2() {
      return this.err2;
    }

    public getOnlineCollaborationURL_result setErr2(UnauthorizedRepositoryOperation err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public OfflineCollaborationInternalError getErr3() {
      return this.err3;
    }

    public getOnlineCollaborationURL_result setErr3(OfflineCollaborationInternalError err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((GoldRepoNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((UnauthorizedRepositoryOperation)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((OfflineCollaborationInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineCollaborationURL_result)
        return this.equals((getOnlineCollaborationURL_result)that);
      return false;
    }

    public boolean equals(getOnlineCollaborationURL_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineCollaborationURL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineCollaborationURL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineCollaborationURL_resultStandardSchemeFactory implements SchemeFactory {
      public getOnlineCollaborationURL_resultStandardScheme getScheme() {
        return new getOnlineCollaborationURL_resultStandardScheme();
      }
    }

    private static class getOnlineCollaborationURL_resultStandardScheme extends StandardScheme<getOnlineCollaborationURL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineCollaborationURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new GoldRepoNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new UnauthorizedRepositoryOperation();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new OfflineCollaborationInternalError();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineCollaborationURL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineCollaborationURL_resultTupleSchemeFactory implements SchemeFactory {
      public getOnlineCollaborationURL_resultTupleScheme getScheme() {
        return new getOnlineCollaborationURL_resultTupleScheme();
      }
    }

    private static class getOnlineCollaborationURL_resultTupleScheme extends TupleScheme<getOnlineCollaborationURL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineCollaborationURL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        if (struct.isSetErr2()) {
          optionals.set(2);
        }
        if (struct.isSetErr3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineCollaborationURL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new GoldRepoNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err2 = new UnauthorizedRepositoryOperation();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err3 = new OfflineCollaborationInternalError();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
      }
    }

  }

}
