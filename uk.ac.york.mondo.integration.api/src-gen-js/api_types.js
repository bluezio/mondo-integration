//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


CommitItemChangeType = {
  'ADDED' : 0,
  'DELETED' : 1,
  'REPLACED' : 2,
  'UNKNOWN' : 3,
  'UPDATED' : 4
};
AuthenticationFailed = function(args) {
};
Thrift.inherits(AuthenticationFailed, Thrift.TException);
AuthenticationFailed.prototype.name = 'AuthenticationFailed';
AuthenticationFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationFailed.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationFailed');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationGitResourceReference = function(args) {
  this.repositoryUri = null;
  this.branch = null;
  this.commit = null;
  if (args) {
    if (args.repositoryUri !== undefined) {
      this.repositoryUri = args.repositoryUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repositoryUri is unset!');
    }
    if (args.branch !== undefined) {
      this.branch = args.branch;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field branch is unset!');
    }
    if (args.commit !== undefined) {
      this.commit = args.commit;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field commit is unset!');
    }
  }
};
CollaborationGitResourceReference.prototype = {};
CollaborationGitResourceReference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.branch = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.commit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationGitResourceReference.prototype.write = function(output) {
  output.writeStructBegin('CollaborationGitResourceReference');
  if (this.repositoryUri !== null && this.repositoryUri !== undefined) {
    output.writeFieldBegin('repositoryUri', Thrift.Type.STRING, 1);
    output.writeString(this.repositoryUri);
    output.writeFieldEnd();
  }
  if (this.branch !== null && this.branch !== undefined) {
    output.writeFieldBegin('branch', Thrift.Type.STRING, 2);
    output.writeString(this.branch);
    output.writeFieldEnd();
  }
  if (this.commit !== null && this.commit !== undefined) {
    output.writeFieldBegin('commit', Thrift.Type.STRING, 3);
    output.writeString(this.commit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationLockQueryNotFound = function(args) {
};
Thrift.inherits(CollaborationLockQueryNotFound, Thrift.TException);
CollaborationLockQueryNotFound.prototype.name = 'CollaborationLockQueryNotFound';
CollaborationLockQueryNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationLockQueryNotFound.prototype.write = function(output) {
  output.writeStructBegin('CollaborationLockQueryNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationLockQuerySpec = function(args) {
  this.patternFQN = null;
  if (args) {
    if (args.patternFQN !== undefined) {
      this.patternFQN = args.patternFQN;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field patternFQN is unset!');
    }
  }
};
CollaborationLockQuerySpec.prototype = {};
CollaborationLockQuerySpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.patternFQN = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationLockQuerySpec.prototype.write = function(output) {
  output.writeStructBegin('CollaborationLockQuerySpec');
  if (this.patternFQN !== null && this.patternFQN !== undefined) {
    output.writeFieldBegin('patternFQN', Thrift.Type.STRING, 1);
    output.writeString(this.patternFQN);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationQueryBinding = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.value !== undefined) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
CollaborationQueryBinding.prototype = {};
CollaborationQueryBinding.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationQueryBinding.prototype.write = function(output) {
  output.writeStructBegin('CollaborationQueryBinding');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationResourceReference = function(args) {
  this.repositoryUri = null;
  if (args) {
    if (args.repositoryUri !== undefined) {
      this.repositoryUri = args.repositoryUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repositoryUri is unset!');
    }
  }
};
CollaborationResourceReference.prototype = {};
CollaborationResourceReference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationResourceReference.prototype.write = function(output) {
  output.writeStructBegin('CollaborationResourceReference');
  if (this.repositoryUri !== null && this.repositoryUri !== undefined) {
    output.writeFieldBegin('repositoryUri', Thrift.Type.STRING, 1);
    output.writeString(this.repositoryUri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationSvnResourceReference = function(args) {
  this.repositoryUri = null;
  this.revision = null;
  this.filePath = null;
  if (args) {
    if (args.repositoryUri !== undefined) {
      this.repositoryUri = args.repositoryUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repositoryUri is unset!');
    }
    if (args.revision !== undefined) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
    if (args.filePath !== undefined) {
      this.filePath = args.filePath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePath is unset!');
    }
  }
};
CollaborationSvnResourceReference.prototype = {};
CollaborationSvnResourceReference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.revision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationSvnResourceReference.prototype.write = function(output) {
  output.writeStructBegin('CollaborationSvnResourceReference');
  if (this.repositoryUri !== null && this.repositoryUri !== undefined) {
    output.writeFieldBegin('repositoryUri', Thrift.Type.STRING, 1);
    output.writeString(this.repositoryUri);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.STRING, 2);
    output.writeString(this.revision);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 3);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommitItem = function(args) {
  this.repoURL = null;
  this.revision = null;
  this.path = null;
  this.type = null;
  if (args) {
    if (args.repoURL !== undefined) {
      this.repoURL = args.repoURL;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repoURL is unset!');
    }
    if (args.revision !== undefined) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
    if (args.path !== undefined) {
      this.path = args.path;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field path is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
CommitItem.prototype = {};
CommitItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repoURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.revision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommitItem.prototype.write = function(output) {
  output.writeStructBegin('CommitItem');
  if (this.repoURL !== null && this.repoURL !== undefined) {
    output.writeFieldBegin('repoURL', Thrift.Type.STRING, 1);
    output.writeString(this.repoURL);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.STRING, 2);
    output.writeString(this.revision);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 3);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Credentials = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
  }
};
Credentials.prototype = {};
Credentials.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Credentials.prototype.write = function(output) {
  output.writeStructBegin('Credentials');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DerivedAttributeSpec = function(args) {
  this.metamodelUri = null;
  this.typeName = null;
  this.attributeName = null;
  this.attributeType = null;
  this.isMany = null;
  this.isOrdered = null;
  this.isUnique = null;
  this.derivationLanguage = null;
  this.derivationLogic = null;
  if (args) {
    if (args.metamodelUri !== undefined) {
      this.metamodelUri = args.metamodelUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelUri is unset!');
    }
    if (args.typeName !== undefined) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
    if (args.attributeName !== undefined) {
      this.attributeName = args.attributeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attributeName is unset!');
    }
    if (args.attributeType !== undefined) {
      this.attributeType = args.attributeType;
    }
    if (args.isMany !== undefined) {
      this.isMany = args.isMany;
    }
    if (args.isOrdered !== undefined) {
      this.isOrdered = args.isOrdered;
    }
    if (args.isUnique !== undefined) {
      this.isUnique = args.isUnique;
    }
    if (args.derivationLanguage !== undefined) {
      this.derivationLanguage = args.derivationLanguage;
    }
    if (args.derivationLogic !== undefined) {
      this.derivationLogic = args.derivationLogic;
    }
  }
};
DerivedAttributeSpec.prototype = {};
DerivedAttributeSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.attributeType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isMany = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isOrdered = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isUnique = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.derivationLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.derivationLogic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DerivedAttributeSpec.prototype.write = function(output) {
  output.writeStructBegin('DerivedAttributeSpec');
  if (this.metamodelUri !== null && this.metamodelUri !== undefined) {
    output.writeFieldBegin('metamodelUri', Thrift.Type.STRING, 1);
    output.writeString(this.metamodelUri);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 2);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 3);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  if (this.attributeType !== null && this.attributeType !== undefined) {
    output.writeFieldBegin('attributeType', Thrift.Type.STRING, 4);
    output.writeString(this.attributeType);
    output.writeFieldEnd();
  }
  if (this.isMany !== null && this.isMany !== undefined) {
    output.writeFieldBegin('isMany', Thrift.Type.BOOL, 5);
    output.writeBool(this.isMany);
    output.writeFieldEnd();
  }
  if (this.isOrdered !== null && this.isOrdered !== undefined) {
    output.writeFieldBegin('isOrdered', Thrift.Type.BOOL, 6);
    output.writeBool(this.isOrdered);
    output.writeFieldEnd();
  }
  if (this.isUnique !== null && this.isUnique !== undefined) {
    output.writeFieldBegin('isUnique', Thrift.Type.BOOL, 7);
    output.writeBool(this.isUnique);
    output.writeFieldEnd();
  }
  if (this.derivationLanguage !== null && this.derivationLanguage !== undefined) {
    output.writeFieldBegin('derivationLanguage', Thrift.Type.STRING, 8);
    output.writeString(this.derivationLanguage);
    output.writeFieldEnd();
  }
  if (this.derivationLogic !== null && this.derivationLogic !== undefined) {
    output.writeFieldBegin('derivationLogic', Thrift.Type.STRING, 9);
    output.writeString(this.derivationLogic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

File = function(args) {
  this.name = null;
  this.contents = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.contents !== undefined) {
      this.contents = args.contents;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contents is unset!');
    }
  }
};
File.prototype = {};
File.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contents = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

File.prototype.write = function(output) {
  output.writeStructBegin('File');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.contents !== null && this.contents !== undefined) {
    output.writeFieldBegin('contents', Thrift.Type.STRING, 2);
    output.writeBinary(this.contents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkInstance = function(args) {
  this.name = null;
  this.running = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.running !== undefined) {
      this.running = args.running;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field running is unset!');
    }
  }
};
HawkInstance.prototype = {};
HawkInstance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.running = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkInstance.prototype.write = function(output) {
  output.writeStructBegin('HawkInstance');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.running !== null && this.running !== undefined) {
    output.writeFieldBegin('running', Thrift.Type.BOOL, 2);
    output.writeBool(this.running);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkInstanceNotFound = function(args) {
};
Thrift.inherits(HawkInstanceNotFound, Thrift.TException);
HawkInstanceNotFound.prototype.name = 'HawkInstanceNotFound';
HawkInstanceNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkInstanceNotFound.prototype.write = function(output) {
  output.writeStructBegin('HawkInstanceNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkInstanceNotRunning = function(args) {
};
Thrift.inherits(HawkInstanceNotRunning, Thrift.TException);
HawkInstanceNotRunning.prototype.name = 'HawkInstanceNotRunning';
HawkInstanceNotRunning.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkInstanceNotRunning.prototype.write = function(output) {
  output.writeStructBegin('HawkInstanceNotRunning');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexedAttributeSpec = function(args) {
  this.metamodelUri = null;
  this.typeName = null;
  this.attributeName = null;
  if (args) {
    if (args.metamodelUri !== undefined) {
      this.metamodelUri = args.metamodelUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelUri is unset!');
    }
    if (args.typeName !== undefined) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
    if (args.attributeName !== undefined) {
      this.attributeName = args.attributeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attributeName is unset!');
    }
  }
};
IndexedAttributeSpec.prototype = {};
IndexedAttributeSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexedAttributeSpec.prototype.write = function(output) {
  output.writeStructBegin('IndexedAttributeSpec');
  if (this.metamodelUri !== null && this.metamodelUri !== undefined) {
    output.writeFieldBegin('metamodelUri', Thrift.Type.STRING, 1);
    output.writeString(this.metamodelUri);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 2);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 3);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidCollaborationLockQuerySpec = function(args) {
};
Thrift.inherits(InvalidCollaborationLockQuerySpec, Thrift.TException);
InvalidCollaborationLockQuerySpec.prototype.name = 'InvalidCollaborationLockQuerySpec';
InvalidCollaborationLockQuerySpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidCollaborationLockQuerySpec.prototype.write = function(output) {
  output.writeStructBegin('InvalidCollaborationLockQuerySpec');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidDerivedAttributeSpec = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidDerivedAttributeSpec, Thrift.TException);
InvalidDerivedAttributeSpec.prototype.name = 'InvalidDerivedAttributeSpec';
InvalidDerivedAttributeSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidDerivedAttributeSpec.prototype.write = function(output) {
  output.writeStructBegin('InvalidDerivedAttributeSpec');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidIndexedAttributeSpec = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidIndexedAttributeSpec, Thrift.TException);
InvalidIndexedAttributeSpec.prototype.name = 'InvalidIndexedAttributeSpec';
InvalidIndexedAttributeSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidIndexedAttributeSpec.prototype.write = function(output) {
  output.writeStructBegin('InvalidIndexedAttributeSpec');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidMetamodel = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidMetamodel, Thrift.TException);
InvalidMetamodel.prototype.name = 'InvalidMetamodel';
InvalidMetamodel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidMetamodel.prototype.write = function(output) {
  output.writeStructBegin('InvalidMetamodel');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidPollingConfiguration = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidPollingConfiguration, Thrift.TException);
InvalidPollingConfiguration.prototype.name = 'InvalidPollingConfiguration';
InvalidPollingConfiguration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPollingConfiguration.prototype.write = function(output) {
  output.writeStructBegin('InvalidPollingConfiguration');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidQuery = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidQuery, Thrift.TException);
InvalidQuery.prototype.name = 'InvalidQuery';
InvalidQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidQuery.prototype.write = function(output) {
  output.writeStructBegin('InvalidQuery');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidTransformation = function(args) {
  this.reason = null;
  this.location = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
    if (args.location !== undefined) {
      this.location = args.location;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field location is unset!');
    }
  }
};
Thrift.inherits(InvalidTransformation, Thrift.TException);
InvalidTransformation.prototype.name = 'InvalidTransformation';
InvalidTransformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidTransformation.prototype.write = function(output) {
  output.writeStructBegin('InvalidTransformation');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MergeRequired = function(args) {
};
Thrift.inherits(MergeRequired, Thrift.TException);
MergeRequired.prototype.name = 'MergeRequired';
MergeRequired.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MergeRequired.prototype.write = function(output) {
  output.writeStructBegin('MergeRequired');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MixedReference = function(args) {
  this.id = null;
  this.position = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
  }
};
MixedReference.prototype = {};
MixedReference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MixedReference.prototype.write = function(output) {
  output.writeStructBegin('MixedReference');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 2);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelSpec = function(args) {
  this.name = null;
  this.uri = null;
  this.metamodelUris = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.metamodelUris !== undefined) {
      this.metamodelUris = args.metamodelUris;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelUris is unset!');
    }
  }
};
ModelSpec.prototype = {};
ModelSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.metamodelUris = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.metamodelUris.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelSpec.prototype.write = function(output) {
  output.writeStructBegin('ModelSpec');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.metamodelUris !== null && this.metamodelUris !== undefined) {
    output.writeFieldBegin('metamodelUris', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.metamodelUris.length);
    for (var iter7 in this.metamodelUris)
    {
      if (this.metamodelUris.hasOwnProperty(iter7))
      {
        iter7 = this.metamodelUris[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OperationModel = function(args) {
};
OperationModel.prototype = {};
OperationModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationModel.prototype.write = function(output) {
  output.writeStructBegin('OperationModel');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Repository = function(args) {
  this.uri = null;
  this.type = null;
  if (args) {
    if (args.uri !== undefined) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
Repository.prototype = {};
Repository.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository.prototype.write = function(output) {
  output.writeStructBegin('Repository');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScalarOrReference = function(args) {
  this.vBoolean = null;
  this.vByte = null;
  this.vShort = null;
  this.vInteger = null;
  this.vLong = null;
  this.vReference = null;
  this.vDouble = null;
  this.vString = null;
  if (args) {
    if (args.vBoolean !== undefined) {
      this.vBoolean = args.vBoolean;
    }
    if (args.vByte !== undefined) {
      this.vByte = args.vByte;
    }
    if (args.vShort !== undefined) {
      this.vShort = args.vShort;
    }
    if (args.vInteger !== undefined) {
      this.vInteger = args.vInteger;
    }
    if (args.vLong !== undefined) {
      this.vLong = args.vLong;
    }
    if (args.vReference !== undefined) {
      this.vReference = args.vReference;
    }
    if (args.vDouble !== undefined) {
      this.vDouble = args.vDouble;
    }
    if (args.vString !== undefined) {
      this.vString = args.vString;
    }
  }
};
ScalarOrReference.prototype = {};
ScalarOrReference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.vBoolean = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.vByte = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.vShort = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.vInteger = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.vLong = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.vReference = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.vDouble = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.vString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScalarOrReference.prototype.write = function(output) {
  output.writeStructBegin('ScalarOrReference');
  if (this.vBoolean !== null && this.vBoolean !== undefined) {
    output.writeFieldBegin('vBoolean', Thrift.Type.BOOL, 1);
    output.writeBool(this.vBoolean);
    output.writeFieldEnd();
  }
  if (this.vByte !== null && this.vByte !== undefined) {
    output.writeFieldBegin('vByte', Thrift.Type.BYTE, 2);
    output.writeByte(this.vByte);
    output.writeFieldEnd();
  }
  if (this.vShort !== null && this.vShort !== undefined) {
    output.writeFieldBegin('vShort', Thrift.Type.I16, 3);
    output.writeI16(this.vShort);
    output.writeFieldEnd();
  }
  if (this.vInteger !== null && this.vInteger !== undefined) {
    output.writeFieldBegin('vInteger', Thrift.Type.I32, 4);
    output.writeI32(this.vInteger);
    output.writeFieldEnd();
  }
  if (this.vLong !== null && this.vLong !== undefined) {
    output.writeFieldBegin('vLong', Thrift.Type.I64, 5);
    output.writeI64(this.vLong);
    output.writeFieldEnd();
  }
  if (this.vReference !== null && this.vReference !== undefined) {
    output.writeFieldBegin('vReference', Thrift.Type.I64, 6);
    output.writeI64(this.vReference);
    output.writeFieldEnd();
  }
  if (this.vDouble !== null && this.vDouble !== undefined) {
    output.writeFieldBegin('vDouble', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.vDouble);
    output.writeFieldEnd();
  }
  if (this.vString !== null && this.vString !== undefined) {
    output.writeFieldBegin('vString', Thrift.Type.STRING, 8);
    output.writeString(this.vString);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Slot = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Slot.prototype = {};
Slot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Slot.prototype.write = function(output) {
  output.writeStructBegin('Slot');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Subscription = function(args) {
  this.host = null;
  this.port = null;
  this.queue = null;
  if (args) {
    if (args.host !== undefined) {
      this.host = args.host;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field host is unset!');
    }
    if (args.port !== undefined) {
      this.port = args.port;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
    }
    if (args.queue !== undefined) {
      this.queue = args.queue;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queue is unset!');
    }
  }
};
Subscription.prototype = {};
Subscription.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.queue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Subscription.prototype.write = function(output) {
  output.writeStructBegin('Subscription');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.queue !== null && this.queue !== undefined) {
    output.writeFieldBegin('queue', Thrift.Type.STRING, 3);
    output.writeString(this.queue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformationStatus = function(args) {
  this.finished = null;
  this.elapsed = null;
  this.error = null;
  if (args) {
    if (args.finished !== undefined) {
      this.finished = args.finished;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field finished is unset!');
    }
    if (args.elapsed !== undefined) {
      this.elapsed = args.elapsed;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field elapsed is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field error is unset!');
    }
  }
};
TransformationStatus.prototype = {};
TransformationStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.finished = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.elapsed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformationStatus.prototype.write = function(output) {
  output.writeStructBegin('TransformationStatus');
  if (this.finished !== null && this.finished !== undefined) {
    output.writeFieldBegin('finished', Thrift.Type.BOOL, 1);
    output.writeBool(this.finished);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.I64, 2);
    output.writeI64(this.elapsed);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformationTokenNotFound = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
Thrift.inherits(TransformationTokenNotFound, Thrift.TException);
TransformationTokenNotFound.prototype.name = 'TransformationTokenNotFound';
TransformationTokenNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformationTokenNotFound.prototype.write = function(output) {
  output.writeStructBegin('TransformationTokenNotFound');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownQueryLanguage = function(args) {
};
Thrift.inherits(UnknownQueryLanguage, Thrift.TException);
UnknownQueryLanguage.prototype.name = 'UnknownQueryLanguage';
UnknownQueryLanguage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownQueryLanguage.prototype.write = function(output) {
  output.writeStructBegin('UnknownQueryLanguage');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownRepositoryType = function(args) {
};
Thrift.inherits(UnknownRepositoryType, Thrift.TException);
UnknownRepositoryType.prototype.name = 'UnknownRepositoryType';
UnknownRepositoryType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownRepositoryType.prototype.write = function(output) {
  output.writeStructBegin('UnknownRepositoryType');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserExists = function(args) {
};
Thrift.inherits(UserExists, Thrift.TException);
UserExists.prototype.name = 'UserExists';
UserExists.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserExists.prototype.write = function(output) {
  output.writeStructBegin('UserExists');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserNotFound = function(args) {
};
Thrift.inherits(UserNotFound, Thrift.TException);
UserNotFound.prototype.name = 'UserNotFound';
UserNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserNotFound.prototype.write = function(output) {
  output.writeStructBegin('UserNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserProfile = function(args) {
  this.realName = null;
  this.admin = null;
  if (args) {
    if (args.realName !== undefined) {
      this.realName = args.realName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field realName is unset!');
    }
    if (args.admin !== undefined) {
      this.admin = args.admin;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field admin is unset!');
    }
  }
};
UserProfile.prototype = {};
UserProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.realName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.admin = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfile.prototype.write = function(output) {
  output.writeStructBegin('UserProfile');
  if (this.realName !== null && this.realName !== undefined) {
    output.writeFieldBegin('realName', Thrift.Type.STRING, 1);
    output.writeString(this.realName);
    output.writeFieldEnd();
  }
  if (this.admin !== null && this.admin !== undefined) {
    output.writeFieldBegin('admin', Thrift.Type.BOOL, 2);
    output.writeBool(this.admin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VCSAuthenticationFailed = function(args) {
};
Thrift.inherits(VCSAuthenticationFailed, Thrift.TException);
VCSAuthenticationFailed.prototype.name = 'VCSAuthenticationFailed';
VCSAuthenticationFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VCSAuthenticationFailed.prototype.write = function(output) {
  output.writeStructBegin('VCSAuthenticationFailed');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VCSAuthorizationFailed = function(args) {
};
Thrift.inherits(VCSAuthorizationFailed, Thrift.TException);
VCSAuthorizationFailed.prototype.name = 'VCSAuthorizationFailed';
VCSAuthorizationFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VCSAuthorizationFailed.prototype.write = function(output) {
  output.writeStructBegin('VCSAuthorizationFailed');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Variant = function(args) {
  this.vByte = null;
  this.vBoolean = null;
  this.vShort = null;
  this.vInteger = null;
  this.vLong = null;
  this.vDouble = null;
  this.vString = null;
  this.vBytes = null;
  this.vBooleans = null;
  this.vShorts = null;
  this.vIntegers = null;
  this.vLongs = null;
  this.vDoubles = null;
  this.vStrings = null;
  if (args) {
    if (args.vByte !== undefined) {
      this.vByte = args.vByte;
    }
    if (args.vBoolean !== undefined) {
      this.vBoolean = args.vBoolean;
    }
    if (args.vShort !== undefined) {
      this.vShort = args.vShort;
    }
    if (args.vInteger !== undefined) {
      this.vInteger = args.vInteger;
    }
    if (args.vLong !== undefined) {
      this.vLong = args.vLong;
    }
    if (args.vDouble !== undefined) {
      this.vDouble = args.vDouble;
    }
    if (args.vString !== undefined) {
      this.vString = args.vString;
    }
    if (args.vBytes !== undefined) {
      this.vBytes = args.vBytes;
    }
    if (args.vBooleans !== undefined) {
      this.vBooleans = args.vBooleans;
    }
    if (args.vShorts !== undefined) {
      this.vShorts = args.vShorts;
    }
    if (args.vIntegers !== undefined) {
      this.vIntegers = args.vIntegers;
    }
    if (args.vLongs !== undefined) {
      this.vLongs = args.vLongs;
    }
    if (args.vDoubles !== undefined) {
      this.vDoubles = args.vDoubles;
    }
    if (args.vStrings !== undefined) {
      this.vStrings = args.vStrings;
    }
  }
};
Variant.prototype = {};
Variant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.vByte = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.vBoolean = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.vShort = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.vInteger = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.vLong = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.vDouble = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.vString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.vBytes = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.vBooleans = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readBool().value;
          this.vBooleans.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.vShorts = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readI16().value;
          this.vShorts.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.vIntegers = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = input.readI32().value;
          this.vIntegers.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size29 = 0;
        var _rtmp333;
        this.vLongs = [];
        var _etype32 = 0;
        _rtmp333 = input.readListBegin();
        _etype32 = _rtmp333.etype;
        _size29 = _rtmp333.size;
        for (var _i34 = 0; _i34 < _size29; ++_i34)
        {
          var elem35 = null;
          elem35 = input.readI64().value;
          this.vLongs.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.vDoubles = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readDouble().value;
          this.vDoubles.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size43 = 0;
        var _rtmp347;
        this.vStrings = [];
        var _etype46 = 0;
        _rtmp347 = input.readListBegin();
        _etype46 = _rtmp347.etype;
        _size43 = _rtmp347.size;
        for (var _i48 = 0; _i48 < _size43; ++_i48)
        {
          var elem49 = null;
          elem49 = input.readString().value;
          this.vStrings.push(elem49);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Variant.prototype.write = function(output) {
  output.writeStructBegin('Variant');
  if (this.vByte !== null && this.vByte !== undefined) {
    output.writeFieldBegin('vByte', Thrift.Type.BYTE, 1);
    output.writeByte(this.vByte);
    output.writeFieldEnd();
  }
  if (this.vBoolean !== null && this.vBoolean !== undefined) {
    output.writeFieldBegin('vBoolean', Thrift.Type.BOOL, 2);
    output.writeBool(this.vBoolean);
    output.writeFieldEnd();
  }
  if (this.vShort !== null && this.vShort !== undefined) {
    output.writeFieldBegin('vShort', Thrift.Type.I16, 3);
    output.writeI16(this.vShort);
    output.writeFieldEnd();
  }
  if (this.vInteger !== null && this.vInteger !== undefined) {
    output.writeFieldBegin('vInteger', Thrift.Type.I32, 4);
    output.writeI32(this.vInteger);
    output.writeFieldEnd();
  }
  if (this.vLong !== null && this.vLong !== undefined) {
    output.writeFieldBegin('vLong', Thrift.Type.I64, 5);
    output.writeI64(this.vLong);
    output.writeFieldEnd();
  }
  if (this.vDouble !== null && this.vDouble !== undefined) {
    output.writeFieldBegin('vDouble', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.vDouble);
    output.writeFieldEnd();
  }
  if (this.vString !== null && this.vString !== undefined) {
    output.writeFieldBegin('vString', Thrift.Type.STRING, 7);
    output.writeString(this.vString);
    output.writeFieldEnd();
  }
  if (this.vBytes !== null && this.vBytes !== undefined) {
    output.writeFieldBegin('vBytes', Thrift.Type.STRING, 8);
    output.writeBinary(this.vBytes);
    output.writeFieldEnd();
  }
  if (this.vBooleans !== null && this.vBooleans !== undefined) {
    output.writeFieldBegin('vBooleans', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.BOOL, this.vBooleans.length);
    for (var iter50 in this.vBooleans)
    {
      if (this.vBooleans.hasOwnProperty(iter50))
      {
        iter50 = this.vBooleans[iter50];
        output.writeBool(iter50);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vShorts !== null && this.vShorts !== undefined) {
    output.writeFieldBegin('vShorts', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.I16, this.vShorts.length);
    for (var iter51 in this.vShorts)
    {
      if (this.vShorts.hasOwnProperty(iter51))
      {
        iter51 = this.vShorts[iter51];
        output.writeI16(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vIntegers !== null && this.vIntegers !== undefined) {
    output.writeFieldBegin('vIntegers', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.I32, this.vIntegers.length);
    for (var iter52 in this.vIntegers)
    {
      if (this.vIntegers.hasOwnProperty(iter52))
      {
        iter52 = this.vIntegers[iter52];
        output.writeI32(iter52);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vLongs !== null && this.vLongs !== undefined) {
    output.writeFieldBegin('vLongs', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.I64, this.vLongs.length);
    for (var iter53 in this.vLongs)
    {
      if (this.vLongs.hasOwnProperty(iter53))
      {
        iter53 = this.vLongs[iter53];
        output.writeI64(iter53);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vDoubles !== null && this.vDoubles !== undefined) {
    output.writeFieldBegin('vDoubles', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.DOUBLE, this.vDoubles.length);
    for (var iter54 in this.vDoubles)
    {
      if (this.vDoubles.hasOwnProperty(iter54))
      {
        iter54 = this.vDoubles[iter54];
        output.writeDouble(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vStrings !== null && this.vStrings !== undefined) {
    output.writeFieldBegin('vStrings', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.vStrings.length);
    for (var iter55 in this.vStrings)
    {
      if (this.vStrings.hasOwnProperty(iter55))
      {
        iter55 = this.vStrings[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttributeSlot = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.value !== undefined) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
AttributeSlot.prototype = {};
AttributeSlot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new Variant();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributeSlot.prototype.write = function(output) {
  output.writeStructBegin('AttributeSlot');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationQueryInvocationSpecification = function(args) {
  this.patternFQN = null;
  this.bindings = null;
  if (args) {
    if (args.patternFQN !== undefined) {
      this.patternFQN = args.patternFQN;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field patternFQN is unset!');
    }
    if (args.bindings !== undefined) {
      this.bindings = args.bindings;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bindings is unset!');
    }
  }
};
CollaborationQueryInvocationSpecification.prototype = {};
CollaborationQueryInvocationSpecification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.patternFQN = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.bindings = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new CollaborationQueryBinding();
          elem62.read(input);
          this.bindings.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationQueryInvocationSpecification.prototype.write = function(output) {
  output.writeStructBegin('CollaborationQueryInvocationSpecification');
  if (this.patternFQN !== null && this.patternFQN !== undefined) {
    output.writeFieldBegin('patternFQN', Thrift.Type.STRING, 1);
    output.writeString(this.patternFQN);
    output.writeFieldEnd();
  }
  if (this.bindings !== null && this.bindings !== undefined) {
    output.writeFieldBegin('bindings', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.bindings.length);
    for (var iter63 in this.bindings)
    {
      if (this.bindings.hasOwnProperty(iter63))
      {
        iter63 = this.bindings[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationResource = function(args) {
  this.file = null;
  if (args) {
    if (args.file !== undefined) {
      this.file = args.file;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field file is unset!');
    }
  }
};
CollaborationResource.prototype = {};
CollaborationResource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.file = new File();
        this.file.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationResource.prototype.write = function(output) {
  output.writeStructBegin('CollaborationResource');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRUCT, 1);
    this.file.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationResourceLocked = function(args) {
  this.resourceReference = null;
  if (args) {
    if (args.resourceReference !== undefined) {
      this.resourceReference = args.resourceReference;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resourceReference is unset!');
    }
  }
};
Thrift.inherits(CollaborationResourceLocked, Thrift.TException);
CollaborationResourceLocked.prototype.name = 'CollaborationResourceLocked';
CollaborationResourceLocked.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.resourceReference = new CollaborationResourceReference();
        this.resourceReference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationResourceLocked.prototype.write = function(output) {
  output.writeStructBegin('CollaborationResourceLocked');
  if (this.resourceReference !== null && this.resourceReference !== undefined) {
    output.writeFieldBegin('resourceReference', Thrift.Type.STRUCT, 1);
    this.resourceReference.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CollaborationResourceNotFound = function(args) {
  this.resourceReference = null;
  if (args) {
    if (args.resourceReference !== undefined) {
      this.resourceReference = args.resourceReference;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resourceReference is unset!');
    }
  }
};
Thrift.inherits(CollaborationResourceNotFound, Thrift.TException);
CollaborationResourceNotFound.prototype.name = 'CollaborationResourceNotFound';
CollaborationResourceNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.resourceReference = new CollaborationResourceReference();
        this.resourceReference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollaborationResourceNotFound.prototype.write = function(output) {
  output.writeStructBegin('CollaborationResourceNotFound');
  if (this.resourceReference !== null && this.resourceReference !== undefined) {
    output.writeFieldBegin('resourceReference', Thrift.Type.STRUCT, 1);
    this.resourceReference.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkAttributeRemovalEvent = function(args) {
  this.vcsItem = null;
  this.id = null;
  this.attribute = null;
  if (args) {
    if (args.vcsItem !== undefined) {
      this.vcsItem = args.vcsItem;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.attribute !== undefined) {
      this.attribute = args.attribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attribute is unset!');
    }
  }
};
HawkAttributeRemovalEvent.prototype = {};
HawkAttributeRemovalEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkAttributeRemovalEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkAttributeRemovalEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 3);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkAttributeUpdateEvent = function(args) {
  this.vcsItem = null;
  this.id = null;
  this.attribute = null;
  this.value = null;
  if (args) {
    if (args.vcsItem !== undefined) {
      this.vcsItem = args.vcsItem;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.attribute !== undefined) {
      this.attribute = args.attribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attribute is unset!');
    }
    if (args.value !== undefined) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
HawkAttributeUpdateEvent.prototype = {};
HawkAttributeUpdateEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new Variant();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkAttributeUpdateEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkAttributeUpdateEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 3);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 4);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkModelElementAdditionEvent = function(args) {
  this.vcsItem = null;
  this.metamodelURI = null;
  this.typeName = null;
  this.id = null;
  if (args) {
    if (args.vcsItem !== undefined) {
      this.vcsItem = args.vcsItem;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.metamodelURI !== undefined) {
      this.metamodelURI = args.metamodelURI;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelURI is unset!');
    }
    if (args.typeName !== undefined) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
HawkModelElementAdditionEvent.prototype = {};
HawkModelElementAdditionEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelURI = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkModelElementAdditionEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkModelElementAdditionEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.metamodelURI !== null && this.metamodelURI !== undefined) {
    output.writeFieldBegin('metamodelURI', Thrift.Type.STRING, 2);
    output.writeString(this.metamodelURI);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 3);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkModelElementRemovalEvent = function(args) {
  this.vcsItem = null;
  this.id = null;
  if (args) {
    if (args.vcsItem !== undefined) {
      this.vcsItem = args.vcsItem;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
HawkModelElementRemovalEvent.prototype = {};
HawkModelElementRemovalEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkModelElementRemovalEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkModelElementRemovalEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkReferenceAdditionEvent = function(args) {
  this.vcsItem = null;
  this.sourceId = null;
  this.targetId = null;
  this.refName = null;
  if (args) {
    if (args.vcsItem !== undefined) {
      this.vcsItem = args.vcsItem;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.sourceId !== undefined) {
      this.sourceId = args.sourceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceId is unset!');
    }
    if (args.targetId !== undefined) {
      this.targetId = args.targetId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field targetId is unset!');
    }
    if (args.refName !== undefined) {
      this.refName = args.refName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refName is unset!');
    }
  }
};
HawkReferenceAdditionEvent.prototype = {};
HawkReferenceAdditionEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.refName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkReferenceAdditionEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkReferenceAdditionEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceId !== null && this.sourceId !== undefined) {
    output.writeFieldBegin('sourceId', Thrift.Type.STRING, 2);
    output.writeString(this.sourceId);
    output.writeFieldEnd();
  }
  if (this.targetId !== null && this.targetId !== undefined) {
    output.writeFieldBegin('targetId', Thrift.Type.STRING, 3);
    output.writeString(this.targetId);
    output.writeFieldEnd();
  }
  if (this.refName !== null && this.refName !== undefined) {
    output.writeFieldBegin('refName', Thrift.Type.STRING, 4);
    output.writeString(this.refName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkReferenceRemovalEvent = function(args) {
  this.vcsItem = null;
  this.sourceId = null;
  this.targetId = null;
  this.refName = null;
  if (args) {
    if (args.vcsItem !== undefined) {
      this.vcsItem = args.vcsItem;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vcsItem is unset!');
    }
    if (args.sourceId !== undefined) {
      this.sourceId = args.sourceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceId is unset!');
    }
    if (args.targetId !== undefined) {
      this.targetId = args.targetId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field targetId is unset!');
    }
    if (args.refName !== undefined) {
      this.refName = args.refName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refName is unset!');
    }
  }
};
HawkReferenceRemovalEvent.prototype = {};
HawkReferenceRemovalEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vcsItem = new CommitItem();
        this.vcsItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.refName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkReferenceRemovalEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkReferenceRemovalEvent');
  if (this.vcsItem !== null && this.vcsItem !== undefined) {
    output.writeFieldBegin('vcsItem', Thrift.Type.STRUCT, 1);
    this.vcsItem.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceId !== null && this.sourceId !== undefined) {
    output.writeFieldBegin('sourceId', Thrift.Type.STRING, 2);
    output.writeString(this.sourceId);
    output.writeFieldEnd();
  }
  if (this.targetId !== null && this.targetId !== undefined) {
    output.writeFieldBegin('targetId', Thrift.Type.STRING, 3);
    output.writeString(this.targetId);
    output.writeFieldEnd();
  }
  if (this.refName !== null && this.refName !== undefined) {
    output.writeFieldBegin('refName', Thrift.Type.STRING, 4);
    output.writeString(this.refName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidModelSpec = function(args) {
  this.spec = null;
  this.reason = null;
  if (args) {
    if (args.spec !== undefined) {
      this.spec = args.spec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidModelSpec, Thrift.TException);
InvalidModelSpec.prototype.name = 'InvalidModelSpec';
InvalidModelSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ModelSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidModelSpec.prototype.write = function(output) {
  output.writeStructBegin('InvalidModelSpec');
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 1);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReferenceSlot = function(args) {
  this.name = null;
  this.position = null;
  this.positions = null;
  this.id = null;
  this.ids = null;
  this.mixed = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
    if (args.positions !== undefined) {
      this.positions = args.positions;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.ids !== undefined) {
      this.ids = args.ids;
    }
    if (args.mixed !== undefined) {
      this.mixed = args.mixed;
    }
  }
};
ReferenceSlot.prototype = {};
ReferenceSlot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.positions = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readI32().value;
          this.positions.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.ids = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString().value;
          this.ids.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.mixed = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = new MixedReference();
          elem84.read(input);
          this.mixed.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReferenceSlot.prototype.write = function(output) {
  output.writeStructBegin('ReferenceSlot');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 2);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.positions !== null && this.positions !== undefined) {
    output.writeFieldBegin('positions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.positions.length);
    for (var iter85 in this.positions)
    {
      if (this.positions.hasOwnProperty(iter85))
      {
        iter85 = this.positions[iter85];
        output.writeI32(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter86 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter86))
      {
        iter86 = this.ids[iter86];
        output.writeString(iter86);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mixed !== null && this.mixed !== undefined) {
    output.writeFieldBegin('mixed', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.mixed.length);
    for (var iter87 in this.mixed)
    {
      if (this.mixed.hasOwnProperty(iter87))
      {
        iter87 = this.mixed[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkChangeEvent = function(args) {
  this.modelElementAddition = null;
  this.modelElementRemoval = null;
  this.modelElementAttributeUpdate = null;
  this.modelElementAttributeRemoval = null;
  this.referenceAddition = null;
  this.referenceRemoval = null;
  if (args) {
    if (args.modelElementAddition !== undefined) {
      this.modelElementAddition = args.modelElementAddition;
    }
    if (args.modelElementRemoval !== undefined) {
      this.modelElementRemoval = args.modelElementRemoval;
    }
    if (args.modelElementAttributeUpdate !== undefined) {
      this.modelElementAttributeUpdate = args.modelElementAttributeUpdate;
    }
    if (args.modelElementAttributeRemoval !== undefined) {
      this.modelElementAttributeRemoval = args.modelElementAttributeRemoval;
    }
    if (args.referenceAddition !== undefined) {
      this.referenceAddition = args.referenceAddition;
    }
    if (args.referenceRemoval !== undefined) {
      this.referenceRemoval = args.referenceRemoval;
    }
  }
};
HawkChangeEvent.prototype = {};
HawkChangeEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelElementAddition = new HawkModelElementAdditionEvent();
        this.modelElementAddition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelElementRemoval = new HawkModelElementRemovalEvent();
        this.modelElementRemoval.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelElementAttributeUpdate = new HawkAttributeUpdateEvent();
        this.modelElementAttributeUpdate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.modelElementAttributeRemoval = new HawkAttributeRemovalEvent();
        this.modelElementAttributeRemoval.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.referenceAddition = new HawkReferenceAdditionEvent();
        this.referenceAddition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.referenceRemoval = new HawkReferenceRemovalEvent();
        this.referenceRemoval.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HawkChangeEvent.prototype.write = function(output) {
  output.writeStructBegin('HawkChangeEvent');
  if (this.modelElementAddition !== null && this.modelElementAddition !== undefined) {
    output.writeFieldBegin('modelElementAddition', Thrift.Type.STRUCT, 1);
    this.modelElementAddition.write(output);
    output.writeFieldEnd();
  }
  if (this.modelElementRemoval !== null && this.modelElementRemoval !== undefined) {
    output.writeFieldBegin('modelElementRemoval', Thrift.Type.STRUCT, 2);
    this.modelElementRemoval.write(output);
    output.writeFieldEnd();
  }
  if (this.modelElementAttributeUpdate !== null && this.modelElementAttributeUpdate !== undefined) {
    output.writeFieldBegin('modelElementAttributeUpdate', Thrift.Type.STRUCT, 3);
    this.modelElementAttributeUpdate.write(output);
    output.writeFieldEnd();
  }
  if (this.modelElementAttributeRemoval !== null && this.modelElementAttributeRemoval !== undefined) {
    output.writeFieldBegin('modelElementAttributeRemoval', Thrift.Type.STRUCT, 4);
    this.modelElementAttributeRemoval.write(output);
    output.writeFieldEnd();
  }
  if (this.referenceAddition !== null && this.referenceAddition !== undefined) {
    output.writeFieldBegin('referenceAddition', Thrift.Type.STRUCT, 5);
    this.referenceAddition.write(output);
    output.writeFieldEnd();
  }
  if (this.referenceRemoval !== null && this.referenceRemoval !== undefined) {
    output.writeFieldBegin('referenceRemoval', Thrift.Type.STRUCT, 6);
    this.referenceRemoval.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelElement = function(args) {
  this.id = null;
  this.metamodelUri = null;
  this.typeName = null;
  this.attributes = null;
  this.references = null;
  this.containers = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.metamodelUri !== undefined) {
      this.metamodelUri = args.metamodelUri;
    }
    if (args.typeName !== undefined) {
      this.typeName = args.typeName;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.references !== undefined) {
      this.references = args.references;
    }
    if (args.containers !== undefined) {
      this.containers = args.containers;
    }
  }
};
ModelElement.prototype = {};
ModelElement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.attributes = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new AttributeSlot();
          elem94.read(input);
          this.attributes.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.references = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = new ReferenceSlot();
          elem101.read(input);
          this.references.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.containers = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = new ContainerSlot();
          elem108.read(input);
          this.containers.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelElement.prototype.write = function(output) {
  output.writeStructBegin('ModelElement');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.metamodelUri !== null && this.metamodelUri !== undefined) {
    output.writeFieldBegin('metamodelUri', Thrift.Type.STRING, 2);
    output.writeString(this.metamodelUri);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 3);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter109 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter109))
      {
        iter109 = this.attributes[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.references !== null && this.references !== undefined) {
    output.writeFieldBegin('references', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.references.length);
    for (var iter110 in this.references)
    {
      if (this.references.hasOwnProperty(iter110))
      {
        iter110 = this.references[iter110];
        iter110.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.containers !== null && this.containers !== undefined) {
    output.writeFieldBegin('containers', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.containers.length);
    for (var iter111 in this.containers)
    {
      if (this.containers.hasOwnProperty(iter111))
      {
        iter111 = this.containers[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContainerSlot = function(args) {
  this.name = null;
  this.elements = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.elements !== undefined) {
      this.elements = args.elements;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field elements is unset!');
    }
  }
};
ContainerSlot.prototype = {};
ContainerSlot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.elements = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ModelElement();
          elem118.read(input);
          this.elements.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContainerSlot.prototype.write = function(output) {
  output.writeStructBegin('ContainerSlot');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.elements !== null && this.elements !== undefined) {
    output.writeFieldBegin('elements', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.elements.length);
    for (var iter119 in this.elements)
    {
      if (this.elements.hasOwnProperty(iter119))
      {
        iter119 = this.elements[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

