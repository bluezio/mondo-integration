/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mondo_api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-2")
public class Hawk {

  public interface Iface {

    public void create(String name) throws org.apache.thrift.TException;

    public List<HawkInstance> listAll() throws org.apache.thrift.TException;

    public void deleteUser(String name) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public void start(String name) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public void stop(String name) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public void registerMetamodels(String name, List<File> metamodel) throws HawkInstanceNotFound, InvalidMetamodel, org.apache.thrift.TException;

    public void unregisterMetamodel(String name, String metamodel) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public List<String> listMetamodels(String name) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public List<String> query(String name, String query, String language, String scope) throws HawkInstanceNotFound, UnknownQueryLanguage, InvalidQuery, org.apache.thrift.TException;

    public List<ModelElement> resolveProxies(String name, List<ModelElement> proxies) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public void addRepository(String name, String uri, String type, Credentials credentials) throws HawkInstanceNotFound, UnknownRepositoryType, VCSAuthenticationFailed, org.apache.thrift.TException;

    public void deleteRepository(String name, String uri) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public List<String> listRepositories(String name) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public List<String> listFiles(String name, String repository) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public void configurePolling(String name, int base, int max) throws HawkInstanceNotFound, InvalidPollingConfiguration, org.apache.thrift.TException;

    public void addDerivedAttribute(String name, DerivedAttributeSpec spec) throws HawkInstanceNotFound, InvalidDerivedAttributeSpec, org.apache.thrift.TException;

    public void removeDerivedAttribute(String name, DerivedAttributeSpec spec) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public List<DerivedAttributeSpec> listDerivedAttributes(String name) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public void addIndexedAttribute(String name, IndexedAttributeSpec spec) throws HawkInstanceNotFound, InvalidIndexedAttributeSpec, org.apache.thrift.TException;

    public void removeIndexedAttribute(String name, IndexedAttributeSpec spec) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public List<IndexedAttributeSpec> listIndexedAttributes(String name) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public List<ModelElement> getModel(String name, String repositoryUri, String filePath) throws HawkInstanceNotFound, org.apache.thrift.TException;

    public List<ModelElementChange> watchModelChanges(String name, String repositoryUri, String filePath, ModelElementChangeType changeType, String modelElementType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void create(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listAll(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteUser(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void start(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stop(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerMetamodels(String name, List<File> metamodel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unregisterMetamodel(String name, String metamodel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listMetamodels(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query(String name, String query, String language, String scope, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resolveProxies(String name, List<ModelElement> proxies, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRepository(String name, String uri, String type, Credentials credentials, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteRepository(String name, String uri, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listRepositories(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listFiles(String name, String repository, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void configurePolling(String name, int base, int max, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addDerivedAttribute(String name, DerivedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeDerivedAttribute(String name, DerivedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listDerivedAttributes(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addIndexedAttribute(String name, IndexedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeIndexedAttribute(String name, IndexedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listIndexedAttributes(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getModel(String name, String repositoryUri, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void watchModelChanges(String name, String repositoryUri, String filePath, ModelElementChangeType changeType, String modelElementType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void create(String name) throws org.apache.thrift.TException
    {
      send_create(name);
      recv_create();
    }

    public void send_create(String name) throws org.apache.thrift.TException
    {
      create_args args = new create_args();
      args.setName(name);
      sendBase("create", args);
    }

    public void recv_create() throws org.apache.thrift.TException
    {
      create_result result = new create_result();
      receiveBase(result, "create");
      return;
    }

    public List<HawkInstance> listAll() throws org.apache.thrift.TException
    {
      send_listAll();
      return recv_listAll();
    }

    public void send_listAll() throws org.apache.thrift.TException
    {
      listAll_args args = new listAll_args();
      sendBase("listAll", args);
    }

    public List<HawkInstance> recv_listAll() throws org.apache.thrift.TException
    {
      listAll_result result = new listAll_result();
      receiveBase(result, "listAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listAll failed: unknown result");
    }

    public void deleteUser(String name) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_deleteUser(name);
      recv_deleteUser();
    }

    public void send_deleteUser(String name) throws org.apache.thrift.TException
    {
      deleteUser_args args = new deleteUser_args();
      args.setName(name);
      sendBase("deleteUser", args);
    }

    public void recv_deleteUser() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      deleteUser_result result = new deleteUser_result();
      receiveBase(result, "deleteUser");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public void start(String name) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_start(name);
      recv_start();
    }

    public void send_start(String name) throws org.apache.thrift.TException
    {
      start_args args = new start_args();
      args.setName(name);
      sendBase("start", args);
    }

    public void recv_start() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      start_result result = new start_result();
      receiveBase(result, "start");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public void stop(String name) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_stop(name);
      recv_stop();
    }

    public void send_stop(String name) throws org.apache.thrift.TException
    {
      stop_args args = new stop_args();
      args.setName(name);
      sendBase("stop", args);
    }

    public void recv_stop() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      stop_result result = new stop_result();
      receiveBase(result, "stop");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public void registerMetamodels(String name, List<File> metamodel) throws HawkInstanceNotFound, InvalidMetamodel, org.apache.thrift.TException
    {
      send_registerMetamodels(name, metamodel);
      recv_registerMetamodels();
    }

    public void send_registerMetamodels(String name, List<File> metamodel) throws org.apache.thrift.TException
    {
      registerMetamodels_args args = new registerMetamodels_args();
      args.setName(name);
      args.setMetamodel(metamodel);
      sendBase("registerMetamodels", args);
    }

    public void recv_registerMetamodels() throws HawkInstanceNotFound, InvalidMetamodel, org.apache.thrift.TException
    {
      registerMetamodels_result result = new registerMetamodels_result();
      receiveBase(result, "registerMetamodels");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      return;
    }

    public void unregisterMetamodel(String name, String metamodel) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_unregisterMetamodel(name, metamodel);
      recv_unregisterMetamodel();
    }

    public void send_unregisterMetamodel(String name, String metamodel) throws org.apache.thrift.TException
    {
      unregisterMetamodel_args args = new unregisterMetamodel_args();
      args.setName(name);
      args.setMetamodel(metamodel);
      sendBase("unregisterMetamodel", args);
    }

    public void recv_unregisterMetamodel() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      unregisterMetamodel_result result = new unregisterMetamodel_result();
      receiveBase(result, "unregisterMetamodel");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public List<String> listMetamodels(String name) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_listMetamodels(name);
      return recv_listMetamodels();
    }

    public void send_listMetamodels(String name) throws org.apache.thrift.TException
    {
      listMetamodels_args args = new listMetamodels_args();
      args.setName(name);
      sendBase("listMetamodels", args);
    }

    public List<String> recv_listMetamodels() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      listMetamodels_result result = new listMetamodels_result();
      receiveBase(result, "listMetamodels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMetamodels failed: unknown result");
    }

    public List<String> query(String name, String query, String language, String scope) throws HawkInstanceNotFound, UnknownQueryLanguage, InvalidQuery, org.apache.thrift.TException
    {
      send_query(name, query, language, scope);
      return recv_query();
    }

    public void send_query(String name, String query, String language, String scope) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setName(name);
      args.setQuery(query);
      args.setLanguage(language);
      args.setScope(scope);
      sendBase("query", args);
    }

    public List<String> recv_query() throws HawkInstanceNotFound, UnknownQueryLanguage, InvalidQuery, org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public List<ModelElement> resolveProxies(String name, List<ModelElement> proxies) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_resolveProxies(name, proxies);
      return recv_resolveProxies();
    }

    public void send_resolveProxies(String name, List<ModelElement> proxies) throws org.apache.thrift.TException
    {
      resolveProxies_args args = new resolveProxies_args();
      args.setName(name);
      args.setProxies(proxies);
      sendBase("resolveProxies", args);
    }

    public List<ModelElement> recv_resolveProxies() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      resolveProxies_result result = new resolveProxies_result();
      receiveBase(result, "resolveProxies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resolveProxies failed: unknown result");
    }

    public void addRepository(String name, String uri, String type, Credentials credentials) throws HawkInstanceNotFound, UnknownRepositoryType, VCSAuthenticationFailed, org.apache.thrift.TException
    {
      send_addRepository(name, uri, type, credentials);
      recv_addRepository();
    }

    public void send_addRepository(String name, String uri, String type, Credentials credentials) throws org.apache.thrift.TException
    {
      addRepository_args args = new addRepository_args();
      args.setName(name);
      args.setUri(uri);
      args.setType(type);
      args.setCredentials(credentials);
      sendBase("addRepository", args);
    }

    public void recv_addRepository() throws HawkInstanceNotFound, UnknownRepositoryType, VCSAuthenticationFailed, org.apache.thrift.TException
    {
      addRepository_result result = new addRepository_result();
      receiveBase(result, "addRepository");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      if (result.err3 != null) {
        throw result.err3;
      }
      return;
    }

    public void deleteRepository(String name, String uri) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_deleteRepository(name, uri);
      recv_deleteRepository();
    }

    public void send_deleteRepository(String name, String uri) throws org.apache.thrift.TException
    {
      deleteRepository_args args = new deleteRepository_args();
      args.setName(name);
      args.setUri(uri);
      sendBase("deleteRepository", args);
    }

    public void recv_deleteRepository() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      deleteRepository_result result = new deleteRepository_result();
      receiveBase(result, "deleteRepository");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public List<String> listRepositories(String name) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_listRepositories(name);
      return recv_listRepositories();
    }

    public void send_listRepositories(String name) throws org.apache.thrift.TException
    {
      listRepositories_args args = new listRepositories_args();
      args.setName(name);
      sendBase("listRepositories", args);
    }

    public List<String> recv_listRepositories() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      listRepositories_result result = new listRepositories_result();
      receiveBase(result, "listRepositories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listRepositories failed: unknown result");
    }

    public List<String> listFiles(String name, String repository) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_listFiles(name, repository);
      return recv_listFiles();
    }

    public void send_listFiles(String name, String repository) throws org.apache.thrift.TException
    {
      listFiles_args args = new listFiles_args();
      args.setName(name);
      args.setRepository(repository);
      sendBase("listFiles", args);
    }

    public List<String> recv_listFiles() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      listFiles_result result = new listFiles_result();
      receiveBase(result, "listFiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listFiles failed: unknown result");
    }

    public void configurePolling(String name, int base, int max) throws HawkInstanceNotFound, InvalidPollingConfiguration, org.apache.thrift.TException
    {
      send_configurePolling(name, base, max);
      recv_configurePolling();
    }

    public void send_configurePolling(String name, int base, int max) throws org.apache.thrift.TException
    {
      configurePolling_args args = new configurePolling_args();
      args.setName(name);
      args.setBase(base);
      args.setMax(max);
      sendBase("configurePolling", args);
    }

    public void recv_configurePolling() throws HawkInstanceNotFound, InvalidPollingConfiguration, org.apache.thrift.TException
    {
      configurePolling_result result = new configurePolling_result();
      receiveBase(result, "configurePolling");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      return;
    }

    public void addDerivedAttribute(String name, DerivedAttributeSpec spec) throws HawkInstanceNotFound, InvalidDerivedAttributeSpec, org.apache.thrift.TException
    {
      send_addDerivedAttribute(name, spec);
      recv_addDerivedAttribute();
    }

    public void send_addDerivedAttribute(String name, DerivedAttributeSpec spec) throws org.apache.thrift.TException
    {
      addDerivedAttribute_args args = new addDerivedAttribute_args();
      args.setName(name);
      args.setSpec(spec);
      sendBase("addDerivedAttribute", args);
    }

    public void recv_addDerivedAttribute() throws HawkInstanceNotFound, InvalidDerivedAttributeSpec, org.apache.thrift.TException
    {
      addDerivedAttribute_result result = new addDerivedAttribute_result();
      receiveBase(result, "addDerivedAttribute");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      return;
    }

    public void removeDerivedAttribute(String name, DerivedAttributeSpec spec) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_removeDerivedAttribute(name, spec);
      recv_removeDerivedAttribute();
    }

    public void send_removeDerivedAttribute(String name, DerivedAttributeSpec spec) throws org.apache.thrift.TException
    {
      removeDerivedAttribute_args args = new removeDerivedAttribute_args();
      args.setName(name);
      args.setSpec(spec);
      sendBase("removeDerivedAttribute", args);
    }

    public void recv_removeDerivedAttribute() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      removeDerivedAttribute_result result = new removeDerivedAttribute_result();
      receiveBase(result, "removeDerivedAttribute");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public List<DerivedAttributeSpec> listDerivedAttributes(String name) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_listDerivedAttributes(name);
      return recv_listDerivedAttributes();
    }

    public void send_listDerivedAttributes(String name) throws org.apache.thrift.TException
    {
      listDerivedAttributes_args args = new listDerivedAttributes_args();
      args.setName(name);
      sendBase("listDerivedAttributes", args);
    }

    public List<DerivedAttributeSpec> recv_listDerivedAttributes() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      listDerivedAttributes_result result = new listDerivedAttributes_result();
      receiveBase(result, "listDerivedAttributes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listDerivedAttributes failed: unknown result");
    }

    public void addIndexedAttribute(String name, IndexedAttributeSpec spec) throws HawkInstanceNotFound, InvalidIndexedAttributeSpec, org.apache.thrift.TException
    {
      send_addIndexedAttribute(name, spec);
      recv_addIndexedAttribute();
    }

    public void send_addIndexedAttribute(String name, IndexedAttributeSpec spec) throws org.apache.thrift.TException
    {
      addIndexedAttribute_args args = new addIndexedAttribute_args();
      args.setName(name);
      args.setSpec(spec);
      sendBase("addIndexedAttribute", args);
    }

    public void recv_addIndexedAttribute() throws HawkInstanceNotFound, InvalidIndexedAttributeSpec, org.apache.thrift.TException
    {
      addIndexedAttribute_result result = new addIndexedAttribute_result();
      receiveBase(result, "addIndexedAttribute");
      if (result.err1 != null) {
        throw result.err1;
      }
      if (result.err2 != null) {
        throw result.err2;
      }
      return;
    }

    public void removeIndexedAttribute(String name, IndexedAttributeSpec spec) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_removeIndexedAttribute(name, spec);
      recv_removeIndexedAttribute();
    }

    public void send_removeIndexedAttribute(String name, IndexedAttributeSpec spec) throws org.apache.thrift.TException
    {
      removeIndexedAttribute_args args = new removeIndexedAttribute_args();
      args.setName(name);
      args.setSpec(spec);
      sendBase("removeIndexedAttribute", args);
    }

    public void recv_removeIndexedAttribute() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      removeIndexedAttribute_result result = new removeIndexedAttribute_result();
      receiveBase(result, "removeIndexedAttribute");
      if (result.err1 != null) {
        throw result.err1;
      }
      return;
    }

    public List<IndexedAttributeSpec> listIndexedAttributes(String name) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_listIndexedAttributes(name);
      return recv_listIndexedAttributes();
    }

    public void send_listIndexedAttributes(String name) throws org.apache.thrift.TException
    {
      listIndexedAttributes_args args = new listIndexedAttributes_args();
      args.setName(name);
      sendBase("listIndexedAttributes", args);
    }

    public List<IndexedAttributeSpec> recv_listIndexedAttributes() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      listIndexedAttributes_result result = new listIndexedAttributes_result();
      receiveBase(result, "listIndexedAttributes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listIndexedAttributes failed: unknown result");
    }

    public List<ModelElement> getModel(String name, String repositoryUri, String filePath) throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      send_getModel(name, repositoryUri, filePath);
      return recv_getModel();
    }

    public void send_getModel(String name, String repositoryUri, String filePath) throws org.apache.thrift.TException
    {
      getModel_args args = new getModel_args();
      args.setName(name);
      args.setRepositoryUri(repositoryUri);
      args.setFilePath(filePath);
      sendBase("getModel", args);
    }

    public List<ModelElement> recv_getModel() throws HawkInstanceNotFound, org.apache.thrift.TException
    {
      getModel_result result = new getModel_result();
      receiveBase(result, "getModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err1 != null) {
        throw result.err1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getModel failed: unknown result");
    }

    public List<ModelElementChange> watchModelChanges(String name, String repositoryUri, String filePath, ModelElementChangeType changeType, String modelElementType) throws org.apache.thrift.TException
    {
      send_watchModelChanges(name, repositoryUri, filePath, changeType, modelElementType);
      return recv_watchModelChanges();
    }

    public void send_watchModelChanges(String name, String repositoryUri, String filePath, ModelElementChangeType changeType, String modelElementType) throws org.apache.thrift.TException
    {
      watchModelChanges_args args = new watchModelChanges_args();
      args.setName(name);
      args.setRepositoryUri(repositoryUri);
      args.setFilePath(filePath);
      args.setChangeType(changeType);
      args.setModelElementType(modelElementType);
      sendBase("watchModelChanges", args);
    }

    public List<ModelElementChange> recv_watchModelChanges() throws org.apache.thrift.TException
    {
      watchModelChanges_result result = new watchModelChanges_result();
      receiveBase(result, "watchModelChanges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "watchModelChanges failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void create(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_call method_call = new create_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public create_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_args args = new create_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_create();
      }
    }

    public void listAll(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listAll_call method_call = new listAll_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listAll_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listAll_args args = new listAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HawkInstance> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listAll();
      }
    }

    public void deleteUser(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUser_call method_call = new deleteUser_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public deleteUser_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUser_args args = new deleteUser_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteUser();
      }
    }

    public void start(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      start_call method_call = new start_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class start_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public start_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("start", org.apache.thrift.protocol.TMessageType.CALL, 0));
        start_args args = new start_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_start();
      }
    }

    public void stop(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stop_call method_call = new stop_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public stop_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stop_args args = new stop_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stop();
      }
    }

    public void registerMetamodels(String name, List<File> metamodel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerMetamodels_call method_call = new registerMetamodels_call(name, metamodel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerMetamodels_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private List<File> metamodel;
      public registerMetamodels_call(String name, List<File> metamodel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.metamodel = metamodel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerMetamodels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerMetamodels_args args = new registerMetamodels_args();
        args.setName(name);
        args.setMetamodel(metamodel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, InvalidMetamodel, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerMetamodels();
      }
    }

    public void unregisterMetamodel(String name, String metamodel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unregisterMetamodel_call method_call = new unregisterMetamodel_call(name, metamodel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unregisterMetamodel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String metamodel;
      public unregisterMetamodel_call(String name, String metamodel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.metamodel = metamodel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unregisterMetamodel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unregisterMetamodel_args args = new unregisterMetamodel_args();
        args.setName(name);
        args.setMetamodel(metamodel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unregisterMetamodel();
      }
    }

    public void listMetamodels(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMetamodels_call method_call = new listMetamodels_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMetamodels_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public listMetamodels_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMetamodels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMetamodels_args args = new listMetamodels_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMetamodels();
      }
    }

    public void query(String name, String query, String language, String scope, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(name, query, language, scope, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String query;
      private String language;
      private String scope;
      public query_call(String name, String query, String language, String scope, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.query = query;
        this.language = language;
        this.scope = scope;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setName(name);
        args.setQuery(query);
        args.setLanguage(language);
        args.setScope(scope);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HawkInstanceNotFound, UnknownQueryLanguage, InvalidQuery, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void resolveProxies(String name, List<ModelElement> proxies, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resolveProxies_call method_call = new resolveProxies_call(name, proxies, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resolveProxies_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private List<ModelElement> proxies;
      public resolveProxies_call(String name, List<ModelElement> proxies, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.proxies = proxies;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resolveProxies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resolveProxies_args args = new resolveProxies_args();
        args.setName(name);
        args.setProxies(proxies);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ModelElement> getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resolveProxies();
      }
    }

    public void addRepository(String name, String uri, String type, Credentials credentials, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRepository_call method_call = new addRepository_call(name, uri, type, credentials, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRepository_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String uri;
      private String type;
      private Credentials credentials;
      public addRepository_call(String name, String uri, String type, Credentials credentials, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.uri = uri;
        this.type = type;
        this.credentials = credentials;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRepository", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRepository_args args = new addRepository_args();
        args.setName(name);
        args.setUri(uri);
        args.setType(type);
        args.setCredentials(credentials);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, UnknownRepositoryType, VCSAuthenticationFailed, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addRepository();
      }
    }

    public void deleteRepository(String name, String uri, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRepository_call method_call = new deleteRepository_call(name, uri, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRepository_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String uri;
      public deleteRepository_call(String name, String uri, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.uri = uri;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRepository", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRepository_args args = new deleteRepository_args();
        args.setName(name);
        args.setUri(uri);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteRepository();
      }
    }

    public void listRepositories(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listRepositories_call method_call = new listRepositories_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listRepositories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public listRepositories_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listRepositories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listRepositories_args args = new listRepositories_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listRepositories();
      }
    }

    public void listFiles(String name, String repository, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listFiles_call method_call = new listFiles_call(name, repository, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listFiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String repository;
      public listFiles_call(String name, String repository, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.repository = repository;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listFiles_args args = new listFiles_args();
        args.setName(name);
        args.setRepository(repository);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listFiles();
      }
    }

    public void configurePolling(String name, int base, int max, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      configurePolling_call method_call = new configurePolling_call(name, base, max, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configurePolling_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private int base;
      private int max;
      public configurePolling_call(String name, int base, int max, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.base = base;
        this.max = max;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("configurePolling", org.apache.thrift.protocol.TMessageType.CALL, 0));
        configurePolling_args args = new configurePolling_args();
        args.setName(name);
        args.setBase(base);
        args.setMax(max);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, InvalidPollingConfiguration, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_configurePolling();
      }
    }

    public void addDerivedAttribute(String name, DerivedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDerivedAttribute_call method_call = new addDerivedAttribute_call(name, spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDerivedAttribute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private DerivedAttributeSpec spec;
      public addDerivedAttribute_call(String name, DerivedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.spec = spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDerivedAttribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDerivedAttribute_args args = new addDerivedAttribute_args();
        args.setName(name);
        args.setSpec(spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, InvalidDerivedAttributeSpec, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addDerivedAttribute();
      }
    }

    public void removeDerivedAttribute(String name, DerivedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeDerivedAttribute_call method_call = new removeDerivedAttribute_call(name, spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeDerivedAttribute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private DerivedAttributeSpec spec;
      public removeDerivedAttribute_call(String name, DerivedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.spec = spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeDerivedAttribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeDerivedAttribute_args args = new removeDerivedAttribute_args();
        args.setName(name);
        args.setSpec(spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeDerivedAttribute();
      }
    }

    public void listDerivedAttributes(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listDerivedAttributes_call method_call = new listDerivedAttributes_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listDerivedAttributes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public listDerivedAttributes_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDerivedAttributes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listDerivedAttributes_args args = new listDerivedAttributes_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DerivedAttributeSpec> getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDerivedAttributes();
      }
    }

    public void addIndexedAttribute(String name, IndexedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addIndexedAttribute_call method_call = new addIndexedAttribute_call(name, spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addIndexedAttribute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private IndexedAttributeSpec spec;
      public addIndexedAttribute_call(String name, IndexedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.spec = spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addIndexedAttribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addIndexedAttribute_args args = new addIndexedAttribute_args();
        args.setName(name);
        args.setSpec(spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, InvalidIndexedAttributeSpec, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addIndexedAttribute();
      }
    }

    public void removeIndexedAttribute(String name, IndexedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeIndexedAttribute_call method_call = new removeIndexedAttribute_call(name, spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeIndexedAttribute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private IndexedAttributeSpec spec;
      public removeIndexedAttribute_call(String name, IndexedAttributeSpec spec, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.spec = spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeIndexedAttribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeIndexedAttribute_args args = new removeIndexedAttribute_args();
        args.setName(name);
        args.setSpec(spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeIndexedAttribute();
      }
    }

    public void listIndexedAttributes(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listIndexedAttributes_call method_call = new listIndexedAttributes_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listIndexedAttributes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public listIndexedAttributes_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listIndexedAttributes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listIndexedAttributes_args args = new listIndexedAttributes_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<IndexedAttributeSpec> getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listIndexedAttributes();
      }
    }

    public void getModel(String name, String repositoryUri, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getModel_call method_call = new getModel_call(name, repositoryUri, filePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String repositoryUri;
      private String filePath;
      public getModel_call(String name, String repositoryUri, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.repositoryUri = repositoryUri;
        this.filePath = filePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getModel_args args = new getModel_args();
        args.setName(name);
        args.setRepositoryUri(repositoryUri);
        args.setFilePath(filePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ModelElement> getResult() throws HawkInstanceNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getModel();
      }
    }

    public void watchModelChanges(String name, String repositoryUri, String filePath, ModelElementChangeType changeType, String modelElementType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      watchModelChanges_call method_call = new watchModelChanges_call(name, repositoryUri, filePath, changeType, modelElementType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class watchModelChanges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String repositoryUri;
      private String filePath;
      private ModelElementChangeType changeType;
      private String modelElementType;
      public watchModelChanges_call(String name, String repositoryUri, String filePath, ModelElementChangeType changeType, String modelElementType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.repositoryUri = repositoryUri;
        this.filePath = filePath;
        this.changeType = changeType;
        this.modelElementType = modelElementType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("watchModelChanges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        watchModelChanges_args args = new watchModelChanges_args();
        args.setName(name);
        args.setRepositoryUri(repositoryUri);
        args.setFilePath(filePath);
        args.setChangeType(changeType);
        args.setModelElementType(modelElementType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ModelElementChange> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_watchModelChanges();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("create", new create());
      processMap.put("listAll", new listAll());
      processMap.put("deleteUser", new deleteUser());
      processMap.put("start", new start());
      processMap.put("stop", new stop());
      processMap.put("registerMetamodels", new registerMetamodels());
      processMap.put("unregisterMetamodel", new unregisterMetamodel());
      processMap.put("listMetamodels", new listMetamodels());
      processMap.put("query", new query());
      processMap.put("resolveProxies", new resolveProxies());
      processMap.put("addRepository", new addRepository());
      processMap.put("deleteRepository", new deleteRepository());
      processMap.put("listRepositories", new listRepositories());
      processMap.put("listFiles", new listFiles());
      processMap.put("configurePolling", new configurePolling());
      processMap.put("addDerivedAttribute", new addDerivedAttribute());
      processMap.put("removeDerivedAttribute", new removeDerivedAttribute());
      processMap.put("listDerivedAttributes", new listDerivedAttributes());
      processMap.put("addIndexedAttribute", new addIndexedAttribute());
      processMap.put("removeIndexedAttribute", new removeIndexedAttribute());
      processMap.put("listIndexedAttributes", new listIndexedAttributes());
      processMap.put("getModel", new getModel());
      processMap.put("watchModelChanges", new watchModelChanges());
      return processMap;
    }

    public static class create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_args> {
      public create() {
        super("create");
      }

      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public create_result getResult(I iface, create_args args) throws org.apache.thrift.TException {
        create_result result = new create_result();
        iface.create(args.name);
        return result;
      }
    }

    public static class listAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listAll_args> {
      public listAll() {
        super("listAll");
      }

      public listAll_args getEmptyArgsInstance() {
        return new listAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listAll_result getResult(I iface, listAll_args args) throws org.apache.thrift.TException {
        listAll_result result = new listAll_result();
        result.success = iface.listAll();
        return result;
      }
    }

    public static class deleteUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUser_args> {
      public deleteUser() {
        super("deleteUser");
      }

      public deleteUser_args getEmptyArgsInstance() {
        return new deleteUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUser_result getResult(I iface, deleteUser_args args) throws org.apache.thrift.TException {
        deleteUser_result result = new deleteUser_result();
        try {
          iface.deleteUser(args.name);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class start<I extends Iface> extends org.apache.thrift.ProcessFunction<I, start_args> {
      public start() {
        super("start");
      }

      public start_args getEmptyArgsInstance() {
        return new start_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public start_result getResult(I iface, start_args args) throws org.apache.thrift.TException {
        start_result result = new start_result();
        try {
          iface.start(args.name);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class stop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stop_args> {
      public stop() {
        super("stop");
      }

      public stop_args getEmptyArgsInstance() {
        return new stop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stop_result getResult(I iface, stop_args args) throws org.apache.thrift.TException {
        stop_result result = new stop_result();
        try {
          iface.stop(args.name);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class registerMetamodels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerMetamodels_args> {
      public registerMetamodels() {
        super("registerMetamodels");
      }

      public registerMetamodels_args getEmptyArgsInstance() {
        return new registerMetamodels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerMetamodels_result getResult(I iface, registerMetamodels_args args) throws org.apache.thrift.TException {
        registerMetamodels_result result = new registerMetamodels_result();
        try {
          iface.registerMetamodels(args.name, args.metamodel);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        } catch (InvalidMetamodel err2) {
          result.err2 = err2;
        }
        return result;
      }
    }

    public static class unregisterMetamodel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unregisterMetamodel_args> {
      public unregisterMetamodel() {
        super("unregisterMetamodel");
      }

      public unregisterMetamodel_args getEmptyArgsInstance() {
        return new unregisterMetamodel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unregisterMetamodel_result getResult(I iface, unregisterMetamodel_args args) throws org.apache.thrift.TException {
        unregisterMetamodel_result result = new unregisterMetamodel_result();
        try {
          iface.unregisterMetamodel(args.name, args.metamodel);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class listMetamodels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMetamodels_args> {
      public listMetamodels() {
        super("listMetamodels");
      }

      public listMetamodels_args getEmptyArgsInstance() {
        return new listMetamodels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMetamodels_result getResult(I iface, listMetamodels_args args) throws org.apache.thrift.TException {
        listMetamodels_result result = new listMetamodels_result();
        try {
          result.success = iface.listMetamodels(args.name);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        try {
          result.success = iface.query(args.name, args.query, args.language, args.scope);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        } catch (UnknownQueryLanguage err2) {
          result.err2 = err2;
        } catch (InvalidQuery err3) {
          result.err3 = err3;
        }
        return result;
      }
    }

    public static class resolveProxies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resolveProxies_args> {
      public resolveProxies() {
        super("resolveProxies");
      }

      public resolveProxies_args getEmptyArgsInstance() {
        return new resolveProxies_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resolveProxies_result getResult(I iface, resolveProxies_args args) throws org.apache.thrift.TException {
        resolveProxies_result result = new resolveProxies_result();
        try {
          result.success = iface.resolveProxies(args.name, args.proxies);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class addRepository<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRepository_args> {
      public addRepository() {
        super("addRepository");
      }

      public addRepository_args getEmptyArgsInstance() {
        return new addRepository_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRepository_result getResult(I iface, addRepository_args args) throws org.apache.thrift.TException {
        addRepository_result result = new addRepository_result();
        try {
          iface.addRepository(args.name, args.uri, args.type, args.credentials);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        } catch (UnknownRepositoryType err2) {
          result.err2 = err2;
        } catch (VCSAuthenticationFailed err3) {
          result.err3 = err3;
        }
        return result;
      }
    }

    public static class deleteRepository<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRepository_args> {
      public deleteRepository() {
        super("deleteRepository");
      }

      public deleteRepository_args getEmptyArgsInstance() {
        return new deleteRepository_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRepository_result getResult(I iface, deleteRepository_args args) throws org.apache.thrift.TException {
        deleteRepository_result result = new deleteRepository_result();
        try {
          iface.deleteRepository(args.name, args.uri);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class listRepositories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listRepositories_args> {
      public listRepositories() {
        super("listRepositories");
      }

      public listRepositories_args getEmptyArgsInstance() {
        return new listRepositories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listRepositories_result getResult(I iface, listRepositories_args args) throws org.apache.thrift.TException {
        listRepositories_result result = new listRepositories_result();
        try {
          result.success = iface.listRepositories(args.name);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class listFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listFiles_args> {
      public listFiles() {
        super("listFiles");
      }

      public listFiles_args getEmptyArgsInstance() {
        return new listFiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listFiles_result getResult(I iface, listFiles_args args) throws org.apache.thrift.TException {
        listFiles_result result = new listFiles_result();
        try {
          result.success = iface.listFiles(args.name, args.repository);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class configurePolling<I extends Iface> extends org.apache.thrift.ProcessFunction<I, configurePolling_args> {
      public configurePolling() {
        super("configurePolling");
      }

      public configurePolling_args getEmptyArgsInstance() {
        return new configurePolling_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public configurePolling_result getResult(I iface, configurePolling_args args) throws org.apache.thrift.TException {
        configurePolling_result result = new configurePolling_result();
        try {
          iface.configurePolling(args.name, args.base, args.max);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        } catch (InvalidPollingConfiguration err2) {
          result.err2 = err2;
        }
        return result;
      }
    }

    public static class addDerivedAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDerivedAttribute_args> {
      public addDerivedAttribute() {
        super("addDerivedAttribute");
      }

      public addDerivedAttribute_args getEmptyArgsInstance() {
        return new addDerivedAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addDerivedAttribute_result getResult(I iface, addDerivedAttribute_args args) throws org.apache.thrift.TException {
        addDerivedAttribute_result result = new addDerivedAttribute_result();
        try {
          iface.addDerivedAttribute(args.name, args.spec);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        } catch (InvalidDerivedAttributeSpec err2) {
          result.err2 = err2;
        }
        return result;
      }
    }

    public static class removeDerivedAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeDerivedAttribute_args> {
      public removeDerivedAttribute() {
        super("removeDerivedAttribute");
      }

      public removeDerivedAttribute_args getEmptyArgsInstance() {
        return new removeDerivedAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeDerivedAttribute_result getResult(I iface, removeDerivedAttribute_args args) throws org.apache.thrift.TException {
        removeDerivedAttribute_result result = new removeDerivedAttribute_result();
        try {
          iface.removeDerivedAttribute(args.name, args.spec);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class listDerivedAttributes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listDerivedAttributes_args> {
      public listDerivedAttributes() {
        super("listDerivedAttributes");
      }

      public listDerivedAttributes_args getEmptyArgsInstance() {
        return new listDerivedAttributes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listDerivedAttributes_result getResult(I iface, listDerivedAttributes_args args) throws org.apache.thrift.TException {
        listDerivedAttributes_result result = new listDerivedAttributes_result();
        try {
          result.success = iface.listDerivedAttributes(args.name);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class addIndexedAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addIndexedAttribute_args> {
      public addIndexedAttribute() {
        super("addIndexedAttribute");
      }

      public addIndexedAttribute_args getEmptyArgsInstance() {
        return new addIndexedAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addIndexedAttribute_result getResult(I iface, addIndexedAttribute_args args) throws org.apache.thrift.TException {
        addIndexedAttribute_result result = new addIndexedAttribute_result();
        try {
          iface.addIndexedAttribute(args.name, args.spec);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        } catch (InvalidIndexedAttributeSpec err2) {
          result.err2 = err2;
        }
        return result;
      }
    }

    public static class removeIndexedAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeIndexedAttribute_args> {
      public removeIndexedAttribute() {
        super("removeIndexedAttribute");
      }

      public removeIndexedAttribute_args getEmptyArgsInstance() {
        return new removeIndexedAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeIndexedAttribute_result getResult(I iface, removeIndexedAttribute_args args) throws org.apache.thrift.TException {
        removeIndexedAttribute_result result = new removeIndexedAttribute_result();
        try {
          iface.removeIndexedAttribute(args.name, args.spec);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class listIndexedAttributes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listIndexedAttributes_args> {
      public listIndexedAttributes() {
        super("listIndexedAttributes");
      }

      public listIndexedAttributes_args getEmptyArgsInstance() {
        return new listIndexedAttributes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listIndexedAttributes_result getResult(I iface, listIndexedAttributes_args args) throws org.apache.thrift.TException {
        listIndexedAttributes_result result = new listIndexedAttributes_result();
        try {
          result.success = iface.listIndexedAttributes(args.name);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class getModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getModel_args> {
      public getModel() {
        super("getModel");
      }

      public getModel_args getEmptyArgsInstance() {
        return new getModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getModel_result getResult(I iface, getModel_args args) throws org.apache.thrift.TException {
        getModel_result result = new getModel_result();
        try {
          result.success = iface.getModel(args.name, args.repositoryUri, args.filePath);
        } catch (HawkInstanceNotFound err1) {
          result.err1 = err1;
        }
        return result;
      }
    }

    public static class watchModelChanges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, watchModelChanges_args> {
      public watchModelChanges() {
        super("watchModelChanges");
      }

      public watchModelChanges_args getEmptyArgsInstance() {
        return new watchModelChanges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public watchModelChanges_result getResult(I iface, watchModelChanges_args args) throws org.apache.thrift.TException {
        watchModelChanges_result result = new watchModelChanges_result();
        result.success = iface.watchModelChanges(args.name, args.repositoryUri, args.filePath, args.changeType, args.modelElementType);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("create", new create());
      processMap.put("listAll", new listAll());
      processMap.put("deleteUser", new deleteUser());
      processMap.put("start", new start());
      processMap.put("stop", new stop());
      processMap.put("registerMetamodels", new registerMetamodels());
      processMap.put("unregisterMetamodel", new unregisterMetamodel());
      processMap.put("listMetamodels", new listMetamodels());
      processMap.put("query", new query());
      processMap.put("resolveProxies", new resolveProxies());
      processMap.put("addRepository", new addRepository());
      processMap.put("deleteRepository", new deleteRepository());
      processMap.put("listRepositories", new listRepositories());
      processMap.put("listFiles", new listFiles());
      processMap.put("configurePolling", new configurePolling());
      processMap.put("addDerivedAttribute", new addDerivedAttribute());
      processMap.put("removeDerivedAttribute", new removeDerivedAttribute());
      processMap.put("listDerivedAttributes", new listDerivedAttributes());
      processMap.put("addIndexedAttribute", new addIndexedAttribute());
      processMap.put("removeIndexedAttribute", new removeIndexedAttribute());
      processMap.put("listIndexedAttributes", new listIndexedAttributes());
      processMap.put("getModel", new getModel());
      processMap.put("watchModelChanges", new watchModelChanges());
      return processMap;
    }

    public static class create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_args, Void> {
      public create() {
        super("create");
      }

      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            create_result result = new create_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            create_result result = new create_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.create(args.name,resultHandler);
      }
    }

    public static class listAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listAll_args, List<HawkInstance>> {
      public listAll() {
        super("listAll");
      }

      public listAll_args getEmptyArgsInstance() {
        return new listAll_args();
      }

      public AsyncMethodCallback<List<HawkInstance>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HawkInstance>>() { 
          public void onComplete(List<HawkInstance> o) {
            listAll_result result = new listAll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listAll_result result = new listAll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listAll_args args, org.apache.thrift.async.AsyncMethodCallback<List<HawkInstance>> resultHandler) throws TException {
        iface.listAll(resultHandler);
      }
    }

    public static class deleteUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUser_args, Void> {
      public deleteUser() {
        super("deleteUser");
      }

      public deleteUser_args getEmptyArgsInstance() {
        return new deleteUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteUser_result result = new deleteUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteUser_result result = new deleteUser_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteUser(args.name,resultHandler);
      }
    }

    public static class start<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, start_args, Void> {
      public start() {
        super("start");
      }

      public start_args getEmptyArgsInstance() {
        return new start_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            start_result result = new start_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            start_result result = new start_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, start_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.start(args.name,resultHandler);
      }
    }

    public static class stop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stop_args, Void> {
      public stop() {
        super("stop");
      }

      public stop_args getEmptyArgsInstance() {
        return new stop_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            stop_result result = new stop_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stop_result result = new stop_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stop_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.stop(args.name,resultHandler);
      }
    }

    public static class registerMetamodels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerMetamodels_args, Void> {
      public registerMetamodels() {
        super("registerMetamodels");
      }

      public registerMetamodels_args getEmptyArgsInstance() {
        return new registerMetamodels_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            registerMetamodels_result result = new registerMetamodels_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerMetamodels_result result = new registerMetamodels_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidMetamodel) {
                        result.err2 = (InvalidMetamodel) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerMetamodels_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.registerMetamodels(args.name, args.metamodel,resultHandler);
      }
    }

    public static class unregisterMetamodel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unregisterMetamodel_args, Void> {
      public unregisterMetamodel() {
        super("unregisterMetamodel");
      }

      public unregisterMetamodel_args getEmptyArgsInstance() {
        return new unregisterMetamodel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            unregisterMetamodel_result result = new unregisterMetamodel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unregisterMetamodel_result result = new unregisterMetamodel_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unregisterMetamodel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.unregisterMetamodel(args.name, args.metamodel,resultHandler);
      }
    }

    public static class listMetamodels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMetamodels_args, List<String>> {
      public listMetamodels() {
        super("listMetamodels");
      }

      public listMetamodels_args getEmptyArgsInstance() {
        return new listMetamodels_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            listMetamodels_result result = new listMetamodels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listMetamodels_result result = new listMetamodels_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMetamodels_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.listMetamodels(args.name,resultHandler);
      }
    }

    public static class query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_args, List<String>> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            query_result result = new query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_result result = new query_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownQueryLanguage) {
                        result.err2 = (UnknownQueryLanguage) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidQuery) {
                        result.err3 = (InvalidQuery) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.query(args.name, args.query, args.language, args.scope,resultHandler);
      }
    }

    public static class resolveProxies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resolveProxies_args, List<ModelElement>> {
      public resolveProxies() {
        super("resolveProxies");
      }

      public resolveProxies_args getEmptyArgsInstance() {
        return new resolveProxies_args();
      }

      public AsyncMethodCallback<List<ModelElement>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ModelElement>>() { 
          public void onComplete(List<ModelElement> o) {
            resolveProxies_result result = new resolveProxies_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resolveProxies_result result = new resolveProxies_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resolveProxies_args args, org.apache.thrift.async.AsyncMethodCallback<List<ModelElement>> resultHandler) throws TException {
        iface.resolveProxies(args.name, args.proxies,resultHandler);
      }
    }

    public static class addRepository<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRepository_args, Void> {
      public addRepository() {
        super("addRepository");
      }

      public addRepository_args getEmptyArgsInstance() {
        return new addRepository_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addRepository_result result = new addRepository_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRepository_result result = new addRepository_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownRepositoryType) {
                        result.err2 = (UnknownRepositoryType) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
            else             if (e instanceof VCSAuthenticationFailed) {
                        result.err3 = (VCSAuthenticationFailed) e;
                        result.setErr3IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRepository_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addRepository(args.name, args.uri, args.type, args.credentials,resultHandler);
      }
    }

    public static class deleteRepository<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRepository_args, Void> {
      public deleteRepository() {
        super("deleteRepository");
      }

      public deleteRepository_args getEmptyArgsInstance() {
        return new deleteRepository_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteRepository_result result = new deleteRepository_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRepository_result result = new deleteRepository_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteRepository_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteRepository(args.name, args.uri,resultHandler);
      }
    }

    public static class listRepositories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listRepositories_args, List<String>> {
      public listRepositories() {
        super("listRepositories");
      }

      public listRepositories_args getEmptyArgsInstance() {
        return new listRepositories_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            listRepositories_result result = new listRepositories_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listRepositories_result result = new listRepositories_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listRepositories_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.listRepositories(args.name,resultHandler);
      }
    }

    public static class listFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listFiles_args, List<String>> {
      public listFiles() {
        super("listFiles");
      }

      public listFiles_args getEmptyArgsInstance() {
        return new listFiles_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            listFiles_result result = new listFiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listFiles_result result = new listFiles_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listFiles_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.listFiles(args.name, args.repository,resultHandler);
      }
    }

    public static class configurePolling<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, configurePolling_args, Void> {
      public configurePolling() {
        super("configurePolling");
      }

      public configurePolling_args getEmptyArgsInstance() {
        return new configurePolling_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            configurePolling_result result = new configurePolling_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            configurePolling_result result = new configurePolling_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidPollingConfiguration) {
                        result.err2 = (InvalidPollingConfiguration) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, configurePolling_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.configurePolling(args.name, args.base, args.max,resultHandler);
      }
    }

    public static class addDerivedAttribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addDerivedAttribute_args, Void> {
      public addDerivedAttribute() {
        super("addDerivedAttribute");
      }

      public addDerivedAttribute_args getEmptyArgsInstance() {
        return new addDerivedAttribute_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addDerivedAttribute_result result = new addDerivedAttribute_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addDerivedAttribute_result result = new addDerivedAttribute_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidDerivedAttributeSpec) {
                        result.err2 = (InvalidDerivedAttributeSpec) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addDerivedAttribute_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addDerivedAttribute(args.name, args.spec,resultHandler);
      }
    }

    public static class removeDerivedAttribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeDerivedAttribute_args, Void> {
      public removeDerivedAttribute() {
        super("removeDerivedAttribute");
      }

      public removeDerivedAttribute_args getEmptyArgsInstance() {
        return new removeDerivedAttribute_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeDerivedAttribute_result result = new removeDerivedAttribute_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeDerivedAttribute_result result = new removeDerivedAttribute_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeDerivedAttribute_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeDerivedAttribute(args.name, args.spec,resultHandler);
      }
    }

    public static class listDerivedAttributes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listDerivedAttributes_args, List<DerivedAttributeSpec>> {
      public listDerivedAttributes() {
        super("listDerivedAttributes");
      }

      public listDerivedAttributes_args getEmptyArgsInstance() {
        return new listDerivedAttributes_args();
      }

      public AsyncMethodCallback<List<DerivedAttributeSpec>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DerivedAttributeSpec>>() { 
          public void onComplete(List<DerivedAttributeSpec> o) {
            listDerivedAttributes_result result = new listDerivedAttributes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listDerivedAttributes_result result = new listDerivedAttributes_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listDerivedAttributes_args args, org.apache.thrift.async.AsyncMethodCallback<List<DerivedAttributeSpec>> resultHandler) throws TException {
        iface.listDerivedAttributes(args.name,resultHandler);
      }
    }

    public static class addIndexedAttribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addIndexedAttribute_args, Void> {
      public addIndexedAttribute() {
        super("addIndexedAttribute");
      }

      public addIndexedAttribute_args getEmptyArgsInstance() {
        return new addIndexedAttribute_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addIndexedAttribute_result result = new addIndexedAttribute_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addIndexedAttribute_result result = new addIndexedAttribute_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidIndexedAttributeSpec) {
                        result.err2 = (InvalidIndexedAttributeSpec) e;
                        result.setErr2IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addIndexedAttribute_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addIndexedAttribute(args.name, args.spec,resultHandler);
      }
    }

    public static class removeIndexedAttribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeIndexedAttribute_args, Void> {
      public removeIndexedAttribute() {
        super("removeIndexedAttribute");
      }

      public removeIndexedAttribute_args getEmptyArgsInstance() {
        return new removeIndexedAttribute_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeIndexedAttribute_result result = new removeIndexedAttribute_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeIndexedAttribute_result result = new removeIndexedAttribute_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeIndexedAttribute_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeIndexedAttribute(args.name, args.spec,resultHandler);
      }
    }

    public static class listIndexedAttributes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listIndexedAttributes_args, List<IndexedAttributeSpec>> {
      public listIndexedAttributes() {
        super("listIndexedAttributes");
      }

      public listIndexedAttributes_args getEmptyArgsInstance() {
        return new listIndexedAttributes_args();
      }

      public AsyncMethodCallback<List<IndexedAttributeSpec>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<IndexedAttributeSpec>>() { 
          public void onComplete(List<IndexedAttributeSpec> o) {
            listIndexedAttributes_result result = new listIndexedAttributes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listIndexedAttributes_result result = new listIndexedAttributes_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listIndexedAttributes_args args, org.apache.thrift.async.AsyncMethodCallback<List<IndexedAttributeSpec>> resultHandler) throws TException {
        iface.listIndexedAttributes(args.name,resultHandler);
      }
    }

    public static class getModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getModel_args, List<ModelElement>> {
      public getModel() {
        super("getModel");
      }

      public getModel_args getEmptyArgsInstance() {
        return new getModel_args();
      }

      public AsyncMethodCallback<List<ModelElement>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ModelElement>>() { 
          public void onComplete(List<ModelElement> o) {
            getModel_result result = new getModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getModel_result result = new getModel_result();
            if (e instanceof HawkInstanceNotFound) {
                        result.err1 = (HawkInstanceNotFound) e;
                        result.setErr1IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getModel_args args, org.apache.thrift.async.AsyncMethodCallback<List<ModelElement>> resultHandler) throws TException {
        iface.getModel(args.name, args.repositoryUri, args.filePath,resultHandler);
      }
    }

    public static class watchModelChanges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, watchModelChanges_args, List<ModelElementChange>> {
      public watchModelChanges() {
        super("watchModelChanges");
      }

      public watchModelChanges_args getEmptyArgsInstance() {
        return new watchModelChanges_args();
      }

      public AsyncMethodCallback<List<ModelElementChange>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ModelElementChange>>() { 
          public void onComplete(List<ModelElementChange> o) {
            watchModelChanges_result result = new watchModelChanges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            watchModelChanges_result result = new watchModelChanges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, watchModelChanges_args args, org.apache.thrift.async.AsyncMethodCallback<List<ModelElementChange>> resultHandler) throws TException {
        iface.watchModelChanges(args.name, args.repositoryUri, args.filePath, args.changeType, args.modelElementType,resultHandler);
      }
    }

  }

  public static class create_args implements org.apache.thrift.TBase<create_args, create_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_args.class, metaDataMap);
    }

    public create_args() {
    }

    public create_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_args(create_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public create_args deepCopy() {
      return new create_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public create_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_args)
        return this.equals((create_args)that);
      return false;
    }

    public boolean equals(create_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_argsStandardSchemeFactory implements SchemeFactory {
      public create_argsStandardScheme getScheme() {
        return new create_argsStandardScheme();
      }
    }

    private static class create_argsStandardScheme extends StandardScheme<create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_argsTupleSchemeFactory implements SchemeFactory {
      public create_argsTupleScheme getScheme() {
        return new create_argsTupleScheme();
      }
    }

    private static class create_argsTupleScheme extends TupleScheme<create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class create_result implements org.apache.thrift.TBase<create_result, create_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_result.class, metaDataMap);
    }

    public create_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_result(create_result other) {
    }

    public create_result deepCopy() {
      return new create_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_result)
        return this.equals((create_result)that);
      return false;
    }

    public boolean equals(create_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_resultStandardSchemeFactory implements SchemeFactory {
      public create_resultStandardScheme getScheme() {
        return new create_resultStandardScheme();
      }
    }

    private static class create_resultStandardScheme extends StandardScheme<create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_resultTupleSchemeFactory implements SchemeFactory {
      public create_resultTupleScheme getScheme() {
        return new create_resultTupleScheme();
      }
    }

    private static class create_resultTupleScheme extends TupleScheme<create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listAll_args implements org.apache.thrift.TBase<listAll_args, listAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<listAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listAll_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listAll_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAll_args.class, metaDataMap);
    }

    public listAll_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listAll_args(listAll_args other) {
    }

    public listAll_args deepCopy() {
      return new listAll_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listAll_args)
        return this.equals((listAll_args)that);
      return false;
    }

    public boolean equals(listAll_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(listAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listAll_argsStandardSchemeFactory implements SchemeFactory {
      public listAll_argsStandardScheme getScheme() {
        return new listAll_argsStandardScheme();
      }
    }

    private static class listAll_argsStandardScheme extends StandardScheme<listAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listAll_argsTupleSchemeFactory implements SchemeFactory {
      public listAll_argsTupleScheme getScheme() {
        return new listAll_argsTupleScheme();
      }
    }

    private static class listAll_argsTupleScheme extends TupleScheme<listAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listAll_result implements org.apache.thrift.TBase<listAll_result, listAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<listAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listAll_resultTupleSchemeFactory());
    }

    public List<HawkInstance> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HawkInstance.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listAll_result.class, metaDataMap);
    }

    public listAll_result() {
    }

    public listAll_result(
      List<HawkInstance> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listAll_result(listAll_result other) {
      if (other.isSetSuccess()) {
        List<HawkInstance> __this__success = new ArrayList<HawkInstance>(other.success.size());
        for (HawkInstance other_element : other.success) {
          __this__success.add(new HawkInstance(other_element));
        }
        this.success = __this__success;
      }
    }

    public listAll_result deepCopy() {
      return new listAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HawkInstance> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HawkInstance elem) {
      if (this.success == null) {
        this.success = new ArrayList<HawkInstance>();
      }
      this.success.add(elem);
    }

    public List<HawkInstance> getSuccess() {
      return this.success;
    }

    public listAll_result setSuccess(List<HawkInstance> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HawkInstance>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listAll_result)
        return this.equals((listAll_result)that);
      return false;
    }

    public boolean equals(listAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listAll_resultStandardSchemeFactory implements SchemeFactory {
      public listAll_resultStandardScheme getScheme() {
        return new listAll_resultStandardScheme();
      }
    }

    private static class listAll_resultStandardScheme extends StandardScheme<listAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<HawkInstance>(_list32.size);
                  HawkInstance _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new HawkInstance();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HawkInstance _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listAll_resultTupleSchemeFactory implements SchemeFactory {
      public listAll_resultTupleScheme getScheme() {
        return new listAll_resultTupleScheme();
      }
    }

    private static class listAll_resultTupleScheme extends TupleScheme<listAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HawkInstance _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HawkInstance>(_list37.size);
            HawkInstance _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new HawkInstance();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteUser_args implements org.apache.thrift.TBase<deleteUser_args, deleteUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUser_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_args.class, metaDataMap);
    }

    public deleteUser_args() {
    }

    public deleteUser_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUser_args(deleteUser_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public deleteUser_args deepCopy() {
      return new deleteUser_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public deleteUser_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUser_args)
        return this.equals((deleteUser_args)that);
      return false;
    }

    public boolean equals(deleteUser_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUser_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUser_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUser_argsStandardScheme getScheme() {
        return new deleteUser_argsStandardScheme();
      }
    }

    private static class deleteUser_argsStandardScheme extends StandardScheme<deleteUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUser_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUser_argsTupleScheme getScheme() {
        return new deleteUser_argsTupleScheme();
      }
    }

    private static class deleteUser_argsTupleScheme extends TupleScheme<deleteUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class deleteUser_result implements org.apache.thrift.TBase<deleteUser_result, deleteUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUser_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_result.class, metaDataMap);
    }

    public deleteUser_result() {
    }

    public deleteUser_result(
      HawkInstanceNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUser_result(deleteUser_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public deleteUser_result deepCopy() {
      return new deleteUser_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public deleteUser_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUser_result)
        return this.equals((deleteUser_result)that);
      return false;
    }

    public boolean equals(deleteUser_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUser_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUser_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUser_resultStandardScheme getScheme() {
        return new deleteUser_resultStandardScheme();
      }
    }

    private static class deleteUser_resultStandardScheme extends StandardScheme<deleteUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUser_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUser_resultTupleScheme getScheme() {
        return new deleteUser_resultTupleScheme();
      }
    }

    private static class deleteUser_resultTupleScheme extends TupleScheme<deleteUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class start_args implements org.apache.thrift.TBase<start_args, start_args._Fields>, java.io.Serializable, Cloneable, Comparable<start_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("start_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new start_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new start_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(start_args.class, metaDataMap);
    }

    public start_args() {
    }

    public start_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public start_args(start_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public start_args deepCopy() {
      return new start_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public start_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof start_args)
        return this.equals((start_args)that);
      return false;
    }

    public boolean equals(start_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(start_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("start_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class start_argsStandardSchemeFactory implements SchemeFactory {
      public start_argsStandardScheme getScheme() {
        return new start_argsStandardScheme();
      }
    }

    private static class start_argsStandardScheme extends StandardScheme<start_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, start_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, start_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class start_argsTupleSchemeFactory implements SchemeFactory {
      public start_argsTupleScheme getScheme() {
        return new start_argsTupleScheme();
      }
    }

    private static class start_argsTupleScheme extends TupleScheme<start_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, start_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, start_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class start_result implements org.apache.thrift.TBase<start_result, start_result._Fields>, java.io.Serializable, Cloneable, Comparable<start_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("start_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new start_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new start_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(start_result.class, metaDataMap);
    }

    public start_result() {
    }

    public start_result(
      HawkInstanceNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public start_result(start_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public start_result deepCopy() {
      return new start_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public start_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof start_result)
        return this.equals((start_result)that);
      return false;
    }

    public boolean equals(start_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(start_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("start_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class start_resultStandardSchemeFactory implements SchemeFactory {
      public start_resultStandardScheme getScheme() {
        return new start_resultStandardScheme();
      }
    }

    private static class start_resultStandardScheme extends StandardScheme<start_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, start_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, start_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class start_resultTupleSchemeFactory implements SchemeFactory {
      public start_resultTupleScheme getScheme() {
        return new start_resultTupleScheme();
      }
    }

    private static class start_resultTupleScheme extends TupleScheme<start_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, start_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, start_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class stop_args implements org.apache.thrift.TBase<stop_args, stop_args._Fields>, java.io.Serializable, Cloneable, Comparable<stop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stop_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_args.class, metaDataMap);
    }

    public stop_args() {
    }

    public stop_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_args(stop_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public stop_args deepCopy() {
      return new stop_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public stop_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_args)
        return this.equals((stop_args)that);
      return false;
    }

    public boolean equals(stop_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(stop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stop_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_argsStandardSchemeFactory implements SchemeFactory {
      public stop_argsStandardScheme getScheme() {
        return new stop_argsStandardScheme();
      }
    }

    private static class stop_argsStandardScheme extends StandardScheme<stop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_argsTupleSchemeFactory implements SchemeFactory {
      public stop_argsTupleScheme getScheme() {
        return new stop_argsTupleScheme();
      }
    }

    private static class stop_argsTupleScheme extends TupleScheme<stop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class stop_result implements org.apache.thrift.TBase<stop_result, stop_result._Fields>, java.io.Serializable, Cloneable, Comparable<stop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stop_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_result.class, metaDataMap);
    }

    public stop_result() {
    }

    public stop_result(
      HawkInstanceNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_result(stop_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public stop_result deepCopy() {
      return new stop_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public stop_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_result)
        return this.equals((stop_result)that);
      return false;
    }

    public boolean equals(stop_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(stop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stop_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_resultStandardSchemeFactory implements SchemeFactory {
      public stop_resultStandardScheme getScheme() {
        return new stop_resultStandardScheme();
      }
    }

    private static class stop_resultStandardScheme extends StandardScheme<stop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_resultTupleSchemeFactory implements SchemeFactory {
      public stop_resultTupleScheme getScheme() {
        return new stop_resultTupleScheme();
      }
    }

    private static class stop_resultTupleScheme extends TupleScheme<stop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class registerMetamodels_args implements org.apache.thrift.TBase<registerMetamodels_args, registerMetamodels_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerMetamodels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerMetamodels_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField METAMODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("metamodel", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerMetamodels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerMetamodels_argsTupleSchemeFactory());
    }

    public String name; // required
    public List<File> metamodel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      METAMODEL((short)2, "metamodel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // METAMODEL
            return METAMODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METAMODEL, new org.apache.thrift.meta_data.FieldMetaData("metamodel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, File.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerMetamodels_args.class, metaDataMap);
    }

    public registerMetamodels_args() {
    }

    public registerMetamodels_args(
      String name,
      List<File> metamodel)
    {
      this();
      this.name = name;
      this.metamodel = metamodel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerMetamodels_args(registerMetamodels_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMetamodel()) {
        List<File> __this__metamodel = new ArrayList<File>(other.metamodel.size());
        for (File other_element : other.metamodel) {
          __this__metamodel.add(new File(other_element));
        }
        this.metamodel = __this__metamodel;
      }
    }

    public registerMetamodels_args deepCopy() {
      return new registerMetamodels_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.metamodel = null;
    }

    public String getName() {
      return this.name;
    }

    public registerMetamodels_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getMetamodelSize() {
      return (this.metamodel == null) ? 0 : this.metamodel.size();
    }

    public java.util.Iterator<File> getMetamodelIterator() {
      return (this.metamodel == null) ? null : this.metamodel.iterator();
    }

    public void addToMetamodel(File elem) {
      if (this.metamodel == null) {
        this.metamodel = new ArrayList<File>();
      }
      this.metamodel.add(elem);
    }

    public List<File> getMetamodel() {
      return this.metamodel;
    }

    public registerMetamodels_args setMetamodel(List<File> metamodel) {
      this.metamodel = metamodel;
      return this;
    }

    public void unsetMetamodel() {
      this.metamodel = null;
    }

    /** Returns true if field metamodel is set (has been assigned a value) and false otherwise */
    public boolean isSetMetamodel() {
      return this.metamodel != null;
    }

    public void setMetamodelIsSet(boolean value) {
      if (!value) {
        this.metamodel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case METAMODEL:
        if (value == null) {
          unsetMetamodel();
        } else {
          setMetamodel((List<File>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case METAMODEL:
        return getMetamodel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case METAMODEL:
        return isSetMetamodel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerMetamodels_args)
        return this.equals((registerMetamodels_args)that);
      return false;
    }

    public boolean equals(registerMetamodels_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_metamodel = true && this.isSetMetamodel();
      boolean that_present_metamodel = true && that.isSetMetamodel();
      if (this_present_metamodel || that_present_metamodel) {
        if (!(this_present_metamodel && that_present_metamodel))
          return false;
        if (!this.metamodel.equals(that.metamodel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_metamodel = true && (isSetMetamodel());
      list.add(present_metamodel);
      if (present_metamodel)
        list.add(metamodel);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerMetamodels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMetamodel()).compareTo(other.isSetMetamodel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetamodel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metamodel, other.metamodel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerMetamodels_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metamodel:");
      if (this.metamodel == null) {
        sb.append("null");
      } else {
        sb.append(this.metamodel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (metamodel == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'metamodel' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerMetamodels_argsStandardSchemeFactory implements SchemeFactory {
      public registerMetamodels_argsStandardScheme getScheme() {
        return new registerMetamodels_argsStandardScheme();
      }
    }

    private static class registerMetamodels_argsStandardScheme extends StandardScheme<registerMetamodels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerMetamodels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METAMODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.metamodel = new ArrayList<File>(_list40.size);
                  File _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new File();
                    _elem41.read(iprot);
                    struct.metamodel.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setMetamodelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerMetamodels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.metamodel != null) {
          oprot.writeFieldBegin(METAMODEL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metamodel.size()));
            for (File _iter43 : struct.metamodel)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerMetamodels_argsTupleSchemeFactory implements SchemeFactory {
      public registerMetamodels_argsTupleScheme getScheme() {
        return new registerMetamodels_argsTupleScheme();
      }
    }

    private static class registerMetamodels_argsTupleScheme extends TupleScheme<registerMetamodels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerMetamodels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        {
          oprot.writeI32(struct.metamodel.size());
          for (File _iter44 : struct.metamodel)
          {
            _iter44.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerMetamodels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.metamodel = new ArrayList<File>(_list45.size);
          File _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new File();
            _elem46.read(iprot);
            struct.metamodel.add(_elem46);
          }
        }
        struct.setMetamodelIsSet(true);
      }
    }

  }

  public static class registerMetamodels_result implements org.apache.thrift.TBase<registerMetamodels_result, registerMetamodels_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerMetamodels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerMetamodels_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerMetamodels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerMetamodels_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required
    public InvalidMetamodel err2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerMetamodels_result.class, metaDataMap);
    }

    public registerMetamodels_result() {
    }

    public registerMetamodels_result(
      HawkInstanceNotFound err1,
      InvalidMetamodel err2)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerMetamodels_result(registerMetamodels_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new InvalidMetamodel(other.err2);
      }
    }

    public registerMetamodels_result deepCopy() {
      return new registerMetamodels_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public registerMetamodels_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public InvalidMetamodel getErr2() {
      return this.err2;
    }

    public registerMetamodels_result setErr2(InvalidMetamodel err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((InvalidMetamodel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerMetamodels_result)
        return this.equals((registerMetamodels_result)that);
      return false;
    }

    public boolean equals(registerMetamodels_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerMetamodels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerMetamodels_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerMetamodels_resultStandardSchemeFactory implements SchemeFactory {
      public registerMetamodels_resultStandardScheme getScheme() {
        return new registerMetamodels_resultStandardScheme();
      }
    }

    private static class registerMetamodels_resultStandardScheme extends StandardScheme<registerMetamodels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerMetamodels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new InvalidMetamodel();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerMetamodels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerMetamodels_resultTupleSchemeFactory implements SchemeFactory {
      public registerMetamodels_resultTupleScheme getScheme() {
        return new registerMetamodels_resultTupleScheme();
      }
    }

    private static class registerMetamodels_resultTupleScheme extends TupleScheme<registerMetamodels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerMetamodels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerMetamodels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new InvalidMetamodel();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
      }
    }

  }

  public static class unregisterMetamodel_args implements org.apache.thrift.TBase<unregisterMetamodel_args, unregisterMetamodel_args._Fields>, java.io.Serializable, Cloneable, Comparable<unregisterMetamodel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unregisterMetamodel_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField METAMODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("metamodel", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unregisterMetamodel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unregisterMetamodel_argsTupleSchemeFactory());
    }

    public String name; // required
    public String metamodel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      METAMODEL((short)2, "metamodel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // METAMODEL
            return METAMODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METAMODEL, new org.apache.thrift.meta_data.FieldMetaData("metamodel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unregisterMetamodel_args.class, metaDataMap);
    }

    public unregisterMetamodel_args() {
    }

    public unregisterMetamodel_args(
      String name,
      String metamodel)
    {
      this();
      this.name = name;
      this.metamodel = metamodel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterMetamodel_args(unregisterMetamodel_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMetamodel()) {
        this.metamodel = other.metamodel;
      }
    }

    public unregisterMetamodel_args deepCopy() {
      return new unregisterMetamodel_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.metamodel = null;
    }

    public String getName() {
      return this.name;
    }

    public unregisterMetamodel_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getMetamodel() {
      return this.metamodel;
    }

    public unregisterMetamodel_args setMetamodel(String metamodel) {
      this.metamodel = metamodel;
      return this;
    }

    public void unsetMetamodel() {
      this.metamodel = null;
    }

    /** Returns true if field metamodel is set (has been assigned a value) and false otherwise */
    public boolean isSetMetamodel() {
      return this.metamodel != null;
    }

    public void setMetamodelIsSet(boolean value) {
      if (!value) {
        this.metamodel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case METAMODEL:
        if (value == null) {
          unsetMetamodel();
        } else {
          setMetamodel((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case METAMODEL:
        return getMetamodel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case METAMODEL:
        return isSetMetamodel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterMetamodel_args)
        return this.equals((unregisterMetamodel_args)that);
      return false;
    }

    public boolean equals(unregisterMetamodel_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_metamodel = true && this.isSetMetamodel();
      boolean that_present_metamodel = true && that.isSetMetamodel();
      if (this_present_metamodel || that_present_metamodel) {
        if (!(this_present_metamodel && that_present_metamodel))
          return false;
        if (!this.metamodel.equals(that.metamodel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_metamodel = true && (isSetMetamodel());
      list.add(present_metamodel);
      if (present_metamodel)
        list.add(metamodel);

      return list.hashCode();
    }

    @Override
    public int compareTo(unregisterMetamodel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMetamodel()).compareTo(other.isSetMetamodel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetamodel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metamodel, other.metamodel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unregisterMetamodel_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metamodel:");
      if (this.metamodel == null) {
        sb.append("null");
      } else {
        sb.append(this.metamodel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (metamodel == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'metamodel' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unregisterMetamodel_argsStandardSchemeFactory implements SchemeFactory {
      public unregisterMetamodel_argsStandardScheme getScheme() {
        return new unregisterMetamodel_argsStandardScheme();
      }
    }

    private static class unregisterMetamodel_argsStandardScheme extends StandardScheme<unregisterMetamodel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unregisterMetamodel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METAMODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metamodel = iprot.readString();
                struct.setMetamodelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unregisterMetamodel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.metamodel != null) {
          oprot.writeFieldBegin(METAMODEL_FIELD_DESC);
          oprot.writeString(struct.metamodel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unregisterMetamodel_argsTupleSchemeFactory implements SchemeFactory {
      public unregisterMetamodel_argsTupleScheme getScheme() {
        return new unregisterMetamodel_argsTupleScheme();
      }
    }

    private static class unregisterMetamodel_argsTupleScheme extends TupleScheme<unregisterMetamodel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unregisterMetamodel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        oprot.writeString(struct.metamodel);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unregisterMetamodel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.metamodel = iprot.readString();
        struct.setMetamodelIsSet(true);
      }
    }

  }

  public static class unregisterMetamodel_result implements org.apache.thrift.TBase<unregisterMetamodel_result, unregisterMetamodel_result._Fields>, java.io.Serializable, Cloneable, Comparable<unregisterMetamodel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unregisterMetamodel_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unregisterMetamodel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unregisterMetamodel_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unregisterMetamodel_result.class, metaDataMap);
    }

    public unregisterMetamodel_result() {
    }

    public unregisterMetamodel_result(
      HawkInstanceNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterMetamodel_result(unregisterMetamodel_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public unregisterMetamodel_result deepCopy() {
      return new unregisterMetamodel_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public unregisterMetamodel_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterMetamodel_result)
        return this.equals((unregisterMetamodel_result)that);
      return false;
    }

    public boolean equals(unregisterMetamodel_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(unregisterMetamodel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unregisterMetamodel_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unregisterMetamodel_resultStandardSchemeFactory implements SchemeFactory {
      public unregisterMetamodel_resultStandardScheme getScheme() {
        return new unregisterMetamodel_resultStandardScheme();
      }
    }

    private static class unregisterMetamodel_resultStandardScheme extends StandardScheme<unregisterMetamodel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unregisterMetamodel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unregisterMetamodel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unregisterMetamodel_resultTupleSchemeFactory implements SchemeFactory {
      public unregisterMetamodel_resultTupleScheme getScheme() {
        return new unregisterMetamodel_resultTupleScheme();
      }
    }

    private static class unregisterMetamodel_resultTupleScheme extends TupleScheme<unregisterMetamodel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unregisterMetamodel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unregisterMetamodel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class listMetamodels_args implements org.apache.thrift.TBase<listMetamodels_args, listMetamodels_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMetamodels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMetamodels_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMetamodels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMetamodels_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMetamodels_args.class, metaDataMap);
    }

    public listMetamodels_args() {
    }

    public listMetamodels_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMetamodels_args(listMetamodels_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public listMetamodels_args deepCopy() {
      return new listMetamodels_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public listMetamodels_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMetamodels_args)
        return this.equals((listMetamodels_args)that);
      return false;
    }

    public boolean equals(listMetamodels_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(listMetamodels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMetamodels_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMetamodels_argsStandardSchemeFactory implements SchemeFactory {
      public listMetamodels_argsStandardScheme getScheme() {
        return new listMetamodels_argsStandardScheme();
      }
    }

    private static class listMetamodels_argsStandardScheme extends StandardScheme<listMetamodels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMetamodels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMetamodels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMetamodels_argsTupleSchemeFactory implements SchemeFactory {
      public listMetamodels_argsTupleScheme getScheme() {
        return new listMetamodels_argsTupleScheme();
      }
    }

    private static class listMetamodels_argsTupleScheme extends TupleScheme<listMetamodels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMetamodels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMetamodels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class listMetamodels_result implements org.apache.thrift.TBase<listMetamodels_result, listMetamodels_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMetamodels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMetamodels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMetamodels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMetamodels_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMetamodels_result.class, metaDataMap);
    }

    public listMetamodels_result() {
    }

    public listMetamodels_result(
      List<String> success,
      HawkInstanceNotFound err1)
    {
      this();
      this.success = success;
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMetamodels_result(listMetamodels_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public listMetamodels_result deepCopy() {
      return new listMetamodels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public listMetamodels_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public listMetamodels_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMetamodels_result)
        return this.equals((listMetamodels_result)that);
      return false;
    }

    public boolean equals(listMetamodels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(listMetamodels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMetamodels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMetamodels_resultStandardSchemeFactory implements SchemeFactory {
      public listMetamodels_resultStandardScheme getScheme() {
        return new listMetamodels_resultStandardScheme();
      }
    }

    private static class listMetamodels_resultStandardScheme extends StandardScheme<listMetamodels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMetamodels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list48.size);
                  String _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readString();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMetamodels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter51 : struct.success)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMetamodels_resultTupleSchemeFactory implements SchemeFactory {
      public listMetamodels_resultTupleScheme getScheme() {
        return new listMetamodels_resultTupleScheme();
      }
    }

    private static class listMetamodels_resultTupleScheme extends TupleScheme<listMetamodels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMetamodels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter52 : struct.success)
            {
              oprot.writeString(_iter52);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMetamodels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list53.size);
            String _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readString();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public String name; // required
    public String query; // required
    public String language; // required
    public String scope; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      QUERY((short)2, "query"),
      LANGUAGE((short)3, "language"),
      SCOPE((short)4, "scope");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // QUERY
            return QUERY;
          case 3: // LANGUAGE
            return LANGUAGE;
          case 4: // SCOPE
            return SCOPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      String name,
      String query,
      String language,
      String scope)
    {
      this();
      this.name = name;
      this.query = query;
      this.language = language;
      this.scope = scope;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.query = null;
      this.language = null;
      this.scope = null;
    }

    public String getName() {
      return this.name;
    }

    public query_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getQuery() {
      return this.query;
    }

    public query_args setQuery(String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public query_args setLanguage(String language) {
      this.language = language;
      return this;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getScope() {
      return this.scope;
    }

    public query_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String)value);
        }
        break;

      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          setLanguage((String)value);
        }
        break;

      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case QUERY:
        return getQuery();

      case LANGUAGE:
        return getLanguage();

      case SCOPE:
        return getScope();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case QUERY:
        return isSetQuery();
      case LANGUAGE:
        return isSetLanguage();
      case SCOPE:
        return isSetScope();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_language = true && (isSetLanguage());
      list.add(present_language);
      if (present_language)
        list.add(language);

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (query == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
      }
      if (language == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'language' was not present! Struct: " + toString());
      }
      if (scope == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scope' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LANGUAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.language = iprot.readString();
                struct.setLanguageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        if (struct.language != null) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.language);
          oprot.writeFieldEnd();
        }
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        oprot.writeString(struct.query);
        oprot.writeString(struct.language);
        oprot.writeString(struct.scope);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
        struct.scope = iprot.readString();
        struct.setScopeIsSet(true);
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public HawkInstanceNotFound err1; // required
    public UnknownQueryLanguage err2; // required
    public InvalidQuery err3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      List<String> success,
      HawkInstanceNotFound err1,
      UnknownQueryLanguage err2,
      InvalidQuery err3)
    {
      this();
      this.success = success;
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new UnknownQueryLanguage(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new InvalidQuery(other.err3);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public query_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public query_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public UnknownQueryLanguage getErr2() {
      return this.err2;
    }

    public query_result setErr2(UnknownQueryLanguage err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public InvalidQuery getErr3() {
      return this.err3;
    }

    public query_result setErr3(InvalidQuery err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((UnknownQueryLanguage)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((InvalidQuery)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list56.size);
                  String _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readString();
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new UnknownQueryLanguage();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new InvalidQuery();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter59 : struct.success)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        if (struct.isSetErr2()) {
          optionals.set(2);
        }
        if (struct.isSetErr3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter60 : struct.success)
            {
              oprot.writeString(_iter60);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list61.size);
            String _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readString();
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err2 = new UnknownQueryLanguage();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.err3 = new InvalidQuery();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
      }
    }

  }

  public static class resolveProxies_args implements org.apache.thrift.TBase<resolveProxies_args, resolveProxies_args._Fields>, java.io.Serializable, Cloneable, Comparable<resolveProxies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolveProxies_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROXIES_FIELD_DESC = new org.apache.thrift.protocol.TField("proxies", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolveProxies_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolveProxies_argsTupleSchemeFactory());
    }

    public String name; // required
    public List<ModelElement> proxies; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      PROXIES((short)2, "proxies");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // PROXIES
            return PROXIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROXIES, new org.apache.thrift.meta_data.FieldMetaData("proxies", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelElement.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolveProxies_args.class, metaDataMap);
    }

    public resolveProxies_args() {
    }

    public resolveProxies_args(
      String name,
      List<ModelElement> proxies)
    {
      this();
      this.name = name;
      this.proxies = proxies;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolveProxies_args(resolveProxies_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetProxies()) {
        List<ModelElement> __this__proxies = new ArrayList<ModelElement>(other.proxies.size());
        for (ModelElement other_element : other.proxies) {
          __this__proxies.add(new ModelElement(other_element));
        }
        this.proxies = __this__proxies;
      }
    }

    public resolveProxies_args deepCopy() {
      return new resolveProxies_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.proxies = null;
    }

    public String getName() {
      return this.name;
    }

    public resolveProxies_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getProxiesSize() {
      return (this.proxies == null) ? 0 : this.proxies.size();
    }

    public java.util.Iterator<ModelElement> getProxiesIterator() {
      return (this.proxies == null) ? null : this.proxies.iterator();
    }

    public void addToProxies(ModelElement elem) {
      if (this.proxies == null) {
        this.proxies = new ArrayList<ModelElement>();
      }
      this.proxies.add(elem);
    }

    public List<ModelElement> getProxies() {
      return this.proxies;
    }

    public resolveProxies_args setProxies(List<ModelElement> proxies) {
      this.proxies = proxies;
      return this;
    }

    public void unsetProxies() {
      this.proxies = null;
    }

    /** Returns true if field proxies is set (has been assigned a value) and false otherwise */
    public boolean isSetProxies() {
      return this.proxies != null;
    }

    public void setProxiesIsSet(boolean value) {
      if (!value) {
        this.proxies = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case PROXIES:
        if (value == null) {
          unsetProxies();
        } else {
          setProxies((List<ModelElement>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case PROXIES:
        return getProxies();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case PROXIES:
        return isSetProxies();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolveProxies_args)
        return this.equals((resolveProxies_args)that);
      return false;
    }

    public boolean equals(resolveProxies_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_proxies = true && this.isSetProxies();
      boolean that_present_proxies = true && that.isSetProxies();
      if (this_present_proxies || that_present_proxies) {
        if (!(this_present_proxies && that_present_proxies))
          return false;
        if (!this.proxies.equals(that.proxies))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_proxies = true && (isSetProxies());
      list.add(present_proxies);
      if (present_proxies)
        list.add(proxies);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolveProxies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProxies()).compareTo(other.isSetProxies());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProxies()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxies, other.proxies);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolveProxies_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("proxies:");
      if (this.proxies == null) {
        sb.append("null");
      } else {
        sb.append(this.proxies);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (proxies == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'proxies' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolveProxies_argsStandardSchemeFactory implements SchemeFactory {
      public resolveProxies_argsStandardScheme getScheme() {
        return new resolveProxies_argsStandardScheme();
      }
    }

    private static class resolveProxies_argsStandardScheme extends StandardScheme<resolveProxies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolveProxies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROXIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.proxies = new ArrayList<ModelElement>(_list64.size);
                  ModelElement _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new ModelElement();
                    _elem65.read(iprot);
                    struct.proxies.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setProxiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolveProxies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.proxies != null) {
          oprot.writeFieldBegin(PROXIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.proxies.size()));
            for (ModelElement _iter67 : struct.proxies)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolveProxies_argsTupleSchemeFactory implements SchemeFactory {
      public resolveProxies_argsTupleScheme getScheme() {
        return new resolveProxies_argsTupleScheme();
      }
    }

    private static class resolveProxies_argsTupleScheme extends TupleScheme<resolveProxies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolveProxies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        {
          oprot.writeI32(struct.proxies.size());
          for (ModelElement _iter68 : struct.proxies)
          {
            _iter68.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolveProxies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.proxies = new ArrayList<ModelElement>(_list69.size);
          ModelElement _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new ModelElement();
            _elem70.read(iprot);
            struct.proxies.add(_elem70);
          }
        }
        struct.setProxiesIsSet(true);
      }
    }

  }

  public static class resolveProxies_result implements org.apache.thrift.TBase<resolveProxies_result, resolveProxies_result._Fields>, java.io.Serializable, Cloneable, Comparable<resolveProxies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolveProxies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolveProxies_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolveProxies_resultTupleSchemeFactory());
    }

    public List<ModelElement> success; // required
    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelElement.class))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolveProxies_result.class, metaDataMap);
    }

    public resolveProxies_result() {
    }

    public resolveProxies_result(
      List<ModelElement> success,
      HawkInstanceNotFound err1)
    {
      this();
      this.success = success;
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolveProxies_result(resolveProxies_result other) {
      if (other.isSetSuccess()) {
        List<ModelElement> __this__success = new ArrayList<ModelElement>(other.success.size());
        for (ModelElement other_element : other.success) {
          __this__success.add(new ModelElement(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public resolveProxies_result deepCopy() {
      return new resolveProxies_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ModelElement> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ModelElement elem) {
      if (this.success == null) {
        this.success = new ArrayList<ModelElement>();
      }
      this.success.add(elem);
    }

    public List<ModelElement> getSuccess() {
      return this.success;
    }

    public resolveProxies_result setSuccess(List<ModelElement> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public resolveProxies_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ModelElement>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolveProxies_result)
        return this.equals((resolveProxies_result)that);
      return false;
    }

    public boolean equals(resolveProxies_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolveProxies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolveProxies_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolveProxies_resultStandardSchemeFactory implements SchemeFactory {
      public resolveProxies_resultStandardScheme getScheme() {
        return new resolveProxies_resultStandardScheme();
      }
    }

    private static class resolveProxies_resultStandardScheme extends StandardScheme<resolveProxies_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolveProxies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<ModelElement>(_list72.size);
                  ModelElement _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new ModelElement();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolveProxies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ModelElement _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolveProxies_resultTupleSchemeFactory implements SchemeFactory {
      public resolveProxies_resultTupleScheme getScheme() {
        return new resolveProxies_resultTupleScheme();
      }
    }

    private static class resolveProxies_resultTupleScheme extends TupleScheme<resolveProxies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolveProxies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ModelElement _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolveProxies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ModelElement>(_list77.size);
            ModelElement _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new ModelElement();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class addRepository_args implements org.apache.thrift.TBase<addRepository_args, addRepository_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRepository_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRepository_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRepository_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRepository_argsTupleSchemeFactory());
    }

    public String name; // required
    public String uri; // required
    public String type; // required
    public Credentials credentials; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      URI((short)2, "uri"),
      TYPE((short)3, "type"),
      CREDENTIALS((short)4, "credentials");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // URI
            return URI;
          case 3: // TYPE
            return TYPE;
          case 4: // CREDENTIALS
            return CREDENTIALS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Credentials.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRepository_args.class, metaDataMap);
    }

    public addRepository_args() {
    }

    public addRepository_args(
      String name,
      String uri,
      String type,
      Credentials credentials)
    {
      this();
      this.name = name;
      this.uri = uri;
      this.type = type;
      this.credentials = credentials;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRepository_args(addRepository_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetCredentials()) {
        this.credentials = new Credentials(other.credentials);
      }
    }

    public addRepository_args deepCopy() {
      return new addRepository_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.uri = null;
      this.type = null;
      this.credentials = null;
    }

    public String getName() {
      return this.name;
    }

    public addRepository_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getUri() {
      return this.uri;
    }

    public addRepository_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public String getType() {
      return this.type;
    }

    public addRepository_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public Credentials getCredentials() {
      return this.credentials;
    }

    public addRepository_args setCredentials(Credentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public void unsetCredentials() {
      this.credentials = null;
    }

    /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }

    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      case CREDENTIALS:
        if (value == null) {
          unsetCredentials();
        } else {
          setCredentials((Credentials)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case URI:
        return getUri();

      case TYPE:
        return getType();

      case CREDENTIALS:
        return getCredentials();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case URI:
        return isSetUri();
      case TYPE:
        return isSetType();
      case CREDENTIALS:
        return isSetCredentials();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRepository_args)
        return this.equals((addRepository_args)that);
      return false;
    }

    public boolean equals(addRepository_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_uri = true && (isSetUri());
      list.add(present_uri);
      if (present_uri)
        list.add(uri);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_credentials = true && (isSetCredentials());
      list.add(present_credentials);
      if (present_credentials)
        list.add(credentials);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRepository_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRepository_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (uri == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uri' was not present! Struct: " + toString());
      }
      if (type == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (credentials != null) {
        credentials.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRepository_argsStandardSchemeFactory implements SchemeFactory {
      public addRepository_argsStandardScheme getScheme() {
        return new addRepository_argsStandardScheme();
      }
    }

    private static class addRepository_argsStandardScheme extends StandardScheme<addRepository_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRepository_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CREDENTIALS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.credentials = new Credentials();
                struct.credentials.read(iprot);
                struct.setCredentialsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRepository_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.credentials != null) {
          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
          struct.credentials.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRepository_argsTupleSchemeFactory implements SchemeFactory {
      public addRepository_argsTupleScheme getScheme() {
        return new addRepository_argsTupleScheme();
      }
    }

    private static class addRepository_argsTupleScheme extends TupleScheme<addRepository_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRepository_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        oprot.writeString(struct.uri);
        oprot.writeString(struct.type);
        BitSet optionals = new BitSet();
        if (struct.isSetCredentials()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCredentials()) {
          struct.credentials.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRepository_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.credentials = new Credentials();
          struct.credentials.read(iprot);
          struct.setCredentialsIsSet(true);
        }
      }
    }

  }

  public static class addRepository_result implements org.apache.thrift.TBase<addRepository_result, addRepository_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRepository_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRepository_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ERR3_FIELD_DESC = new org.apache.thrift.protocol.TField("err3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRepository_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRepository_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required
    public UnknownRepositoryType err2; // required
    public VCSAuthenticationFailed err3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2"),
      ERR3((short)3, "err3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          case 3: // ERR3
            return ERR3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR3, new org.apache.thrift.meta_data.FieldMetaData("err3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRepository_result.class, metaDataMap);
    }

    public addRepository_result() {
    }

    public addRepository_result(
      HawkInstanceNotFound err1,
      UnknownRepositoryType err2,
      VCSAuthenticationFailed err3)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
      this.err3 = err3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRepository_result(addRepository_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new UnknownRepositoryType(other.err2);
      }
      if (other.isSetErr3()) {
        this.err3 = new VCSAuthenticationFailed(other.err3);
      }
    }

    public addRepository_result deepCopy() {
      return new addRepository_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
      this.err3 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public addRepository_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public UnknownRepositoryType getErr2() {
      return this.err2;
    }

    public addRepository_result setErr2(UnknownRepositoryType err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public VCSAuthenticationFailed getErr3() {
      return this.err3;
    }

    public addRepository_result setErr3(VCSAuthenticationFailed err3) {
      this.err3 = err3;
      return this;
    }

    public void unsetErr3() {
      this.err3 = null;
    }

    /** Returns true if field err3 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr3() {
      return this.err3 != null;
    }

    public void setErr3IsSet(boolean value) {
      if (!value) {
        this.err3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((UnknownRepositoryType)value);
        }
        break;

      case ERR3:
        if (value == null) {
          unsetErr3();
        } else {
          setErr3((VCSAuthenticationFailed)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      case ERR3:
        return getErr3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      case ERR3:
        return isSetErr3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRepository_result)
        return this.equals((addRepository_result)that);
      return false;
    }

    public boolean equals(addRepository_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      boolean this_present_err3 = true && this.isSetErr3();
      boolean that_present_err3 = true && that.isSetErr3();
      if (this_present_err3 || that_present_err3) {
        if (!(this_present_err3 && that_present_err3))
          return false;
        if (!this.err3.equals(that.err3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      boolean present_err3 = true && (isSetErr3());
      list.add(present_err3);
      if (present_err3)
        list.add(err3);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRepository_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr3()).compareTo(other.isSetErr3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err3, other.err3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRepository_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err3:");
      if (this.err3 == null) {
        sb.append("null");
      } else {
        sb.append(this.err3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRepository_resultStandardSchemeFactory implements SchemeFactory {
      public addRepository_resultStandardScheme getScheme() {
        return new addRepository_resultStandardScheme();
      }
    }

    private static class addRepository_resultStandardScheme extends StandardScheme<addRepository_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRepository_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new UnknownRepositoryType();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERR3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err3 = new VCSAuthenticationFailed();
                struct.err3.read(iprot);
                struct.setErr3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRepository_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err3 != null) {
          oprot.writeFieldBegin(ERR3_FIELD_DESC);
          struct.err3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRepository_resultTupleSchemeFactory implements SchemeFactory {
      public addRepository_resultTupleScheme getScheme() {
        return new addRepository_resultTupleScheme();
      }
    }

    private static class addRepository_resultTupleScheme extends TupleScheme<addRepository_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRepository_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        if (struct.isSetErr3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
        if (struct.isSetErr3()) {
          struct.err3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRepository_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new UnknownRepositoryType();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.err3 = new VCSAuthenticationFailed();
          struct.err3.read(iprot);
          struct.setErr3IsSet(true);
        }
      }
    }

  }

  public static class deleteRepository_args implements org.apache.thrift.TBase<deleteRepository_args, deleteRepository_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRepository_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRepository_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRepository_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRepository_argsTupleSchemeFactory());
    }

    public String name; // required
    public String uri; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      URI((short)2, "uri");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // URI
            return URI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRepository_args.class, metaDataMap);
    }

    public deleteRepository_args() {
    }

    public deleteRepository_args(
      String name,
      String uri)
    {
      this();
      this.name = name;
      this.uri = uri;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRepository_args(deleteRepository_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
    }

    public deleteRepository_args deepCopy() {
      return new deleteRepository_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.uri = null;
    }

    public String getName() {
      return this.name;
    }

    public deleteRepository_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getUri() {
      return this.uri;
    }

    public deleteRepository_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case URI:
        return getUri();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case URI:
        return isSetUri();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRepository_args)
        return this.equals((deleteRepository_args)that);
      return false;
    }

    public boolean equals(deleteRepository_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_uri = true && (isSetUri());
      list.add(present_uri);
      if (present_uri)
        list.add(uri);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRepository_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRepository_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (uri == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uri' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRepository_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRepository_argsStandardScheme getScheme() {
        return new deleteRepository_argsStandardScheme();
      }
    }

    private static class deleteRepository_argsStandardScheme extends StandardScheme<deleteRepository_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRepository_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRepository_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRepository_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRepository_argsTupleScheme getScheme() {
        return new deleteRepository_argsTupleScheme();
      }
    }

    private static class deleteRepository_argsTupleScheme extends TupleScheme<deleteRepository_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRepository_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        oprot.writeString(struct.uri);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRepository_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
    }

  }

  public static class deleteRepository_result implements org.apache.thrift.TBase<deleteRepository_result, deleteRepository_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRepository_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRepository_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRepository_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRepository_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRepository_result.class, metaDataMap);
    }

    public deleteRepository_result() {
    }

    public deleteRepository_result(
      HawkInstanceNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRepository_result(deleteRepository_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public deleteRepository_result deepCopy() {
      return new deleteRepository_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public deleteRepository_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRepository_result)
        return this.equals((deleteRepository_result)that);
      return false;
    }

    public boolean equals(deleteRepository_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRepository_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRepository_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRepository_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRepository_resultStandardScheme getScheme() {
        return new deleteRepository_resultStandardScheme();
      }
    }

    private static class deleteRepository_resultStandardScheme extends StandardScheme<deleteRepository_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRepository_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRepository_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRepository_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRepository_resultTupleScheme getScheme() {
        return new deleteRepository_resultTupleScheme();
      }
    }

    private static class deleteRepository_resultTupleScheme extends TupleScheme<deleteRepository_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRepository_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRepository_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class listRepositories_args implements org.apache.thrift.TBase<listRepositories_args, listRepositories_args._Fields>, java.io.Serializable, Cloneable, Comparable<listRepositories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listRepositories_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listRepositories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listRepositories_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listRepositories_args.class, metaDataMap);
    }

    public listRepositories_args() {
    }

    public listRepositories_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listRepositories_args(listRepositories_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public listRepositories_args deepCopy() {
      return new listRepositories_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public listRepositories_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listRepositories_args)
        return this.equals((listRepositories_args)that);
      return false;
    }

    public boolean equals(listRepositories_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(listRepositories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listRepositories_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listRepositories_argsStandardSchemeFactory implements SchemeFactory {
      public listRepositories_argsStandardScheme getScheme() {
        return new listRepositories_argsStandardScheme();
      }
    }

    private static class listRepositories_argsStandardScheme extends StandardScheme<listRepositories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listRepositories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listRepositories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listRepositories_argsTupleSchemeFactory implements SchemeFactory {
      public listRepositories_argsTupleScheme getScheme() {
        return new listRepositories_argsTupleScheme();
      }
    }

    private static class listRepositories_argsTupleScheme extends TupleScheme<listRepositories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listRepositories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listRepositories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class listRepositories_result implements org.apache.thrift.TBase<listRepositories_result, listRepositories_result._Fields>, java.io.Serializable, Cloneable, Comparable<listRepositories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listRepositories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listRepositories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listRepositories_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listRepositories_result.class, metaDataMap);
    }

    public listRepositories_result() {
    }

    public listRepositories_result(
      List<String> success,
      HawkInstanceNotFound err1)
    {
      this();
      this.success = success;
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listRepositories_result(listRepositories_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public listRepositories_result deepCopy() {
      return new listRepositories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public listRepositories_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public listRepositories_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listRepositories_result)
        return this.equals((listRepositories_result)that);
      return false;
    }

    public boolean equals(listRepositories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(listRepositories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listRepositories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listRepositories_resultStandardSchemeFactory implements SchemeFactory {
      public listRepositories_resultStandardScheme getScheme() {
        return new listRepositories_resultStandardScheme();
      }
    }

    private static class listRepositories_resultStandardScheme extends StandardScheme<listRepositories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listRepositories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list80.size);
                  String _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = iprot.readString();
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listRepositories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter83 : struct.success)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listRepositories_resultTupleSchemeFactory implements SchemeFactory {
      public listRepositories_resultTupleScheme getScheme() {
        return new listRepositories_resultTupleScheme();
      }
    }

    private static class listRepositories_resultTupleScheme extends TupleScheme<listRepositories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listRepositories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter84 : struct.success)
            {
              oprot.writeString(_iter84);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listRepositories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list85.size);
            String _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = iprot.readString();
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class listFiles_args implements org.apache.thrift.TBase<listFiles_args, listFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<listFiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFiles_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REPOSITORY_FIELD_DESC = new org.apache.thrift.protocol.TField("repository", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listFiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listFiles_argsTupleSchemeFactory());
    }

    public String name; // required
    public String repository; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      REPOSITORY((short)2, "repository");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // REPOSITORY
            return REPOSITORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPOSITORY, new org.apache.thrift.meta_data.FieldMetaData("repository", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFiles_args.class, metaDataMap);
    }

    public listFiles_args() {
    }

    public listFiles_args(
      String name,
      String repository)
    {
      this();
      this.name = name;
      this.repository = repository;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFiles_args(listFiles_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetRepository()) {
        this.repository = other.repository;
      }
    }

    public listFiles_args deepCopy() {
      return new listFiles_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.repository = null;
    }

    public String getName() {
      return this.name;
    }

    public listFiles_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getRepository() {
      return this.repository;
    }

    public listFiles_args setRepository(String repository) {
      this.repository = repository;
      return this;
    }

    public void unsetRepository() {
      this.repository = null;
    }

    /** Returns true if field repository is set (has been assigned a value) and false otherwise */
    public boolean isSetRepository() {
      return this.repository != null;
    }

    public void setRepositoryIsSet(boolean value) {
      if (!value) {
        this.repository = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case REPOSITORY:
        if (value == null) {
          unsetRepository();
        } else {
          setRepository((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case REPOSITORY:
        return getRepository();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case REPOSITORY:
        return isSetRepository();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listFiles_args)
        return this.equals((listFiles_args)that);
      return false;
    }

    public boolean equals(listFiles_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_repository = true && this.isSetRepository();
      boolean that_present_repository = true && that.isSetRepository();
      if (this_present_repository || that_present_repository) {
        if (!(this_present_repository && that_present_repository))
          return false;
        if (!this.repository.equals(that.repository))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_repository = true && (isSetRepository());
      list.add(present_repository);
      if (present_repository)
        list.add(repository);

      return list.hashCode();
    }

    @Override
    public int compareTo(listFiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepository()).compareTo(other.isSetRepository());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepository()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repository, other.repository);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listFiles_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repository:");
      if (this.repository == null) {
        sb.append("null");
      } else {
        sb.append(this.repository);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (repository == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'repository' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listFiles_argsStandardSchemeFactory implements SchemeFactory {
      public listFiles_argsStandardScheme getScheme() {
        return new listFiles_argsStandardScheme();
      }
    }

    private static class listFiles_argsStandardScheme extends StandardScheme<listFiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPOSITORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repository = iprot.readString();
                struct.setRepositoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listFiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.repository != null) {
          oprot.writeFieldBegin(REPOSITORY_FIELD_DESC);
          oprot.writeString(struct.repository);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listFiles_argsTupleSchemeFactory implements SchemeFactory {
      public listFiles_argsTupleScheme getScheme() {
        return new listFiles_argsTupleScheme();
      }
    }

    private static class listFiles_argsTupleScheme extends TupleScheme<listFiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listFiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        oprot.writeString(struct.repository);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listFiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.repository = iprot.readString();
        struct.setRepositoryIsSet(true);
      }
    }

  }

  public static class listFiles_result implements org.apache.thrift.TBase<listFiles_result, listFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<listFiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listFiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listFiles_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFiles_result.class, metaDataMap);
    }

    public listFiles_result() {
    }

    public listFiles_result(
      List<String> success,
      HawkInstanceNotFound err1)
    {
      this();
      this.success = success;
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFiles_result(listFiles_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public listFiles_result deepCopy() {
      return new listFiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public listFiles_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public listFiles_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listFiles_result)
        return this.equals((listFiles_result)that);
      return false;
    }

    public boolean equals(listFiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(listFiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listFiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listFiles_resultStandardSchemeFactory implements SchemeFactory {
      public listFiles_resultStandardScheme getScheme() {
        return new listFiles_resultStandardScheme();
      }
    }

    private static class listFiles_resultStandardScheme extends StandardScheme<listFiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list88.size);
                  String _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readString();
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listFiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter91 : struct.success)
            {
              oprot.writeString(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listFiles_resultTupleSchemeFactory implements SchemeFactory {
      public listFiles_resultTupleScheme getScheme() {
        return new listFiles_resultTupleScheme();
      }
    }

    private static class listFiles_resultTupleScheme extends TupleScheme<listFiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listFiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter92 : struct.success)
            {
              oprot.writeString(_iter92);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listFiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list93.size);
            String _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readString();
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class configurePolling_args implements org.apache.thrift.TBase<configurePolling_args, configurePolling_args._Fields>, java.io.Serializable, Cloneable, Comparable<configurePolling_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configurePolling_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configurePolling_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configurePolling_argsTupleSchemeFactory());
    }

    public String name; // required
    public int base; // required
    public int max; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      BASE((short)2, "base"),
      MAX((short)3, "max");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // BASE
            return BASE;
          case 3: // MAX
            return MAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BASE_ISSET_ID = 0;
    private static final int __MAX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configurePolling_args.class, metaDataMap);
    }

    public configurePolling_args() {
    }

    public configurePolling_args(
      String name,
      int base,
      int max)
    {
      this();
      this.name = name;
      this.base = base;
      setBaseIsSet(true);
      this.max = max;
      setMaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configurePolling_args(configurePolling_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.base = other.base;
      this.max = other.max;
    }

    public configurePolling_args deepCopy() {
      return new configurePolling_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      setBaseIsSet(false);
      this.base = 0;
      setMaxIsSet(false);
      this.max = 0;
    }

    public String getName() {
      return this.name;
    }

    public configurePolling_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getBase() {
      return this.base;
    }

    public configurePolling_args setBase(int base) {
      this.base = base;
      setBaseIsSet(true);
      return this;
    }

    public void unsetBase() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASE_ISSET_ID);
    }

    /** Returns true if field base is set (has been assigned a value) and false otherwise */
    public boolean isSetBase() {
      return EncodingUtils.testBit(__isset_bitfield, __BASE_ISSET_ID);
    }

    public void setBaseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASE_ISSET_ID, value);
    }

    public int getMax() {
      return this.max;
    }

    public configurePolling_args setMax(int max) {
      this.max = max;
      setMaxIsSet(true);
      return this;
    }

    public void unsetMax() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    /** Returns true if field max is set (has been assigned a value) and false otherwise */
    public boolean isSetMax() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    public void setMaxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case BASE:
        if (value == null) {
          unsetBase();
        } else {
          setBase((Integer)value);
        }
        break;

      case MAX:
        if (value == null) {
          unsetMax();
        } else {
          setMax((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case BASE:
        return Integer.valueOf(getBase());

      case MAX:
        return Integer.valueOf(getMax());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case BASE:
        return isSetBase();
      case MAX:
        return isSetMax();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configurePolling_args)
        return this.equals((configurePolling_args)that);
      return false;
    }

    public boolean equals(configurePolling_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_base = true;
      boolean that_present_base = true;
      if (this_present_base || that_present_base) {
        if (!(this_present_base && that_present_base))
          return false;
        if (this.base != that.base)
          return false;
      }

      boolean this_present_max = true;
      boolean that_present_max = true;
      if (this_present_max || that_present_max) {
        if (!(this_present_max && that_present_max))
          return false;
        if (this.max != that.max)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_base = true;
      list.add(present_base);
      if (present_base)
        list.add(base);

      boolean present_max = true;
      list.add(present_max);
      if (present_max)
        list.add(max);

      return list.hashCode();
    }

    @Override
    public int compareTo(configurePolling_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configurePolling_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("base:");
      sb.append(this.base);
      first = false;
      if (!first) sb.append(", ");
      sb.append("max:");
      sb.append(this.max);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'base' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'max' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configurePolling_argsStandardSchemeFactory implements SchemeFactory {
      public configurePolling_argsStandardScheme getScheme() {
        return new configurePolling_argsStandardScheme();
      }
    }

    private static class configurePolling_argsStandardScheme extends StandardScheme<configurePolling_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configurePolling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BASE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.base = iprot.readI32();
                struct.setBaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max = iprot.readI32();
                struct.setMaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetBase()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'base' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetMax()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'max' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configurePolling_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        oprot.writeI32(struct.base);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        oprot.writeI32(struct.max);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configurePolling_argsTupleSchemeFactory implements SchemeFactory {
      public configurePolling_argsTupleScheme getScheme() {
        return new configurePolling_argsTupleScheme();
      }
    }

    private static class configurePolling_argsTupleScheme extends TupleScheme<configurePolling_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configurePolling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        oprot.writeI32(struct.base);
        oprot.writeI32(struct.max);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configurePolling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.base = iprot.readI32();
        struct.setBaseIsSet(true);
        struct.max = iprot.readI32();
        struct.setMaxIsSet(true);
      }
    }

  }

  public static class configurePolling_result implements org.apache.thrift.TBase<configurePolling_result, configurePolling_result._Fields>, java.io.Serializable, Cloneable, Comparable<configurePolling_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configurePolling_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configurePolling_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configurePolling_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required
    public InvalidPollingConfiguration err2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configurePolling_result.class, metaDataMap);
    }

    public configurePolling_result() {
    }

    public configurePolling_result(
      HawkInstanceNotFound err1,
      InvalidPollingConfiguration err2)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configurePolling_result(configurePolling_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new InvalidPollingConfiguration(other.err2);
      }
    }

    public configurePolling_result deepCopy() {
      return new configurePolling_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public configurePolling_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public InvalidPollingConfiguration getErr2() {
      return this.err2;
    }

    public configurePolling_result setErr2(InvalidPollingConfiguration err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((InvalidPollingConfiguration)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configurePolling_result)
        return this.equals((configurePolling_result)that);
      return false;
    }

    public boolean equals(configurePolling_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      return list.hashCode();
    }

    @Override
    public int compareTo(configurePolling_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configurePolling_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configurePolling_resultStandardSchemeFactory implements SchemeFactory {
      public configurePolling_resultStandardScheme getScheme() {
        return new configurePolling_resultStandardScheme();
      }
    }

    private static class configurePolling_resultStandardScheme extends StandardScheme<configurePolling_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configurePolling_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new InvalidPollingConfiguration();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configurePolling_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configurePolling_resultTupleSchemeFactory implements SchemeFactory {
      public configurePolling_resultTupleScheme getScheme() {
        return new configurePolling_resultTupleScheme();
      }
    }

    private static class configurePolling_resultTupleScheme extends TupleScheme<configurePolling_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configurePolling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configurePolling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new InvalidPollingConfiguration();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
      }
    }

  }

  public static class addDerivedAttribute_args implements org.apache.thrift.TBase<addDerivedAttribute_args, addDerivedAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<addDerivedAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDerivedAttribute_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDerivedAttribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDerivedAttribute_argsTupleSchemeFactory());
    }

    public String name; // required
    public DerivedAttributeSpec spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      SPEC((short)2, "spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // SPEC
            return SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DerivedAttributeSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDerivedAttribute_args.class, metaDataMap);
    }

    public addDerivedAttribute_args() {
    }

    public addDerivedAttribute_args(
      String name,
      DerivedAttributeSpec spec)
    {
      this();
      this.name = name;
      this.spec = spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDerivedAttribute_args(addDerivedAttribute_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetSpec()) {
        this.spec = new DerivedAttributeSpec(other.spec);
      }
    }

    public addDerivedAttribute_args deepCopy() {
      return new addDerivedAttribute_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.spec = null;
    }

    public String getName() {
      return this.name;
    }

    public addDerivedAttribute_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public DerivedAttributeSpec getSpec() {
      return this.spec;
    }

    public addDerivedAttribute_args setSpec(DerivedAttributeSpec spec) {
      this.spec = spec;
      return this;
    }

    public void unsetSpec() {
      this.spec = null;
    }

    /** Returns true if field spec is set (has been assigned a value) and false otherwise */
    public boolean isSetSpec() {
      return this.spec != null;
    }

    public void setSpecIsSet(boolean value) {
      if (!value) {
        this.spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SPEC:
        if (value == null) {
          unsetSpec();
        } else {
          setSpec((DerivedAttributeSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case SPEC:
        return getSpec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case SPEC:
        return isSetSpec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDerivedAttribute_args)
        return this.equals((addDerivedAttribute_args)that);
      return false;
    }

    public boolean equals(addDerivedAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_spec = true && this.isSetSpec();
      boolean that_present_spec = true && that.isSetSpec();
      if (this_present_spec || that_present_spec) {
        if (!(this_present_spec && that_present_spec))
          return false;
        if (!this.spec.equals(that.spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_spec = true && (isSetSpec());
      list.add(present_spec);
      if (present_spec)
        list.add(spec);

      return list.hashCode();
    }

    @Override
    public int compareTo(addDerivedAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDerivedAttribute_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spec:");
      if (this.spec == null) {
        sb.append("null");
      } else {
        sb.append(this.spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (spec == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spec' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (spec != null) {
        spec.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDerivedAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public addDerivedAttribute_argsStandardScheme getScheme() {
        return new addDerivedAttribute_argsStandardScheme();
      }
    }

    private static class addDerivedAttribute_argsStandardScheme extends StandardScheme<addDerivedAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDerivedAttribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spec = new DerivedAttributeSpec();
                struct.spec.read(iprot);
                struct.setSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDerivedAttribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.spec != null) {
          oprot.writeFieldBegin(SPEC_FIELD_DESC);
          struct.spec.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDerivedAttribute_argsTupleSchemeFactory implements SchemeFactory {
      public addDerivedAttribute_argsTupleScheme getScheme() {
        return new addDerivedAttribute_argsTupleScheme();
      }
    }

    private static class addDerivedAttribute_argsTupleScheme extends TupleScheme<addDerivedAttribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDerivedAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        struct.spec.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDerivedAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.spec = new DerivedAttributeSpec();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
    }

  }

  public static class addDerivedAttribute_result implements org.apache.thrift.TBase<addDerivedAttribute_result, addDerivedAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<addDerivedAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDerivedAttribute_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDerivedAttribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDerivedAttribute_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required
    public InvalidDerivedAttributeSpec err2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDerivedAttribute_result.class, metaDataMap);
    }

    public addDerivedAttribute_result() {
    }

    public addDerivedAttribute_result(
      HawkInstanceNotFound err1,
      InvalidDerivedAttributeSpec err2)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDerivedAttribute_result(addDerivedAttribute_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new InvalidDerivedAttributeSpec(other.err2);
      }
    }

    public addDerivedAttribute_result deepCopy() {
      return new addDerivedAttribute_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public addDerivedAttribute_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public InvalidDerivedAttributeSpec getErr2() {
      return this.err2;
    }

    public addDerivedAttribute_result setErr2(InvalidDerivedAttributeSpec err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((InvalidDerivedAttributeSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDerivedAttribute_result)
        return this.equals((addDerivedAttribute_result)that);
      return false;
    }

    public boolean equals(addDerivedAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      return list.hashCode();
    }

    @Override
    public int compareTo(addDerivedAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDerivedAttribute_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDerivedAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public addDerivedAttribute_resultStandardScheme getScheme() {
        return new addDerivedAttribute_resultStandardScheme();
      }
    }

    private static class addDerivedAttribute_resultStandardScheme extends StandardScheme<addDerivedAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDerivedAttribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new InvalidDerivedAttributeSpec();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDerivedAttribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDerivedAttribute_resultTupleSchemeFactory implements SchemeFactory {
      public addDerivedAttribute_resultTupleScheme getScheme() {
        return new addDerivedAttribute_resultTupleScheme();
      }
    }

    private static class addDerivedAttribute_resultTupleScheme extends TupleScheme<addDerivedAttribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDerivedAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDerivedAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new InvalidDerivedAttributeSpec();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
      }
    }

  }

  public static class removeDerivedAttribute_args implements org.apache.thrift.TBase<removeDerivedAttribute_args, removeDerivedAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeDerivedAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDerivedAttribute_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDerivedAttribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDerivedAttribute_argsTupleSchemeFactory());
    }

    public String name; // required
    public DerivedAttributeSpec spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      SPEC((short)2, "spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // SPEC
            return SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DerivedAttributeSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDerivedAttribute_args.class, metaDataMap);
    }

    public removeDerivedAttribute_args() {
    }

    public removeDerivedAttribute_args(
      String name,
      DerivedAttributeSpec spec)
    {
      this();
      this.name = name;
      this.spec = spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDerivedAttribute_args(removeDerivedAttribute_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetSpec()) {
        this.spec = new DerivedAttributeSpec(other.spec);
      }
    }

    public removeDerivedAttribute_args deepCopy() {
      return new removeDerivedAttribute_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.spec = null;
    }

    public String getName() {
      return this.name;
    }

    public removeDerivedAttribute_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public DerivedAttributeSpec getSpec() {
      return this.spec;
    }

    public removeDerivedAttribute_args setSpec(DerivedAttributeSpec spec) {
      this.spec = spec;
      return this;
    }

    public void unsetSpec() {
      this.spec = null;
    }

    /** Returns true if field spec is set (has been assigned a value) and false otherwise */
    public boolean isSetSpec() {
      return this.spec != null;
    }

    public void setSpecIsSet(boolean value) {
      if (!value) {
        this.spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SPEC:
        if (value == null) {
          unsetSpec();
        } else {
          setSpec((DerivedAttributeSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case SPEC:
        return getSpec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case SPEC:
        return isSetSpec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDerivedAttribute_args)
        return this.equals((removeDerivedAttribute_args)that);
      return false;
    }

    public boolean equals(removeDerivedAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_spec = true && this.isSetSpec();
      boolean that_present_spec = true && that.isSetSpec();
      if (this_present_spec || that_present_spec) {
        if (!(this_present_spec && that_present_spec))
          return false;
        if (!this.spec.equals(that.spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_spec = true && (isSetSpec());
      list.add(present_spec);
      if (present_spec)
        list.add(spec);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeDerivedAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDerivedAttribute_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spec:");
      if (this.spec == null) {
        sb.append("null");
      } else {
        sb.append(this.spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (spec == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spec' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (spec != null) {
        spec.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDerivedAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public removeDerivedAttribute_argsStandardScheme getScheme() {
        return new removeDerivedAttribute_argsStandardScheme();
      }
    }

    private static class removeDerivedAttribute_argsStandardScheme extends StandardScheme<removeDerivedAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDerivedAttribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spec = new DerivedAttributeSpec();
                struct.spec.read(iprot);
                struct.setSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDerivedAttribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.spec != null) {
          oprot.writeFieldBegin(SPEC_FIELD_DESC);
          struct.spec.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDerivedAttribute_argsTupleSchemeFactory implements SchemeFactory {
      public removeDerivedAttribute_argsTupleScheme getScheme() {
        return new removeDerivedAttribute_argsTupleScheme();
      }
    }

    private static class removeDerivedAttribute_argsTupleScheme extends TupleScheme<removeDerivedAttribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeDerivedAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        struct.spec.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeDerivedAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.spec = new DerivedAttributeSpec();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
    }

  }

  public static class removeDerivedAttribute_result implements org.apache.thrift.TBase<removeDerivedAttribute_result, removeDerivedAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeDerivedAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDerivedAttribute_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDerivedAttribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDerivedAttribute_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDerivedAttribute_result.class, metaDataMap);
    }

    public removeDerivedAttribute_result() {
    }

    public removeDerivedAttribute_result(
      HawkInstanceNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDerivedAttribute_result(removeDerivedAttribute_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public removeDerivedAttribute_result deepCopy() {
      return new removeDerivedAttribute_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public removeDerivedAttribute_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDerivedAttribute_result)
        return this.equals((removeDerivedAttribute_result)that);
      return false;
    }

    public boolean equals(removeDerivedAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeDerivedAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDerivedAttribute_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDerivedAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public removeDerivedAttribute_resultStandardScheme getScheme() {
        return new removeDerivedAttribute_resultStandardScheme();
      }
    }

    private static class removeDerivedAttribute_resultStandardScheme extends StandardScheme<removeDerivedAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDerivedAttribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDerivedAttribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDerivedAttribute_resultTupleSchemeFactory implements SchemeFactory {
      public removeDerivedAttribute_resultTupleScheme getScheme() {
        return new removeDerivedAttribute_resultTupleScheme();
      }
    }

    private static class removeDerivedAttribute_resultTupleScheme extends TupleScheme<removeDerivedAttribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeDerivedAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeDerivedAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class listDerivedAttributes_args implements org.apache.thrift.TBase<listDerivedAttributes_args, listDerivedAttributes_args._Fields>, java.io.Serializable, Cloneable, Comparable<listDerivedAttributes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDerivedAttributes_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDerivedAttributes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDerivedAttributes_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDerivedAttributes_args.class, metaDataMap);
    }

    public listDerivedAttributes_args() {
    }

    public listDerivedAttributes_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDerivedAttributes_args(listDerivedAttributes_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public listDerivedAttributes_args deepCopy() {
      return new listDerivedAttributes_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public listDerivedAttributes_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDerivedAttributes_args)
        return this.equals((listDerivedAttributes_args)that);
      return false;
    }

    public boolean equals(listDerivedAttributes_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDerivedAttributes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDerivedAttributes_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDerivedAttributes_argsStandardSchemeFactory implements SchemeFactory {
      public listDerivedAttributes_argsStandardScheme getScheme() {
        return new listDerivedAttributes_argsStandardScheme();
      }
    }

    private static class listDerivedAttributes_argsStandardScheme extends StandardScheme<listDerivedAttributes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDerivedAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDerivedAttributes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDerivedAttributes_argsTupleSchemeFactory implements SchemeFactory {
      public listDerivedAttributes_argsTupleScheme getScheme() {
        return new listDerivedAttributes_argsTupleScheme();
      }
    }

    private static class listDerivedAttributes_argsTupleScheme extends TupleScheme<listDerivedAttributes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDerivedAttributes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDerivedAttributes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class listDerivedAttributes_result implements org.apache.thrift.TBase<listDerivedAttributes_result, listDerivedAttributes_result._Fields>, java.io.Serializable, Cloneable, Comparable<listDerivedAttributes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDerivedAttributes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDerivedAttributes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDerivedAttributes_resultTupleSchemeFactory());
    }

    public List<DerivedAttributeSpec> success; // required
    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DerivedAttributeSpec.class))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDerivedAttributes_result.class, metaDataMap);
    }

    public listDerivedAttributes_result() {
    }

    public listDerivedAttributes_result(
      List<DerivedAttributeSpec> success,
      HawkInstanceNotFound err1)
    {
      this();
      this.success = success;
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDerivedAttributes_result(listDerivedAttributes_result other) {
      if (other.isSetSuccess()) {
        List<DerivedAttributeSpec> __this__success = new ArrayList<DerivedAttributeSpec>(other.success.size());
        for (DerivedAttributeSpec other_element : other.success) {
          __this__success.add(new DerivedAttributeSpec(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public listDerivedAttributes_result deepCopy() {
      return new listDerivedAttributes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DerivedAttributeSpec> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DerivedAttributeSpec elem) {
      if (this.success == null) {
        this.success = new ArrayList<DerivedAttributeSpec>();
      }
      this.success.add(elem);
    }

    public List<DerivedAttributeSpec> getSuccess() {
      return this.success;
    }

    public listDerivedAttributes_result setSuccess(List<DerivedAttributeSpec> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public listDerivedAttributes_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DerivedAttributeSpec>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDerivedAttributes_result)
        return this.equals((listDerivedAttributes_result)that);
      return false;
    }

    public boolean equals(listDerivedAttributes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDerivedAttributes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDerivedAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDerivedAttributes_resultStandardSchemeFactory implements SchemeFactory {
      public listDerivedAttributes_resultStandardScheme getScheme() {
        return new listDerivedAttributes_resultStandardScheme();
      }
    }

    private static class listDerivedAttributes_resultStandardScheme extends StandardScheme<listDerivedAttributes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDerivedAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<DerivedAttributeSpec>(_list96.size);
                  DerivedAttributeSpec _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new DerivedAttributeSpec();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDerivedAttributes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DerivedAttributeSpec _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDerivedAttributes_resultTupleSchemeFactory implements SchemeFactory {
      public listDerivedAttributes_resultTupleScheme getScheme() {
        return new listDerivedAttributes_resultTupleScheme();
      }
    }

    private static class listDerivedAttributes_resultTupleScheme extends TupleScheme<listDerivedAttributes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDerivedAttributes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DerivedAttributeSpec _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDerivedAttributes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DerivedAttributeSpec>(_list101.size);
            DerivedAttributeSpec _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new DerivedAttributeSpec();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class addIndexedAttribute_args implements org.apache.thrift.TBase<addIndexedAttribute_args, addIndexedAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<addIndexedAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addIndexedAttribute_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addIndexedAttribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addIndexedAttribute_argsTupleSchemeFactory());
    }

    public String name; // required
    public IndexedAttributeSpec spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      SPEC((short)2, "spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // SPEC
            return SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexedAttributeSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addIndexedAttribute_args.class, metaDataMap);
    }

    public addIndexedAttribute_args() {
    }

    public addIndexedAttribute_args(
      String name,
      IndexedAttributeSpec spec)
    {
      this();
      this.name = name;
      this.spec = spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIndexedAttribute_args(addIndexedAttribute_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetSpec()) {
        this.spec = new IndexedAttributeSpec(other.spec);
      }
    }

    public addIndexedAttribute_args deepCopy() {
      return new addIndexedAttribute_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.spec = null;
    }

    public String getName() {
      return this.name;
    }

    public addIndexedAttribute_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public IndexedAttributeSpec getSpec() {
      return this.spec;
    }

    public addIndexedAttribute_args setSpec(IndexedAttributeSpec spec) {
      this.spec = spec;
      return this;
    }

    public void unsetSpec() {
      this.spec = null;
    }

    /** Returns true if field spec is set (has been assigned a value) and false otherwise */
    public boolean isSetSpec() {
      return this.spec != null;
    }

    public void setSpecIsSet(boolean value) {
      if (!value) {
        this.spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SPEC:
        if (value == null) {
          unsetSpec();
        } else {
          setSpec((IndexedAttributeSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case SPEC:
        return getSpec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case SPEC:
        return isSetSpec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIndexedAttribute_args)
        return this.equals((addIndexedAttribute_args)that);
      return false;
    }

    public boolean equals(addIndexedAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_spec = true && this.isSetSpec();
      boolean that_present_spec = true && that.isSetSpec();
      if (this_present_spec || that_present_spec) {
        if (!(this_present_spec && that_present_spec))
          return false;
        if (!this.spec.equals(that.spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_spec = true && (isSetSpec());
      list.add(present_spec);
      if (present_spec)
        list.add(spec);

      return list.hashCode();
    }

    @Override
    public int compareTo(addIndexedAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIndexedAttribute_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spec:");
      if (this.spec == null) {
        sb.append("null");
      } else {
        sb.append(this.spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (spec == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spec' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (spec != null) {
        spec.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addIndexedAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public addIndexedAttribute_argsStandardScheme getScheme() {
        return new addIndexedAttribute_argsStandardScheme();
      }
    }

    private static class addIndexedAttribute_argsStandardScheme extends StandardScheme<addIndexedAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addIndexedAttribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spec = new IndexedAttributeSpec();
                struct.spec.read(iprot);
                struct.setSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addIndexedAttribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.spec != null) {
          oprot.writeFieldBegin(SPEC_FIELD_DESC);
          struct.spec.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addIndexedAttribute_argsTupleSchemeFactory implements SchemeFactory {
      public addIndexedAttribute_argsTupleScheme getScheme() {
        return new addIndexedAttribute_argsTupleScheme();
      }
    }

    private static class addIndexedAttribute_argsTupleScheme extends TupleScheme<addIndexedAttribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addIndexedAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        struct.spec.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addIndexedAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.spec = new IndexedAttributeSpec();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
    }

  }

  public static class addIndexedAttribute_result implements org.apache.thrift.TBase<addIndexedAttribute_result, addIndexedAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<addIndexedAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addIndexedAttribute_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR2_FIELD_DESC = new org.apache.thrift.protocol.TField("err2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addIndexedAttribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addIndexedAttribute_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required
    public InvalidIndexedAttributeSpec err2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1"),
      ERR2((short)2, "err2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          case 2: // ERR2
            return ERR2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR2, new org.apache.thrift.meta_data.FieldMetaData("err2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addIndexedAttribute_result.class, metaDataMap);
    }

    public addIndexedAttribute_result() {
    }

    public addIndexedAttribute_result(
      HawkInstanceNotFound err1,
      InvalidIndexedAttributeSpec err2)
    {
      this();
      this.err1 = err1;
      this.err2 = err2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIndexedAttribute_result(addIndexedAttribute_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
      if (other.isSetErr2()) {
        this.err2 = new InvalidIndexedAttributeSpec(other.err2);
      }
    }

    public addIndexedAttribute_result deepCopy() {
      return new addIndexedAttribute_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
      this.err2 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public addIndexedAttribute_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public InvalidIndexedAttributeSpec getErr2() {
      return this.err2;
    }

    public addIndexedAttribute_result setErr2(InvalidIndexedAttributeSpec err2) {
      this.err2 = err2;
      return this;
    }

    public void unsetErr2() {
      this.err2 = null;
    }

    /** Returns true if field err2 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr2() {
      return this.err2 != null;
    }

    public void setErr2IsSet(boolean value) {
      if (!value) {
        this.err2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      case ERR2:
        if (value == null) {
          unsetErr2();
        } else {
          setErr2((InvalidIndexedAttributeSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      case ERR2:
        return getErr2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      case ERR2:
        return isSetErr2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIndexedAttribute_result)
        return this.equals((addIndexedAttribute_result)that);
      return false;
    }

    public boolean equals(addIndexedAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      boolean this_present_err2 = true && this.isSetErr2();
      boolean that_present_err2 = true && that.isSetErr2();
      if (this_present_err2 || that_present_err2) {
        if (!(this_present_err2 && that_present_err2))
          return false;
        if (!this.err2.equals(that.err2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      boolean present_err2 = true && (isSetErr2());
      list.add(present_err2);
      if (present_err2)
        list.add(err2);

      return list.hashCode();
    }

    @Override
    public int compareTo(addIndexedAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr2()).compareTo(other.isSetErr2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err2, other.err2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIndexedAttribute_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err2:");
      if (this.err2 == null) {
        sb.append("null");
      } else {
        sb.append(this.err2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addIndexedAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public addIndexedAttribute_resultStandardScheme getScheme() {
        return new addIndexedAttribute_resultStandardScheme();
      }
    }

    private static class addIndexedAttribute_resultStandardScheme extends StandardScheme<addIndexedAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addIndexedAttribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err2 = new InvalidIndexedAttributeSpec();
                struct.err2.read(iprot);
                struct.setErr2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addIndexedAttribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err2 != null) {
          oprot.writeFieldBegin(ERR2_FIELD_DESC);
          struct.err2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addIndexedAttribute_resultTupleSchemeFactory implements SchemeFactory {
      public addIndexedAttribute_resultTupleScheme getScheme() {
        return new addIndexedAttribute_resultTupleScheme();
      }
    }

    private static class addIndexedAttribute_resultTupleScheme extends TupleScheme<addIndexedAttribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addIndexedAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        if (struct.isSetErr2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
        if (struct.isSetErr2()) {
          struct.err2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addIndexedAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.err2 = new InvalidIndexedAttributeSpec();
          struct.err2.read(iprot);
          struct.setErr2IsSet(true);
        }
      }
    }

  }

  public static class removeIndexedAttribute_args implements org.apache.thrift.TBase<removeIndexedAttribute_args, removeIndexedAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeIndexedAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeIndexedAttribute_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeIndexedAttribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeIndexedAttribute_argsTupleSchemeFactory());
    }

    public String name; // required
    public IndexedAttributeSpec spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      SPEC((short)2, "spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // SPEC
            return SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexedAttributeSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeIndexedAttribute_args.class, metaDataMap);
    }

    public removeIndexedAttribute_args() {
    }

    public removeIndexedAttribute_args(
      String name,
      IndexedAttributeSpec spec)
    {
      this();
      this.name = name;
      this.spec = spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeIndexedAttribute_args(removeIndexedAttribute_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetSpec()) {
        this.spec = new IndexedAttributeSpec(other.spec);
      }
    }

    public removeIndexedAttribute_args deepCopy() {
      return new removeIndexedAttribute_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.spec = null;
    }

    public String getName() {
      return this.name;
    }

    public removeIndexedAttribute_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public IndexedAttributeSpec getSpec() {
      return this.spec;
    }

    public removeIndexedAttribute_args setSpec(IndexedAttributeSpec spec) {
      this.spec = spec;
      return this;
    }

    public void unsetSpec() {
      this.spec = null;
    }

    /** Returns true if field spec is set (has been assigned a value) and false otherwise */
    public boolean isSetSpec() {
      return this.spec != null;
    }

    public void setSpecIsSet(boolean value) {
      if (!value) {
        this.spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SPEC:
        if (value == null) {
          unsetSpec();
        } else {
          setSpec((IndexedAttributeSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case SPEC:
        return getSpec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case SPEC:
        return isSetSpec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeIndexedAttribute_args)
        return this.equals((removeIndexedAttribute_args)that);
      return false;
    }

    public boolean equals(removeIndexedAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_spec = true && this.isSetSpec();
      boolean that_present_spec = true && that.isSetSpec();
      if (this_present_spec || that_present_spec) {
        if (!(this_present_spec && that_present_spec))
          return false;
        if (!this.spec.equals(that.spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_spec = true && (isSetSpec());
      list.add(present_spec);
      if (present_spec)
        list.add(spec);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeIndexedAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeIndexedAttribute_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spec:");
      if (this.spec == null) {
        sb.append("null");
      } else {
        sb.append(this.spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (spec == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spec' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (spec != null) {
        spec.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeIndexedAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public removeIndexedAttribute_argsStandardScheme getScheme() {
        return new removeIndexedAttribute_argsStandardScheme();
      }
    }

    private static class removeIndexedAttribute_argsStandardScheme extends StandardScheme<removeIndexedAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeIndexedAttribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spec = new IndexedAttributeSpec();
                struct.spec.read(iprot);
                struct.setSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeIndexedAttribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.spec != null) {
          oprot.writeFieldBegin(SPEC_FIELD_DESC);
          struct.spec.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeIndexedAttribute_argsTupleSchemeFactory implements SchemeFactory {
      public removeIndexedAttribute_argsTupleScheme getScheme() {
        return new removeIndexedAttribute_argsTupleScheme();
      }
    }

    private static class removeIndexedAttribute_argsTupleScheme extends TupleScheme<removeIndexedAttribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeIndexedAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        struct.spec.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeIndexedAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.spec = new IndexedAttributeSpec();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
    }

  }

  public static class removeIndexedAttribute_result implements org.apache.thrift.TBase<removeIndexedAttribute_result, removeIndexedAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeIndexedAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeIndexedAttribute_result");

    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeIndexedAttribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeIndexedAttribute_resultTupleSchemeFactory());
    }

    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeIndexedAttribute_result.class, metaDataMap);
    }

    public removeIndexedAttribute_result() {
    }

    public removeIndexedAttribute_result(
      HawkInstanceNotFound err1)
    {
      this();
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeIndexedAttribute_result(removeIndexedAttribute_result other) {
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public removeIndexedAttribute_result deepCopy() {
      return new removeIndexedAttribute_result(this);
    }

    @Override
    public void clear() {
      this.err1 = null;
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public removeIndexedAttribute_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeIndexedAttribute_result)
        return this.equals((removeIndexedAttribute_result)that);
      return false;
    }

    public boolean equals(removeIndexedAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeIndexedAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeIndexedAttribute_result(");
      boolean first = true;

      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeIndexedAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public removeIndexedAttribute_resultStandardScheme getScheme() {
        return new removeIndexedAttribute_resultStandardScheme();
      }
    }

    private static class removeIndexedAttribute_resultStandardScheme extends StandardScheme<removeIndexedAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeIndexedAttribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeIndexedAttribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeIndexedAttribute_resultTupleSchemeFactory implements SchemeFactory {
      public removeIndexedAttribute_resultTupleScheme getScheme() {
        return new removeIndexedAttribute_resultTupleScheme();
      }
    }

    private static class removeIndexedAttribute_resultTupleScheme extends TupleScheme<removeIndexedAttribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeIndexedAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeIndexedAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class listIndexedAttributes_args implements org.apache.thrift.TBase<listIndexedAttributes_args, listIndexedAttributes_args._Fields>, java.io.Serializable, Cloneable, Comparable<listIndexedAttributes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listIndexedAttributes_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listIndexedAttributes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listIndexedAttributes_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listIndexedAttributes_args.class, metaDataMap);
    }

    public listIndexedAttributes_args() {
    }

    public listIndexedAttributes_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listIndexedAttributes_args(listIndexedAttributes_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public listIndexedAttributes_args deepCopy() {
      return new listIndexedAttributes_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public listIndexedAttributes_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listIndexedAttributes_args)
        return this.equals((listIndexedAttributes_args)that);
      return false;
    }

    public boolean equals(listIndexedAttributes_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(listIndexedAttributes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listIndexedAttributes_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listIndexedAttributes_argsStandardSchemeFactory implements SchemeFactory {
      public listIndexedAttributes_argsStandardScheme getScheme() {
        return new listIndexedAttributes_argsStandardScheme();
      }
    }

    private static class listIndexedAttributes_argsStandardScheme extends StandardScheme<listIndexedAttributes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listIndexedAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listIndexedAttributes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listIndexedAttributes_argsTupleSchemeFactory implements SchemeFactory {
      public listIndexedAttributes_argsTupleScheme getScheme() {
        return new listIndexedAttributes_argsTupleScheme();
      }
    }

    private static class listIndexedAttributes_argsTupleScheme extends TupleScheme<listIndexedAttributes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listIndexedAttributes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listIndexedAttributes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class listIndexedAttributes_result implements org.apache.thrift.TBase<listIndexedAttributes_result, listIndexedAttributes_result._Fields>, java.io.Serializable, Cloneable, Comparable<listIndexedAttributes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listIndexedAttributes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listIndexedAttributes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listIndexedAttributes_resultTupleSchemeFactory());
    }

    public List<IndexedAttributeSpec> success; // required
    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexedAttributeSpec.class))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listIndexedAttributes_result.class, metaDataMap);
    }

    public listIndexedAttributes_result() {
    }

    public listIndexedAttributes_result(
      List<IndexedAttributeSpec> success,
      HawkInstanceNotFound err1)
    {
      this();
      this.success = success;
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listIndexedAttributes_result(listIndexedAttributes_result other) {
      if (other.isSetSuccess()) {
        List<IndexedAttributeSpec> __this__success = new ArrayList<IndexedAttributeSpec>(other.success.size());
        for (IndexedAttributeSpec other_element : other.success) {
          __this__success.add(new IndexedAttributeSpec(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public listIndexedAttributes_result deepCopy() {
      return new listIndexedAttributes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<IndexedAttributeSpec> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(IndexedAttributeSpec elem) {
      if (this.success == null) {
        this.success = new ArrayList<IndexedAttributeSpec>();
      }
      this.success.add(elem);
    }

    public List<IndexedAttributeSpec> getSuccess() {
      return this.success;
    }

    public listIndexedAttributes_result setSuccess(List<IndexedAttributeSpec> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public listIndexedAttributes_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<IndexedAttributeSpec>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listIndexedAttributes_result)
        return this.equals((listIndexedAttributes_result)that);
      return false;
    }

    public boolean equals(listIndexedAttributes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(listIndexedAttributes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listIndexedAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listIndexedAttributes_resultStandardSchemeFactory implements SchemeFactory {
      public listIndexedAttributes_resultStandardScheme getScheme() {
        return new listIndexedAttributes_resultStandardScheme();
      }
    }

    private static class listIndexedAttributes_resultStandardScheme extends StandardScheme<listIndexedAttributes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listIndexedAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<IndexedAttributeSpec>(_list104.size);
                  IndexedAttributeSpec _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new IndexedAttributeSpec();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listIndexedAttributes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (IndexedAttributeSpec _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listIndexedAttributes_resultTupleSchemeFactory implements SchemeFactory {
      public listIndexedAttributes_resultTupleScheme getScheme() {
        return new listIndexedAttributes_resultTupleScheme();
      }
    }

    private static class listIndexedAttributes_resultTupleScheme extends TupleScheme<listIndexedAttributes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listIndexedAttributes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (IndexedAttributeSpec _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listIndexedAttributes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<IndexedAttributeSpec>(_list109.size);
            IndexedAttributeSpec _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new IndexedAttributeSpec();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class getModel_args implements org.apache.thrift.TBase<getModel_args, getModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModel_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REPOSITORY_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("repositoryUri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getModel_argsTupleSchemeFactory());
    }

    public String name; // required
    public String repositoryUri; // required
    public String filePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      REPOSITORY_URI((short)2, "repositoryUri"),
      FILE_PATH((short)3, "filePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // REPOSITORY_URI
            return REPOSITORY_URI;
          case 3: // FILE_PATH
            return FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPOSITORY_URI, new org.apache.thrift.meta_data.FieldMetaData("repositoryUri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModel_args.class, metaDataMap);
    }

    public getModel_args() {
    }

    public getModel_args(
      String name,
      String repositoryUri,
      String filePath)
    {
      this();
      this.name = name;
      this.repositoryUri = repositoryUri;
      this.filePath = filePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModel_args(getModel_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetRepositoryUri()) {
        this.repositoryUri = other.repositoryUri;
      }
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
    }

    public getModel_args deepCopy() {
      return new getModel_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.repositoryUri = null;
      this.filePath = null;
    }

    public String getName() {
      return this.name;
    }

    public getModel_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getRepositoryUri() {
      return this.repositoryUri;
    }

    public getModel_args setRepositoryUri(String repositoryUri) {
      this.repositoryUri = repositoryUri;
      return this;
    }

    public void unsetRepositoryUri() {
      this.repositoryUri = null;
    }

    /** Returns true if field repositoryUri is set (has been assigned a value) and false otherwise */
    public boolean isSetRepositoryUri() {
      return this.repositoryUri != null;
    }

    public void setRepositoryUriIsSet(boolean value) {
      if (!value) {
        this.repositoryUri = null;
      }
    }

    public String getFilePath() {
      return this.filePath;
    }

    public getModel_args setFilePath(String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case REPOSITORY_URI:
        if (value == null) {
          unsetRepositoryUri();
        } else {
          setRepositoryUri((String)value);
        }
        break;

      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case REPOSITORY_URI:
        return getRepositoryUri();

      case FILE_PATH:
        return getFilePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case REPOSITORY_URI:
        return isSetRepositoryUri();
      case FILE_PATH:
        return isSetFilePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getModel_args)
        return this.equals((getModel_args)that);
      return false;
    }

    public boolean equals(getModel_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_repositoryUri = true && this.isSetRepositoryUri();
      boolean that_present_repositoryUri = true && that.isSetRepositoryUri();
      if (this_present_repositoryUri || that_present_repositoryUri) {
        if (!(this_present_repositoryUri && that_present_repositoryUri))
          return false;
        if (!this.repositoryUri.equals(that.repositoryUri))
          return false;
      }

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_repositoryUri = true && (isSetRepositoryUri());
      list.add(present_repositoryUri);
      if (present_repositoryUri)
        list.add(repositoryUri);

      boolean present_filePath = true && (isSetFilePath());
      list.add(present_filePath);
      if (present_filePath)
        list.add(filePath);

      return list.hashCode();
    }

    @Override
    public int compareTo(getModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepositoryUri()).compareTo(other.isSetRepositoryUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepositoryUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repositoryUri, other.repositoryUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getModel_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repositoryUri:");
      if (this.repositoryUri == null) {
        sb.append("null");
      } else {
        sb.append(this.repositoryUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (repositoryUri == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'repositoryUri' was not present! Struct: " + toString());
      }
      if (filePath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModel_argsStandardSchemeFactory implements SchemeFactory {
      public getModel_argsStandardScheme getScheme() {
        return new getModel_argsStandardScheme();
      }
    }

    private static class getModel_argsStandardScheme extends StandardScheme<getModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPOSITORY_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repositoryUri = iprot.readString();
                struct.setRepositoryUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.repositoryUri != null) {
          oprot.writeFieldBegin(REPOSITORY_URI_FIELD_DESC);
          oprot.writeString(struct.repositoryUri);
          oprot.writeFieldEnd();
        }
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModel_argsTupleSchemeFactory implements SchemeFactory {
      public getModel_argsTupleScheme getScheme() {
        return new getModel_argsTupleScheme();
      }
    }

    private static class getModel_argsTupleScheme extends TupleScheme<getModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        oprot.writeString(struct.repositoryUri);
        oprot.writeString(struct.filePath);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.repositoryUri = iprot.readString();
        struct.setRepositoryUriIsSet(true);
        struct.filePath = iprot.readString();
        struct.setFilePathIsSet(true);
      }
    }

  }

  public static class getModel_result implements org.apache.thrift.TBase<getModel_result, getModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR1_FIELD_DESC = new org.apache.thrift.protocol.TField("err1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getModel_resultTupleSchemeFactory());
    }

    public List<ModelElement> success; // required
    public HawkInstanceNotFound err1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR1((short)1, "err1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR1
            return ERR1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelElement.class))));
      tmpMap.put(_Fields.ERR1, new org.apache.thrift.meta_data.FieldMetaData("err1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModel_result.class, metaDataMap);
    }

    public getModel_result() {
    }

    public getModel_result(
      List<ModelElement> success,
      HawkInstanceNotFound err1)
    {
      this();
      this.success = success;
      this.err1 = err1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModel_result(getModel_result other) {
      if (other.isSetSuccess()) {
        List<ModelElement> __this__success = new ArrayList<ModelElement>(other.success.size());
        for (ModelElement other_element : other.success) {
          __this__success.add(new ModelElement(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr1()) {
        this.err1 = new HawkInstanceNotFound(other.err1);
      }
    }

    public getModel_result deepCopy() {
      return new getModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ModelElement> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ModelElement elem) {
      if (this.success == null) {
        this.success = new ArrayList<ModelElement>();
      }
      this.success.add(elem);
    }

    public List<ModelElement> getSuccess() {
      return this.success;
    }

    public getModel_result setSuccess(List<ModelElement> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HawkInstanceNotFound getErr1() {
      return this.err1;
    }

    public getModel_result setErr1(HawkInstanceNotFound err1) {
      this.err1 = err1;
      return this;
    }

    public void unsetErr1() {
      this.err1 = null;
    }

    /** Returns true if field err1 is set (has been assigned a value) and false otherwise */
    public boolean isSetErr1() {
      return this.err1 != null;
    }

    public void setErr1IsSet(boolean value) {
      if (!value) {
        this.err1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ModelElement>)value);
        }
        break;

      case ERR1:
        if (value == null) {
          unsetErr1();
        } else {
          setErr1((HawkInstanceNotFound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR1:
        return getErr1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR1:
        return isSetErr1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getModel_result)
        return this.equals((getModel_result)that);
      return false;
    }

    public boolean equals(getModel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err1 = true && this.isSetErr1();
      boolean that_present_err1 = true && that.isSetErr1();
      if (this_present_err1 || that_present_err1) {
        if (!(this_present_err1 && that_present_err1))
          return false;
        if (!this.err1.equals(that.err1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err1 = true && (isSetErr1());
      list.add(present_err1);
      if (present_err1)
        list.add(err1);

      return list.hashCode();
    }

    @Override
    public int compareTo(getModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr1()).compareTo(other.isSetErr1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err1, other.err1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err1:");
      if (this.err1 == null) {
        sb.append("null");
      } else {
        sb.append(this.err1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModel_resultStandardSchemeFactory implements SchemeFactory {
      public getModel_resultStandardScheme getScheme() {
        return new getModel_resultStandardScheme();
      }
    }

    private static class getModel_resultStandardScheme extends StandardScheme<getModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<ModelElement>(_list112.size);
                  ModelElement _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new ModelElement();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err1 = new HawkInstanceNotFound();
                struct.err1.read(iprot);
                struct.setErr1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ModelElement _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err1 != null) {
          oprot.writeFieldBegin(ERR1_FIELD_DESC);
          struct.err1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModel_resultTupleSchemeFactory implements SchemeFactory {
      public getModel_resultTupleScheme getScheme() {
        return new getModel_resultTupleScheme();
      }
    }

    private static class getModel_resultTupleScheme extends TupleScheme<getModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ModelElement _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetErr1()) {
          struct.err1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ModelElement>(_list117.size);
            ModelElement _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new ModelElement();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err1 = new HawkInstanceNotFound();
          struct.err1.read(iprot);
          struct.setErr1IsSet(true);
        }
      }
    }

  }

  public static class watchModelChanges_args implements org.apache.thrift.TBase<watchModelChanges_args, watchModelChanges_args._Fields>, java.io.Serializable, Cloneable, Comparable<watchModelChanges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("watchModelChanges_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REPOSITORY_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("repositoryUri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHANGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("changeType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MODEL_ELEMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("modelElementType", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new watchModelChanges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new watchModelChanges_argsTupleSchemeFactory());
    }

    public String name; // required
    public String repositoryUri; // required
    public String filePath; // required
    /**
     * 
     * @see ModelElementChangeType
     */
    public ModelElementChangeType changeType; // required
    public String modelElementType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      REPOSITORY_URI((short)2, "repositoryUri"),
      FILE_PATH((short)3, "filePath"),
      /**
       * 
       * @see ModelElementChangeType
       */
      CHANGE_TYPE((short)4, "changeType"),
      MODEL_ELEMENT_TYPE((short)5, "modelElementType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // REPOSITORY_URI
            return REPOSITORY_URI;
          case 3: // FILE_PATH
            return FILE_PATH;
          case 4: // CHANGE_TYPE
            return CHANGE_TYPE;
          case 5: // MODEL_ELEMENT_TYPE
            return MODEL_ELEMENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPOSITORY_URI, new org.apache.thrift.meta_data.FieldMetaData("repositoryUri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("changeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ModelElementChangeType.class)));
      tmpMap.put(_Fields.MODEL_ELEMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("modelElementType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(watchModelChanges_args.class, metaDataMap);
    }

    public watchModelChanges_args() {
    }

    public watchModelChanges_args(
      String name,
      String repositoryUri,
      String filePath,
      ModelElementChangeType changeType,
      String modelElementType)
    {
      this();
      this.name = name;
      this.repositoryUri = repositoryUri;
      this.filePath = filePath;
      this.changeType = changeType;
      this.modelElementType = modelElementType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public watchModelChanges_args(watchModelChanges_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetRepositoryUri()) {
        this.repositoryUri = other.repositoryUri;
      }
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
      if (other.isSetChangeType()) {
        this.changeType = other.changeType;
      }
      if (other.isSetModelElementType()) {
        this.modelElementType = other.modelElementType;
      }
    }

    public watchModelChanges_args deepCopy() {
      return new watchModelChanges_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.repositoryUri = null;
      this.filePath = null;
      this.changeType = null;
      this.modelElementType = null;
    }

    public String getName() {
      return this.name;
    }

    public watchModelChanges_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getRepositoryUri() {
      return this.repositoryUri;
    }

    public watchModelChanges_args setRepositoryUri(String repositoryUri) {
      this.repositoryUri = repositoryUri;
      return this;
    }

    public void unsetRepositoryUri() {
      this.repositoryUri = null;
    }

    /** Returns true if field repositoryUri is set (has been assigned a value) and false otherwise */
    public boolean isSetRepositoryUri() {
      return this.repositoryUri != null;
    }

    public void setRepositoryUriIsSet(boolean value) {
      if (!value) {
        this.repositoryUri = null;
      }
    }

    public String getFilePath() {
      return this.filePath;
    }

    public watchModelChanges_args setFilePath(String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    /**
     * 
     * @see ModelElementChangeType
     */
    public ModelElementChangeType getChangeType() {
      return this.changeType;
    }

    /**
     * 
     * @see ModelElementChangeType
     */
    public watchModelChanges_args setChangeType(ModelElementChangeType changeType) {
      this.changeType = changeType;
      return this;
    }

    public void unsetChangeType() {
      this.changeType = null;
    }

    /** Returns true if field changeType is set (has been assigned a value) and false otherwise */
    public boolean isSetChangeType() {
      return this.changeType != null;
    }

    public void setChangeTypeIsSet(boolean value) {
      if (!value) {
        this.changeType = null;
      }
    }

    public String getModelElementType() {
      return this.modelElementType;
    }

    public watchModelChanges_args setModelElementType(String modelElementType) {
      this.modelElementType = modelElementType;
      return this;
    }

    public void unsetModelElementType() {
      this.modelElementType = null;
    }

    /** Returns true if field modelElementType is set (has been assigned a value) and false otherwise */
    public boolean isSetModelElementType() {
      return this.modelElementType != null;
    }

    public void setModelElementTypeIsSet(boolean value) {
      if (!value) {
        this.modelElementType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case REPOSITORY_URI:
        if (value == null) {
          unsetRepositoryUri();
        } else {
          setRepositoryUri((String)value);
        }
        break;

      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((String)value);
        }
        break;

      case CHANGE_TYPE:
        if (value == null) {
          unsetChangeType();
        } else {
          setChangeType((ModelElementChangeType)value);
        }
        break;

      case MODEL_ELEMENT_TYPE:
        if (value == null) {
          unsetModelElementType();
        } else {
          setModelElementType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case REPOSITORY_URI:
        return getRepositoryUri();

      case FILE_PATH:
        return getFilePath();

      case CHANGE_TYPE:
        return getChangeType();

      case MODEL_ELEMENT_TYPE:
        return getModelElementType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case REPOSITORY_URI:
        return isSetRepositoryUri();
      case FILE_PATH:
        return isSetFilePath();
      case CHANGE_TYPE:
        return isSetChangeType();
      case MODEL_ELEMENT_TYPE:
        return isSetModelElementType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof watchModelChanges_args)
        return this.equals((watchModelChanges_args)that);
      return false;
    }

    public boolean equals(watchModelChanges_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_repositoryUri = true && this.isSetRepositoryUri();
      boolean that_present_repositoryUri = true && that.isSetRepositoryUri();
      if (this_present_repositoryUri || that_present_repositoryUri) {
        if (!(this_present_repositoryUri && that_present_repositoryUri))
          return false;
        if (!this.repositoryUri.equals(that.repositoryUri))
          return false;
      }

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      boolean this_present_changeType = true && this.isSetChangeType();
      boolean that_present_changeType = true && that.isSetChangeType();
      if (this_present_changeType || that_present_changeType) {
        if (!(this_present_changeType && that_present_changeType))
          return false;
        if (!this.changeType.equals(that.changeType))
          return false;
      }

      boolean this_present_modelElementType = true && this.isSetModelElementType();
      boolean that_present_modelElementType = true && that.isSetModelElementType();
      if (this_present_modelElementType || that_present_modelElementType) {
        if (!(this_present_modelElementType && that_present_modelElementType))
          return false;
        if (!this.modelElementType.equals(that.modelElementType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_repositoryUri = true && (isSetRepositoryUri());
      list.add(present_repositoryUri);
      if (present_repositoryUri)
        list.add(repositoryUri);

      boolean present_filePath = true && (isSetFilePath());
      list.add(present_filePath);
      if (present_filePath)
        list.add(filePath);

      boolean present_changeType = true && (isSetChangeType());
      list.add(present_changeType);
      if (present_changeType)
        list.add(changeType.getValue());

      boolean present_modelElementType = true && (isSetModelElementType());
      list.add(present_modelElementType);
      if (present_modelElementType)
        list.add(modelElementType);

      return list.hashCode();
    }

    @Override
    public int compareTo(watchModelChanges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepositoryUri()).compareTo(other.isSetRepositoryUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepositoryUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repositoryUri, other.repositoryUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChangeType()).compareTo(other.isSetChangeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChangeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeType, other.changeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModelElementType()).compareTo(other.isSetModelElementType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelElementType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelElementType, other.modelElementType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("watchModelChanges_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repositoryUri:");
      if (this.repositoryUri == null) {
        sb.append("null");
      } else {
        sb.append(this.repositoryUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("changeType:");
      if (this.changeType == null) {
        sb.append("null");
      } else {
        sb.append(this.changeType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelElementType:");
      if (this.modelElementType == null) {
        sb.append("null");
      } else {
        sb.append(this.modelElementType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (repositoryUri == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'repositoryUri' was not present! Struct: " + toString());
      }
      if (filePath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class watchModelChanges_argsStandardSchemeFactory implements SchemeFactory {
      public watchModelChanges_argsStandardScheme getScheme() {
        return new watchModelChanges_argsStandardScheme();
      }
    }

    private static class watchModelChanges_argsStandardScheme extends StandardScheme<watchModelChanges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, watchModelChanges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPOSITORY_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repositoryUri = iprot.readString();
                struct.setRepositoryUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHANGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.changeType = mondo_api.ModelElementChangeType.findByValue(iprot.readI32());
                struct.setChangeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MODEL_ELEMENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelElementType = iprot.readString();
                struct.setModelElementTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, watchModelChanges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.repositoryUri != null) {
          oprot.writeFieldBegin(REPOSITORY_URI_FIELD_DESC);
          oprot.writeString(struct.repositoryUri);
          oprot.writeFieldEnd();
        }
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        if (struct.changeType != null) {
          oprot.writeFieldBegin(CHANGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.changeType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.modelElementType != null) {
          oprot.writeFieldBegin(MODEL_ELEMENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.modelElementType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class watchModelChanges_argsTupleSchemeFactory implements SchemeFactory {
      public watchModelChanges_argsTupleScheme getScheme() {
        return new watchModelChanges_argsTupleScheme();
      }
    }

    private static class watchModelChanges_argsTupleScheme extends TupleScheme<watchModelChanges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, watchModelChanges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
        oprot.writeString(struct.repositoryUri);
        oprot.writeString(struct.filePath);
        BitSet optionals = new BitSet();
        if (struct.isSetChangeType()) {
          optionals.set(0);
        }
        if (struct.isSetModelElementType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetChangeType()) {
          oprot.writeI32(struct.changeType.getValue());
        }
        if (struct.isSetModelElementType()) {
          oprot.writeString(struct.modelElementType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, watchModelChanges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.repositoryUri = iprot.readString();
        struct.setRepositoryUriIsSet(true);
        struct.filePath = iprot.readString();
        struct.setFilePathIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.changeType = mondo_api.ModelElementChangeType.findByValue(iprot.readI32());
          struct.setChangeTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.modelElementType = iprot.readString();
          struct.setModelElementTypeIsSet(true);
        }
      }
    }

  }

  public static class watchModelChanges_result implements org.apache.thrift.TBase<watchModelChanges_result, watchModelChanges_result._Fields>, java.io.Serializable, Cloneable, Comparable<watchModelChanges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("watchModelChanges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new watchModelChanges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new watchModelChanges_resultTupleSchemeFactory());
    }

    public List<ModelElementChange> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelElementChange.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(watchModelChanges_result.class, metaDataMap);
    }

    public watchModelChanges_result() {
    }

    public watchModelChanges_result(
      List<ModelElementChange> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public watchModelChanges_result(watchModelChanges_result other) {
      if (other.isSetSuccess()) {
        List<ModelElementChange> __this__success = new ArrayList<ModelElementChange>(other.success.size());
        for (ModelElementChange other_element : other.success) {
          __this__success.add(new ModelElementChange(other_element));
        }
        this.success = __this__success;
      }
    }

    public watchModelChanges_result deepCopy() {
      return new watchModelChanges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ModelElementChange> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ModelElementChange elem) {
      if (this.success == null) {
        this.success = new ArrayList<ModelElementChange>();
      }
      this.success.add(elem);
    }

    public List<ModelElementChange> getSuccess() {
      return this.success;
    }

    public watchModelChanges_result setSuccess(List<ModelElementChange> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ModelElementChange>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof watchModelChanges_result)
        return this.equals((watchModelChanges_result)that);
      return false;
    }

    public boolean equals(watchModelChanges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(watchModelChanges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("watchModelChanges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class watchModelChanges_resultStandardSchemeFactory implements SchemeFactory {
      public watchModelChanges_resultStandardScheme getScheme() {
        return new watchModelChanges_resultStandardScheme();
      }
    }

    private static class watchModelChanges_resultStandardScheme extends StandardScheme<watchModelChanges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, watchModelChanges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<ModelElementChange>(_list120.size);
                  ModelElementChange _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new ModelElementChange();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, watchModelChanges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ModelElementChange _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class watchModelChanges_resultTupleSchemeFactory implements SchemeFactory {
      public watchModelChanges_resultTupleScheme getScheme() {
        return new watchModelChanges_resultTupleScheme();
      }
    }

    private static class watchModelChanges_resultTupleScheme extends TupleScheme<watchModelChanges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, watchModelChanges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ModelElementChange _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, watchModelChanges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ModelElementChange>(_list125.size);
            ModelElementChange _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new ModelElementChange();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
