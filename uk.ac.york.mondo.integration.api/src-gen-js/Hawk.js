//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Hawk_createInstance_args = function(args) {
  this.name = null;
  this.adminPassword = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.adminPassword !== undefined) {
      this.adminPassword = args.adminPassword;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field adminPassword is unset!');
    }
  }
};
Hawk_createInstance_args.prototype = {};
Hawk_createInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.adminPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_createInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_createInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.adminPassword !== null && this.adminPassword !== undefined) {
    output.writeFieldBegin('adminPassword', Thrift.Type.STRING, 2);
    output.writeString(this.adminPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_createInstance_result = function(args) {
};
Hawk_createInstance_result.prototype = {};
Hawk_createInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_createInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_createInstance_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listInstances_args = function(args) {
};
Hawk_listInstances_args.prototype = {};
Hawk_listInstances_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listInstances_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listInstances_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listInstances_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Hawk_listInstances_result.prototype = {};
Hawk_listInstances_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new HawkInstance();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listInstances_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listInstances_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeInstance_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_removeInstance_args.prototype = {};
Hawk_removeInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeInstance_result = function(args) {
  this.err1 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
  }
};
Hawk_removeInstance_result.prototype = {};
Hawk_removeInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_startInstance_args = function(args) {
  this.name = null;
  this.adminPassword = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.adminPassword !== undefined) {
      this.adminPassword = args.adminPassword;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field adminPassword is unset!');
    }
  }
};
Hawk_startInstance_args.prototype = {};
Hawk_startInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.adminPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_startInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_startInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.adminPassword !== null && this.adminPassword !== undefined) {
    output.writeFieldBegin('adminPassword', Thrift.Type.STRING, 2);
    output.writeString(this.adminPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_startInstance_result = function(args) {
  this.err1 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
  }
};
Hawk_startInstance_result.prototype = {};
Hawk_startInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_startInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_startInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_stopInstance_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_stopInstance_args.prototype = {};
Hawk_stopInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_stopInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_stopInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_stopInstance_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_stopInstance_result.prototype = {};
Hawk_stopInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_stopInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_stopInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_registerMetamodels_args = function(args) {
  this.name = null;
  this.metamodel = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.metamodel !== undefined) {
      this.metamodel = args.metamodel;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodel is unset!');
    }
  }
};
Hawk_registerMetamodels_args.prototype = {};
Hawk_registerMetamodels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.metamodel = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new File();
          elem134.read(input);
          this.metamodel.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_registerMetamodels_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_registerMetamodels_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.metamodel !== null && this.metamodel !== undefined) {
    output.writeFieldBegin('metamodel', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.metamodel.length);
    for (var iter135 in this.metamodel)
    {
      if (this.metamodel.hasOwnProperty(iter135))
      {
        iter135 = this.metamodel[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_registerMetamodels_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof InvalidMetamodel) {
    this.err2 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined) {
      this.err3 = args.err3;
    }
  }
};
Hawk_registerMetamodels_result.prototype = {};
Hawk_registerMetamodels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new InvalidMetamodel();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new HawkInstanceNotRunning();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_registerMetamodels_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_registerMetamodels_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_unregisterMetamodel_args = function(args) {
  this.name = null;
  this.metamodel = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.metamodel !== undefined) {
      this.metamodel = args.metamodel;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodel is unset!');
    }
  }
};
Hawk_unregisterMetamodel_args.prototype = {};
Hawk_unregisterMetamodel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metamodel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_unregisterMetamodel_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_unregisterMetamodel_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.metamodel !== null && this.metamodel !== undefined) {
    output.writeFieldBegin('metamodel', Thrift.Type.STRING, 2);
    output.writeString(this.metamodel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_unregisterMetamodel_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_unregisterMetamodel_result.prototype = {};
Hawk_unregisterMetamodel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_unregisterMetamodel_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_unregisterMetamodel_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listMetamodels_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listMetamodels_args.prototype = {};
Hawk_listMetamodels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listMetamodels_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listMetamodels_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listMetamodels_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listMetamodels_result.prototype = {};
Hawk_listMetamodels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readString().value;
          this.success.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listMetamodels_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listMetamodels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        output.writeString(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listQueryLanguages_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listQueryLanguages_args.prototype = {};
Hawk_listQueryLanguages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listQueryLanguages_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listQueryLanguages_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listQueryLanguages_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Hawk_listQueryLanguages_result.prototype = {};
Hawk_listQueryLanguages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.success = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = input.readString().value;
          this.success.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listQueryLanguages_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listQueryLanguages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter151 in this.success)
    {
      if (this.success.hasOwnProperty(iter151))
      {
        iter151 = this.success[iter151];
        output.writeString(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_query_args = function(args) {
  this.name = null;
  this.query = null;
  this.language = null;
  this.repository = null;
  this.scope = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.query !== undefined) {
      this.query = args.query;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field query is unset!');
    }
    if (args.language !== undefined) {
      this.language = args.language;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field language is unset!');
    }
    if (args.repository !== undefined) {
      this.repository = args.repository;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repository is unset!');
    }
    if (args.scope !== undefined) {
      this.scope = args.scope;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scope is unset!');
    }
  }
};
Hawk_query_args.prototype = {};
Hawk_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.repository = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.scope = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_query_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_query_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.repository !== null && this.repository !== undefined) {
    output.writeFieldBegin('repository', Thrift.Type.STRING, 4);
    output.writeString(this.repository);
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.STRING, 5);
    output.writeString(this.scope);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_query_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof UnknownQueryLanguage) {
    this.err3 = args;
    return;
  }
  if (args instanceof InvalidQuery) {
    this.err4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined) {
      this.err4 = args.err4;
    }
  }
};
Hawk_query_result.prototype = {};
Hawk_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.success = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new ScalarOrReference();
          elem158.read(input);
          this.success.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new UnknownQueryLanguage();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new InvalidQuery();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_query_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter159 in this.success)
    {
      if (this.success.hasOwnProperty(iter159))
      {
        iter159 = this.success[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_resolveProxies_args = function(args) {
  this.name = null;
  this.ids = null;
  this.includeAttributes = true;
  this.includeReferences = true;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.ids !== undefined) {
      this.ids = args.ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.includeAttributes !== undefined) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeReferences !== undefined) {
      this.includeReferences = args.includeReferences;
    }
  }
};
Hawk_resolveProxies_args.prototype = {};
Hawk_resolveProxies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.ids = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readString().value;
          this.ids.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeReferences = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_resolveProxies_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_resolveProxies_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter167 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter167))
      {
        iter167 = this.ids[iter167];
        output.writeString(iter167);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeReferences !== null && this.includeReferences !== undefined) {
    output.writeFieldBegin('includeReferences', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeReferences);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_resolveProxies_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_resolveProxies_result.prototype = {};
Hawk_resolveProxies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.success = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new ModelElement();
          elem174.read(input);
          this.success.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_resolveProxies_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_resolveProxies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter175 in this.success)
    {
      if (this.success.hasOwnProperty(iter175))
      {
        iter175 = this.success[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addRepository_args = function(args) {
  this.name = null;
  this.repo = null;
  this.credentials = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repo !== undefined) {
      this.repo = args.repo;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repo is unset!');
    }
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
Hawk_addRepository_args.prototype = {};
Hawk_addRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo = new Repository();
        this.repo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new Credentials();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addRepository_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addRepository_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repo !== null && this.repo !== undefined) {
    output.writeFieldBegin('repo', Thrift.Type.STRUCT, 2);
    this.repo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials !== null && this.credentials !== undefined) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 3);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addRepository_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof UnknownRepositoryType) {
    this.err3 = args;
    return;
  }
  if (args instanceof VCSAuthenticationFailed) {
    this.err4 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined) {
      this.err4 = args.err4;
    }
  }
};
Hawk_addRepository_result.prototype = {};
Hawk_addRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new UnknownRepositoryType();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new VCSAuthenticationFailed();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addRepository_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addRepository_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeRepository_args = function(args) {
  this.name = null;
  this.uri = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
  }
};
Hawk_removeRepository_args.prototype = {};
Hawk_removeRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeRepository_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeRepository_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeRepository_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeRepository_result.prototype = {};
Hawk_removeRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeRepository_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeRepository_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_args = function(args) {
  this.name = null;
  this.uri = null;
  this.cred = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.cred !== undefined) {
      this.cred = args.cred;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cred is unset!');
    }
  }
};
Hawk_updateRepositoryCredentials_args.prototype = {};
Hawk_updateRepositoryCredentials_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cred = new Credentials();
        this.cred.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_updateRepositoryCredentials_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.cred !== null && this.cred !== undefined) {
    output.writeFieldBegin('cred', Thrift.Type.STRUCT, 3);
    this.cred.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_updateRepositoryCredentials_result.prototype = {};
Hawk_updateRepositoryCredentials_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_updateRepositoryCredentials_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositories_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listRepositories_args.prototype = {};
Hawk_listRepositories_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositories_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositories_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositories_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listRepositories_result.prototype = {};
Hawk_listRepositories_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.success = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = new Repository();
          elem182.read(input);
          this.success.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositories_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositories_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter183 in this.success)
    {
      if (this.success.hasOwnProperty(iter183))
      {
        iter183 = this.success[iter183];
        iter183.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositoryTypes_args = function(args) {
};
Hawk_listRepositoryTypes_args.prototype = {};
Hawk_listRepositoryTypes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositoryTypes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositoryTypes_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositoryTypes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Hawk_listRepositoryTypes_result.prototype = {};
Hawk_listRepositoryTypes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.success = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = input.readString().value;
          this.success.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositoryTypes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositoryTypes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter191 in this.success)
    {
      if (this.success.hasOwnProperty(iter191))
      {
        iter191 = this.success[iter191];
        output.writeString(iter191);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listFiles_args = function(args) {
  this.name = null;
  this.repository = null;
  this.filePatterns = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repository !== undefined) {
      this.repository = args.repository;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repository is unset!');
    }
    if (args.filePatterns !== undefined) {
      this.filePatterns = args.filePatterns;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePatterns is unset!');
    }
  }
};
Hawk_listFiles_args.prototype = {};
Hawk_listFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.repository = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = input.readString().value;
          this.repository.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size199 = 0;
        var _rtmp3203;
        this.filePatterns = [];
        var _etype202 = 0;
        _rtmp3203 = input.readListBegin();
        _etype202 = _rtmp3203.etype;
        _size199 = _rtmp3203.size;
        for (var _i204 = 0; _i204 < _size199; ++_i204)
        {
          var elem205 = null;
          elem205 = input.readString().value;
          this.filePatterns.push(elem205);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listFiles_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listFiles_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repository !== null && this.repository !== undefined) {
    output.writeFieldBegin('repository', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.repository.length);
    for (var iter206 in this.repository)
    {
      if (this.repository.hasOwnProperty(iter206))
      {
        iter206 = this.repository[iter206];
        output.writeString(iter206);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filePatterns !== null && this.filePatterns !== undefined) {
    output.writeFieldBegin('filePatterns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.filePatterns.length);
    for (var iter207 in this.filePatterns)
    {
      if (this.filePatterns.hasOwnProperty(iter207))
      {
        iter207 = this.filePatterns[iter207];
        output.writeString(iter207);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listFiles_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listFiles_result.prototype = {};
Hawk_listFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.success = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = input.readString().value;
          this.success.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listFiles_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter215 in this.success)
    {
      if (this.success.hasOwnProperty(iter215))
      {
        iter215 = this.success[iter215];
        output.writeString(iter215);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_configurePolling_args = function(args) {
  this.name = null;
  this.base = null;
  this.max = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.base !== undefined) {
      this.base = args.base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field base is unset!');
    }
    if (args.max !== undefined) {
      this.max = args.max;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field max is unset!');
    }
  }
};
Hawk_configurePolling_args.prototype = {};
Hawk_configurePolling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.base = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.max = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_configurePolling_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_configurePolling_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.base !== null && this.base !== undefined) {
    output.writeFieldBegin('base', Thrift.Type.I32, 2);
    output.writeI32(this.base);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I32, 3);
    output.writeI32(this.max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_configurePolling_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidPollingConfiguration) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined) {
      this.err3 = args.err3;
    }
  }
};
Hawk_configurePolling_result.prototype = {};
Hawk_configurePolling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidPollingConfiguration();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_configurePolling_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_configurePolling_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addDerivedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined) {
      this.spec = args.spec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_addDerivedAttribute_args.prototype = {};
Hawk_addDerivedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new DerivedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addDerivedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addDerivedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addDerivedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidDerivedAttributeSpec) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined) {
      this.err3 = args.err3;
    }
  }
};
Hawk_addDerivedAttribute_result.prototype = {};
Hawk_addDerivedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidDerivedAttributeSpec();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addDerivedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addDerivedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeDerivedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined) {
      this.spec = args.spec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_removeDerivedAttribute_args.prototype = {};
Hawk_removeDerivedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new DerivedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeDerivedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeDerivedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeDerivedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeDerivedAttribute_result.prototype = {};
Hawk_removeDerivedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeDerivedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeDerivedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listDerivedAttributes_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listDerivedAttributes_args.prototype = {};
Hawk_listDerivedAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listDerivedAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listDerivedAttributes_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listDerivedAttributes_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listDerivedAttributes_result.prototype = {};
Hawk_listDerivedAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.success = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = new DerivedAttributeSpec();
          elem222.read(input);
          this.success.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listDerivedAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listDerivedAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter223 in this.success)
    {
      if (this.success.hasOwnProperty(iter223))
      {
        iter223 = this.success[iter223];
        iter223.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addIndexedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined) {
      this.spec = args.spec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_addIndexedAttribute_args.prototype = {};
Hawk_addIndexedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new IndexedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addIndexedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addIndexedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addIndexedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidIndexedAttributeSpec) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined) {
      this.err3 = args.err3;
    }
  }
};
Hawk_addIndexedAttribute_result.prototype = {};
Hawk_addIndexedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidIndexedAttributeSpec();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addIndexedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addIndexedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeIndexedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined) {
      this.spec = args.spec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_removeIndexedAttribute_args.prototype = {};
Hawk_removeIndexedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new IndexedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeIndexedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeIndexedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeIndexedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeIndexedAttribute_result.prototype = {};
Hawk_removeIndexedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeIndexedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeIndexedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listIndexedAttributes_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listIndexedAttributes_args.prototype = {};
Hawk_listIndexedAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listIndexedAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listIndexedAttributes_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listIndexedAttributes_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listIndexedAttributes_result.prototype = {};
Hawk_listIndexedAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.success = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = new IndexedAttributeSpec();
          elem230.read(input);
          this.success.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listIndexedAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listIndexedAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter231 in this.success)
    {
      if (this.success.hasOwnProperty(iter231))
      {
        iter231 = this.success[iter231];
        iter231.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getModel_args = function(args) {
  this.name = null;
  this.repositoryUri = null;
  this.filePath = null;
  this.includeAttributes = true;
  this.includeReferences = true;
  this.includeNodeIDs = false;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repositoryUri !== undefined) {
      this.repositoryUri = args.repositoryUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repositoryUri is unset!');
    }
    if (args.filePath !== undefined) {
      this.filePath = args.filePath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePath is unset!');
    }
    if (args.includeAttributes !== undefined) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeReferences !== undefined) {
      this.includeReferences = args.includeReferences;
    }
    if (args.includeNodeIDs !== undefined) {
      this.includeNodeIDs = args.includeNodeIDs;
    }
  }
};
Hawk_getModel_args.prototype = {};
Hawk_getModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size232 = 0;
        var _rtmp3236;
        this.repositoryUri = [];
        var _etype235 = 0;
        _rtmp3236 = input.readListBegin();
        _etype235 = _rtmp3236.etype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var elem238 = null;
          elem238 = input.readString().value;
          this.repositoryUri.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size239 = 0;
        var _rtmp3243;
        this.filePath = [];
        var _etype242 = 0;
        _rtmp3243 = input.readListBegin();
        _etype242 = _rtmp3243.etype;
        _size239 = _rtmp3243.size;
        for (var _i244 = 0; _i244 < _size239; ++_i244)
        {
          var elem245 = null;
          elem245 = input.readString().value;
          this.filePath.push(elem245);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeReferences = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNodeIDs = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getModel_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getModel_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repositoryUri !== null && this.repositoryUri !== undefined) {
    output.writeFieldBegin('repositoryUri', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.repositoryUri.length);
    for (var iter246 in this.repositoryUri)
    {
      if (this.repositoryUri.hasOwnProperty(iter246))
      {
        iter246 = this.repositoryUri[iter246];
        output.writeString(iter246);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.filePath.length);
    for (var iter247 in this.filePath)
    {
      if (this.filePath.hasOwnProperty(iter247))
      {
        iter247 = this.filePath[iter247];
        output.writeString(iter247);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeReferences !== null && this.includeReferences !== undefined) {
    output.writeFieldBegin('includeReferences', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeReferences);
    output.writeFieldEnd();
  }
  if (this.includeNodeIDs !== null && this.includeNodeIDs !== undefined) {
    output.writeFieldBegin('includeNodeIDs', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeNodeIDs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getModel_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_getModel_result.prototype = {};
Hawk_getModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.success = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = new ModelElement();
          elem254.read(input);
          this.success.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getModel_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getModel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter255 in this.success)
    {
      if (this.success.hasOwnProperty(iter255))
      {
        iter255 = this.success[iter255];
        iter255.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getRootElements_args = function(args) {
  this.name = null;
  this.repositoryUri = null;
  this.filePath = null;
  this.includeAttributes = true;
  this.includeReferences = true;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repositoryUri !== undefined) {
      this.repositoryUri = args.repositoryUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repositoryUri is unset!');
    }
    if (args.filePath !== undefined) {
      this.filePath = args.filePath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePath is unset!');
    }
    if (args.includeAttributes !== undefined) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeReferences !== undefined) {
      this.includeReferences = args.includeReferences;
    }
  }
};
Hawk_getRootElements_args.prototype = {};
Hawk_getRootElements_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.repositoryUri = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readString().value;
          this.repositoryUri.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size263 = 0;
        var _rtmp3267;
        this.filePath = [];
        var _etype266 = 0;
        _rtmp3267 = input.readListBegin();
        _etype266 = _rtmp3267.etype;
        _size263 = _rtmp3267.size;
        for (var _i268 = 0; _i268 < _size263; ++_i268)
        {
          var elem269 = null;
          elem269 = input.readString().value;
          this.filePath.push(elem269);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeReferences = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getRootElements_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getRootElements_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repositoryUri !== null && this.repositoryUri !== undefined) {
    output.writeFieldBegin('repositoryUri', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.repositoryUri.length);
    for (var iter270 in this.repositoryUri)
    {
      if (this.repositoryUri.hasOwnProperty(iter270))
      {
        iter270 = this.repositoryUri[iter270];
        output.writeString(iter270);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.filePath.length);
    for (var iter271 in this.filePath)
    {
      if (this.filePath.hasOwnProperty(iter271))
      {
        iter271 = this.filePath[iter271];
        output.writeString(iter271);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeReferences !== null && this.includeReferences !== undefined) {
    output.writeFieldBegin('includeReferences', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeReferences);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getRootElements_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Hawk_getRootElements_result.prototype = {};
Hawk_getRootElements_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.success = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = new ModelElement();
          elem278.read(input);
          this.success.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getRootElements_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getRootElements_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter279 in this.success)
    {
      if (this.success.hasOwnProperty(iter279))
      {
        iter279 = this.success[iter279];
        iter279.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchModelChanges_args = function(args) {
  this.name = null;
  this.repositoryUri = null;
  this.filePath = null;
  this.clientID = null;
  this.durableEvents = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repositoryUri !== undefined) {
      this.repositoryUri = args.repositoryUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repositoryUri is unset!');
    }
    if (args.filePath !== undefined) {
      this.filePath = args.filePath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePath is unset!');
    }
    if (args.clientID !== undefined) {
      this.clientID = args.clientID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clientID is unset!');
    }
    if (args.durableEvents !== undefined) {
      this.durableEvents = args.durableEvents;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field durableEvents is unset!');
    }
  }
};
Hawk_watchModelChanges_args.prototype = {};
Hawk_watchModelChanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.filePath = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readString().value;
          this.filePath.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.clientID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.durableEvents = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchModelChanges_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchModelChanges_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repositoryUri !== null && this.repositoryUri !== undefined) {
    output.writeFieldBegin('repositoryUri', Thrift.Type.STRING, 2);
    output.writeString(this.repositoryUri);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.filePath.length);
    for (var iter287 in this.filePath)
    {
      if (this.filePath.hasOwnProperty(iter287))
      {
        iter287 = this.filePath[iter287];
        output.writeString(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.clientID !== null && this.clientID !== undefined) {
    output.writeFieldBegin('clientID', Thrift.Type.STRING, 4);
    output.writeString(this.clientID);
    output.writeFieldEnd();
  }
  if (this.durableEvents !== null && this.durableEvents !== undefined) {
    output.writeFieldBegin('durableEvents', Thrift.Type.I32, 5);
    output.writeI32(this.durableEvents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchModelChanges_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err1 !== undefined) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined) {
      this.err2 = args.err2;
    }
  }
};
Hawk_watchModelChanges_result.prototype = {};
Hawk_watchModelChanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Subscription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchModelChanges_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchModelChanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
HawkClient.prototype = {};
HawkClient.prototype.createInstance = function(name, adminPassword, callback) {
  this.send_createInstance(name, adminPassword, callback); 
  if (!callback) {
  this.recv_createInstance();
  }
};

HawkClient.prototype.send_createInstance = function(name, adminPassword, callback) {
  this.output.writeMessageBegin('createInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_createInstance_args();
  args.name = name;
  args.adminPassword = adminPassword;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_createInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_createInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
HawkClient.prototype.listInstances = function(callback) {
  this.send_listInstances(callback); 
  if (!callback) {
    return this.recv_listInstances();
  }
};

HawkClient.prototype.send_listInstances = function(callback) {
  this.output.writeMessageBegin('listInstances', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listInstances_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listInstances();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listInstances = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listInstances_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstances failed: unknown result';
};
HawkClient.prototype.removeInstance = function(name, callback) {
  this.send_removeInstance(name, callback); 
  if (!callback) {
  this.recv_removeInstance();
  }
};

HawkClient.prototype.send_removeInstance = function(name, callback) {
  this.output.writeMessageBegin('removeInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeInstance_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  return;
};
HawkClient.prototype.startInstance = function(name, adminPassword, callback) {
  this.send_startInstance(name, adminPassword, callback); 
  if (!callback) {
  this.recv_startInstance();
  }
};

HawkClient.prototype.send_startInstance = function(name, adminPassword, callback) {
  this.output.writeMessageBegin('startInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_startInstance_args();
  args.name = name;
  args.adminPassword = adminPassword;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_startInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_startInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_startInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  return;
};
HawkClient.prototype.stopInstance = function(name, callback) {
  this.send_stopInstance(name, callback); 
  if (!callback) {
  this.recv_stopInstance();
  }
};

HawkClient.prototype.send_stopInstance = function(name, callback) {
  this.output.writeMessageBegin('stopInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_stopInstance_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_stopInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_stopInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_stopInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.registerMetamodels = function(name, metamodel, callback) {
  this.send_registerMetamodels(name, metamodel, callback); 
  if (!callback) {
  this.recv_registerMetamodels();
  }
};

HawkClient.prototype.send_registerMetamodels = function(name, metamodel, callback) {
  this.output.writeMessageBegin('registerMetamodels', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_registerMetamodels_args();
  args.name = name;
  args.metamodel = metamodel;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerMetamodels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_registerMetamodels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_registerMetamodels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.unregisterMetamodel = function(name, metamodel, callback) {
  this.send_unregisterMetamodel(name, metamodel, callback); 
  if (!callback) {
  this.recv_unregisterMetamodel();
  }
};

HawkClient.prototype.send_unregisterMetamodel = function(name, metamodel, callback) {
  this.output.writeMessageBegin('unregisterMetamodel', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_unregisterMetamodel_args();
  args.name = name;
  args.metamodel = metamodel;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unregisterMetamodel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_unregisterMetamodel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_unregisterMetamodel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listMetamodels = function(name, callback) {
  this.send_listMetamodels(name, callback); 
  if (!callback) {
    return this.recv_listMetamodels();
  }
};

HawkClient.prototype.send_listMetamodels = function(name, callback) {
  this.output.writeMessageBegin('listMetamodels', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listMetamodels_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listMetamodels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listMetamodels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listMetamodels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listMetamodels failed: unknown result';
};
HawkClient.prototype.listQueryLanguages = function(name, callback) {
  this.send_listQueryLanguages(name, callback); 
  if (!callback) {
    return this.recv_listQueryLanguages();
  }
};

HawkClient.prototype.send_listQueryLanguages = function(name, callback) {
  this.output.writeMessageBegin('listQueryLanguages', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listQueryLanguages_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listQueryLanguages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listQueryLanguages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listQueryLanguages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listQueryLanguages failed: unknown result';
};
HawkClient.prototype.query = function(name, query, language, repository, scope, callback) {
  this.send_query(name, query, language, repository, scope, callback); 
  if (!callback) {
    return this.recv_query();
  }
};

HawkClient.prototype.send_query = function(name, query, language, repository, scope, callback) {
  this.output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_query_args();
  args.name = name;
  args.query = query;
  args.language = language;
  args.repository = repository;
  args.scope = scope;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_query();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'query failed: unknown result';
};
HawkClient.prototype.resolveProxies = function(name, ids, includeAttributes, includeReferences, callback) {
  this.send_resolveProxies(name, ids, includeAttributes, includeReferences, callback); 
  if (!callback) {
    return this.recv_resolveProxies();
  }
};

HawkClient.prototype.send_resolveProxies = function(name, ids, includeAttributes, includeReferences, callback) {
  this.output.writeMessageBegin('resolveProxies', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_resolveProxies_args();
  args.name = name;
  args.ids = ids;
  args.includeAttributes = includeAttributes;
  args.includeReferences = includeReferences;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_resolveProxies();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_resolveProxies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_resolveProxies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'resolveProxies failed: unknown result';
};
HawkClient.prototype.addRepository = function(name, repo, credentials, callback) {
  this.send_addRepository(name, repo, credentials, callback); 
  if (!callback) {
  this.recv_addRepository();
  }
};

HawkClient.prototype.send_addRepository = function(name, repo, credentials, callback) {
  this.output.writeMessageBegin('addRepository', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addRepository_args();
  args.name = name;
  args.repo = repo;
  args.credentials = credentials;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addRepository();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addRepository = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addRepository_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  return;
};
HawkClient.prototype.removeRepository = function(name, uri, callback) {
  this.send_removeRepository(name, uri, callback); 
  if (!callback) {
  this.recv_removeRepository();
  }
};

HawkClient.prototype.send_removeRepository = function(name, uri, callback) {
  this.output.writeMessageBegin('removeRepository', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeRepository_args();
  args.name = name;
  args.uri = uri;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeRepository();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeRepository = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeRepository_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.updateRepositoryCredentials = function(name, uri, cred, callback) {
  this.send_updateRepositoryCredentials(name, uri, cred, callback); 
  if (!callback) {
  this.recv_updateRepositoryCredentials();
  }
};

HawkClient.prototype.send_updateRepositoryCredentials = function(name, uri, cred, callback) {
  this.output.writeMessageBegin('updateRepositoryCredentials', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_updateRepositoryCredentials_args();
  args.name = name;
  args.uri = uri;
  args.cred = cred;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateRepositoryCredentials();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_updateRepositoryCredentials = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_updateRepositoryCredentials_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listRepositories = function(name, callback) {
  this.send_listRepositories(name, callback); 
  if (!callback) {
    return this.recv_listRepositories();
  }
};

HawkClient.prototype.send_listRepositories = function(name, callback) {
  this.output.writeMessageBegin('listRepositories', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listRepositories_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listRepositories();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listRepositories = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listRepositories_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listRepositories failed: unknown result';
};
HawkClient.prototype.listRepositoryTypes = function(callback) {
  this.send_listRepositoryTypes(callback); 
  if (!callback) {
    return this.recv_listRepositoryTypes();
  }
};

HawkClient.prototype.send_listRepositoryTypes = function(callback) {
  this.output.writeMessageBegin('listRepositoryTypes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listRepositoryTypes_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listRepositoryTypes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listRepositoryTypes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listRepositoryTypes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listRepositoryTypes failed: unknown result';
};
HawkClient.prototype.listFiles = function(name, repository, filePatterns, callback) {
  this.send_listFiles(name, repository, filePatterns, callback); 
  if (!callback) {
    return this.recv_listFiles();
  }
};

HawkClient.prototype.send_listFiles = function(name, repository, filePatterns, callback) {
  this.output.writeMessageBegin('listFiles', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listFiles_args();
  args.name = name;
  args.repository = repository;
  args.filePatterns = filePatterns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listFiles();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listFiles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listFiles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listFiles failed: unknown result';
};
HawkClient.prototype.configurePolling = function(name, base, max, callback) {
  this.send_configurePolling(name, base, max, callback); 
  if (!callback) {
  this.recv_configurePolling();
  }
};

HawkClient.prototype.send_configurePolling = function(name, base, max, callback) {
  this.output.writeMessageBegin('configurePolling', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_configurePolling_args();
  args.name = name;
  args.base = base;
  args.max = max;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_configurePolling();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_configurePolling = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_configurePolling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.addDerivedAttribute = function(name, spec, callback) {
  this.send_addDerivedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_addDerivedAttribute();
  }
};

HawkClient.prototype.send_addDerivedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('addDerivedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addDerivedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addDerivedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addDerivedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addDerivedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.removeDerivedAttribute = function(name, spec, callback) {
  this.send_removeDerivedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_removeDerivedAttribute();
  }
};

HawkClient.prototype.send_removeDerivedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('removeDerivedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeDerivedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeDerivedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeDerivedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeDerivedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listDerivedAttributes = function(name, callback) {
  this.send_listDerivedAttributes(name, callback); 
  if (!callback) {
    return this.recv_listDerivedAttributes();
  }
};

HawkClient.prototype.send_listDerivedAttributes = function(name, callback) {
  this.output.writeMessageBegin('listDerivedAttributes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listDerivedAttributes_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listDerivedAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listDerivedAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listDerivedAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listDerivedAttributes failed: unknown result';
};
HawkClient.prototype.addIndexedAttribute = function(name, spec, callback) {
  this.send_addIndexedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_addIndexedAttribute();
  }
};

HawkClient.prototype.send_addIndexedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('addIndexedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addIndexedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addIndexedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addIndexedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addIndexedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.removeIndexedAttribute = function(name, spec, callback) {
  this.send_removeIndexedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_removeIndexedAttribute();
  }
};

HawkClient.prototype.send_removeIndexedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('removeIndexedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeIndexedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeIndexedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeIndexedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeIndexedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listIndexedAttributes = function(name, callback) {
  this.send_listIndexedAttributes(name, callback); 
  if (!callback) {
    return this.recv_listIndexedAttributes();
  }
};

HawkClient.prototype.send_listIndexedAttributes = function(name, callback) {
  this.output.writeMessageBegin('listIndexedAttributes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listIndexedAttributes_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listIndexedAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listIndexedAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listIndexedAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listIndexedAttributes failed: unknown result';
};
HawkClient.prototype.getModel = function(name, repositoryUri, filePath, includeAttributes, includeReferences, includeNodeIDs, callback) {
  this.send_getModel(name, repositoryUri, filePath, includeAttributes, includeReferences, includeNodeIDs, callback); 
  if (!callback) {
    return this.recv_getModel();
  }
};

HawkClient.prototype.send_getModel = function(name, repositoryUri, filePath, includeAttributes, includeReferences, includeNodeIDs, callback) {
  this.output.writeMessageBegin('getModel', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_getModel_args();
  args.name = name;
  args.repositoryUri = repositoryUri;
  args.filePath = filePath;
  args.includeAttributes = includeAttributes;
  args.includeReferences = includeReferences;
  args.includeNodeIDs = includeNodeIDs;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getModel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_getModel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_getModel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getModel failed: unknown result';
};
HawkClient.prototype.getRootElements = function(name, repositoryUri, filePath, includeAttributes, includeReferences, callback) {
  this.send_getRootElements(name, repositoryUri, filePath, includeAttributes, includeReferences, callback); 
  if (!callback) {
    return this.recv_getRootElements();
  }
};

HawkClient.prototype.send_getRootElements = function(name, repositoryUri, filePath, includeAttributes, includeReferences, callback) {
  this.output.writeMessageBegin('getRootElements', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_getRootElements_args();
  args.name = name;
  args.repositoryUri = repositoryUri;
  args.filePath = filePath;
  args.includeAttributes = includeAttributes;
  args.includeReferences = includeReferences;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRootElements();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_getRootElements = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_getRootElements_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRootElements failed: unknown result';
};
HawkClient.prototype.watchModelChanges = function(name, repositoryUri, filePath, clientID, durableEvents, callback) {
  this.send_watchModelChanges(name, repositoryUri, filePath, clientID, durableEvents, callback);
  if (!callback) {
    return this.recv_watchModelChanges();
  }
};

HawkClient.prototype.send_watchModelChanges = function(name, repositoryUri, filePath, clientID, durableEvents, callback) {
  this.output.writeMessageBegin('watchModelChanges', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_watchModelChanges_args();
  args.name = name;
  args.repositoryUri = repositoryUri;
  args.filePath = filePath;
  args.clientID = clientID;
  args.durableEvents = durableEvents;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_watchModelChanges();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_watchModelChanges = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_watchModelChanges_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'watchModelChanges failed: unknown result';
};
